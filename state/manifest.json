{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.2", "generated_at": "2023-01-18T22:42:28.365519Z", "invocation_id": "4e46d532-a5a8-4d60-bf02-1c234d2514bb", "env": {}, "project_id": "9864d3518b69dd57b80056cf467d0999", "user_id": "192fceca-0367-40b7-adce-5b2d48eb3f6e", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.dbt_tutorial.my_second_dbt_model": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_tutorial.my_first_dbt_model", "model.dbt_tutorial.my_unrelated_model"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "re_data_monitored": true, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_tutorial", "example", "my_second_dbt_model"], "unique_id": "model.dbt_tutorial.my_second_dbt_model", "raw_code": "-- Use the `ref` function to select from other models\n\nwith t1 as (\n    select *\n    from {{ ref('my_first_dbt_model') }}\n    where id = 1\n\n    union \n\n    select *\n    from {{ ref('my_unrelated_model') }}\n)\n\nselect * from t1", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "example/my_second_dbt_model.sql", "original_file_path": "models/example/my_second_dbt_model.sql", "name": "my_second_dbt_model", "alias": "my_second_dbt_model", "checksum": {"name": "sha256", "checksum": "d61843d2c078b0917851be78f11fa7382a0accccd4c41bec985101e782b729b1"}, "tags": [], "refs": [["my_first_dbt_model"], ["my_unrelated_model"]], "sources": [], "metrics": [], "description": "A starter dbt model", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_tutorial://models/example/example_schema.yml", "compiled_path": "target/compiled/dbt_tutorial/models/example/my_second_dbt_model.sql", "build_path": "target/run/dbt_tutorial/models/example/my_second_dbt_model.sql", "deferred": false, "unrendered_config": {"re_data_monitored": true, "materialized": "view"}, "created_at": 1674081662.8831449, "compiled_code": "-- Use the `ref` function to select from other models\n\nwith t1 as (\n    select *\n    from DEVELOPMENT.dbt_bregenold.my_first_dbt_model\n    where id = 1\n\n    union \n\n    select *\n    from DEVELOPMENT.dbt_bregenold.my_unrelated_model\n)\n\nselect * from t1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.my_second_dbt_model"}, "model.dbt_tutorial.my_first_dbt_model": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "re_data_monitored": true, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_tutorial", "example", "my_first_dbt_model"], "unique_id": "model.dbt_tutorial.my_first_dbt_model", "raw_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n{{ config(materialized='view') }}\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n    union all\n    select 2 as id\n    union all\n    select 3 as id\n    union all\n    select null as  id\n\n)\n\nselect *\nfrom source_data\nlimit 1\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "example/my_first_dbt_model.sql", "original_file_path": "models/example/my_first_dbt_model.sql", "name": "my_first_dbt_model", "alias": "my_first_dbt_model", "checksum": {"name": "sha256", "checksum": "80b86e58fa222843acbe2edb4523762968321cf5a1203985beee57c330ff6768"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "A starter dbt model", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_tutorial://models/example/example_schema.yml", "compiled_path": "target/compiled/dbt_tutorial/models/example/my_first_dbt_model.sql", "build_path": "target/run/dbt_tutorial/models/example/my_first_dbt_model.sql", "deferred": false, "unrendered_config": {"re_data_monitored": true, "materialized": "view"}, "created_at": 1674081662.8817415, "compiled_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n    union all\n    select 2 as id\n    union all\n    select 3 as id\n    union all\n    select null as  id\n\n)\n\nselect *\nfrom source_data\nlimit 1\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.my_first_dbt_model"}, "model.dbt_tutorial.my_unrelated_model": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "re_data_monitored": true, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_tutorial", "example", "my_unrelated_model"], "unique_id": "model.dbt_tutorial.my_unrelated_model", "raw_code": "select 99 as id", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "example/my_unrelated_model.sql", "original_file_path": "models/example/my_unrelated_model.sql", "name": "my_unrelated_model", "alias": "my_unrelated_model", "checksum": {"name": "sha256", "checksum": "c692be1b6975f128187e9911bba03f36544fd1602e244c89ca0c6bdb6d787ec0"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_tutorial/models/example/my_unrelated_model.sql", "build_path": "target/run/dbt_tutorial/models/example/my_unrelated_model.sql", "deferred": false, "unrendered_config": {"re_data_monitored": true, "materialized": "view"}, "created_at": 1674081661.9313533, "compiled_code": "select 99 as id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.my_unrelated_model"}, "model.dbt_tutorial.my_third_dbt_model": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_tutorial.my_second_dbt_model"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "re_data_monitored": true, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_tutorial", "example", "my_third_dbt_model"], "unique_id": "model.dbt_tutorial.my_third_dbt_model", "raw_code": "select *\nfrom {{ ref('my_second_dbt_model') }}", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "example/my_third_dbt_model.sql", "original_file_path": "models/example/my_third_dbt_model.sql", "name": "my_third_dbt_model", "alias": "my_third_dbt_model", "checksum": {"name": "sha256", "checksum": "5bc81af056055ee7892c417c3dd99e246fb798f937ed939a5badb041eae9362e"}, "tags": [], "refs": [["my_second_dbt_model"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_tutorial/models/example/my_third_dbt_model.sql", "build_path": "target/run/dbt_tutorial/models/example/my_third_dbt_model.sql", "deferred": false, "unrendered_config": {"re_data_monitored": true, "materialized": "view"}, "created_at": 1674081661.9341435, "compiled_code": "select *\nfrom DEVELOPMENT.dbt_bregenold.my_second_dbt_model", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.my_third_dbt_model"}, "model.dbt_tutorial.stg_jaffle_shop__orders": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dbt_tutorial.jaffle_shop.orders"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "re_data_monitored": true, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_tutorial", "stg", "stg_jaffle_shop__orders"], "unique_id": "model.dbt_tutorial.stg_jaffle_shop__orders", "raw_code": "with \n\nsource as (\n    select *\n    from {{ source('jaffle_shop', 'orders') }}\n),\n\nrenamed as (\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status,\n        _etl_loaded_at\n    from source\n)\n\nselect *\nfrom renamed", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "stg/stg_jaffle_shop__orders.sql", "original_file_path": "models/stg/stg_jaffle_shop__orders.sql", "name": "stg_jaffle_shop__orders", "alias": "stg_jaffle_shop__orders", "checksum": {"name": "sha256", "checksum": "427c69c38d89062de7a879db02f5a21ff6b4a8bc6a946cf0d7a9c751f37b4317"}, "tags": [], "refs": [], "sources": [["jaffle_shop", "orders"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_tutorial/models/stg/stg_jaffle_shop__orders.sql", "build_path": "target/run/dbt_tutorial/models/stg/stg_jaffle_shop__orders.sql", "deferred": false, "unrendered_config": {"re_data_monitored": true}, "created_at": 1674081661.9366298, "compiled_code": "with \n\nsource as (\n    select *\n    from development.jaffle_shop.orders\n),\n\nrenamed as (\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status,\n        _etl_loaded_at\n    from source\n)\n\nselect *\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.stg_jaffle_shop__orders"}, "model.dbt_tutorial.stg_jaffle_shop__customers": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_tutorial.get_max_processed_date"], "nodes": ["source.dbt_tutorial.jaffle_shop.customers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "re_data_monitored": true, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_tutorial", "stg", "stg_jaffle_shop__customers"], "unique_id": "model.dbt_tutorial.stg_jaffle_shop__customers", "raw_code": "{{\n    config(\n        materialized = 'table'\n    )\n}}\n\nwith \n\nsource as (\n    select *\n    from {{ source('jaffle_shop', 'customers') }}\n),\n\nrenamed as (\n    select\n        null as customer_id,\n        first_name,\n        last_name,\n        '{{ var(\"some_date\") }}'::timestamp as field\n    from source\n)\n\nselect *\nfrom renamed", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "stg/stg_jaffle_shop__customers.sql", "original_file_path": "models/stg/stg_jaffle_shop__customers.sql", "name": "stg_jaffle_shop__customers", "alias": "stg_jaffle_shop__customers", "checksum": {"name": "sha256", "checksum": "8b05e60fbf5250bf6622bcc60505e07b69cbd5e8f7d0a6f47824bbb8dfcff23d"}, "tags": [], "refs": [], "sources": [["jaffle_shop", "customers"]], "metrics": [], "description": "", "columns": {"customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_tutorial://models/stg/models.yml", "compiled_path": "target/compiled/dbt_tutorial/models/stg/stg_jaffle_shop__customers.sql", "build_path": "target/run/dbt_tutorial/models/stg/stg_jaffle_shop__customers.sql", "deferred": false, "unrendered_config": {"re_data_monitored": true, "materialized": "table"}, "created_at": 1674081662.9201965, "compiled_code": "\n\nwith \n\nsource as (\n    select *\n    from development.jaffle_shop.customers\n),\n\nrenamed as (\n    select\n        null as customer_id,\n        first_name,\n        last_name,\n        '2023-01-13 11:16:58.210000'::timestamp as field\n    from source\n)\n\nselect *\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.stg_jaffle_shop__customers"}, "model.dbt_tutorial.date_spine": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.date_spine"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "re_data_monitored": true, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_tutorial", "marts", "core", "intermediate", "date_spine"], "unique_id": "model.dbt_tutorial.date_spine", "raw_code": "{{ dbt_utils.date_spine(\n    datepart=\"hour\",\n    start_date=\"cast('2022-01-01' as timestamp_ntz)\",\n    end_date=\"cast('2024-12-31' as timestamp_ntz)\"\n   )\n}}", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "marts/core/intermediate/date_spine.sql", "original_file_path": "models/marts/core/intermediate/date_spine.sql", "name": "date_spine", "alias": "date_spine", "checksum": {"name": "sha256", "checksum": "692f2d3c6273d9185fbb41ee93abcfc0e9107bdcc62f15758020de8492f04612"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_tutorial/models/marts/core/intermediate/date_spine.sql", "build_path": "target/run/dbt_tutorial/models/marts/core/intermediate/date_spine.sql", "deferred": false, "unrendered_config": {"re_data_monitored": true}, "created_at": 1674081661.9562352, "compiled_code": "\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n     + \n    \n    p13.generated_number * power(2, 13)\n     + \n    \n    p14.generated_number * power(2, 14)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n     cross join \n    \n    p as p13\n     cross join \n    \n    p as p14\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 26280\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        hour,\n        row_number() over (order by 1) - 1,\n        cast('2022-01-01' as timestamp_ntz)\n        )\n\n\n    ) as date_hour\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_hour <= cast('2024-12-31' as timestamp_ntz)\n\n)\n\nselect * from filtered\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.date_spine"}, "model.dbt_tutorial.customer_distinct_orders": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_tutorial.stg_jaffle_shop__customers", "model.dbt_tutorial.stg_jaffle_shop__orders"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "re_data_monitored": true, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_tutorial", "marts", "core", "intermediate", "customer_distinct_orders"], "unique_id": "model.dbt_tutorial.customer_distinct_orders", "raw_code": "with\n\ncustomers as (\n    select * from {{ ref('stg_jaffle_shop__customers') }}\n),\n\norders as (\n    select * from {{ ref('stg_jaffle_shop__orders') }}\n),\n\ncustomer_order_cnt as (\n    select\n        customer_id,\n        count(distinct order_id) as order_cnt\n    from orders\n    group by\n        customer_id\n),\n\nfinal as (\n    select\n        customers.customer_id,\n        coalesce(customer_order_cnt.order_cnt, 0) as dist_order_cnt\n    from customers\n        left join customer_order_cnt on \n            customers.customer_id = customer_order_cnt.customer_id\n)\n\nselect *\nfrom final", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "marts/core/intermediate/customer_distinct_orders.sql", "original_file_path": "models/marts/core/intermediate/customer_distinct_orders.sql", "name": "customer_distinct_orders", "alias": "customer_distinct_orders", "checksum": {"name": "sha256", "checksum": "d097236eb66b4c126ee0c855770cd6d45292bcff709fcf85bc1185055dde6235"}, "tags": [], "refs": [["stg_jaffle_shop__customers"], ["stg_jaffle_shop__orders"]], "sources": [], "metrics": [], "description": "", "columns": {"customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_tutorial://models/marts/core/intermediate/intermediate.yml", "compiled_path": "target/compiled/dbt_tutorial/models/marts/core/intermediate/customer_distinct_orders.sql", "build_path": "target/run/dbt_tutorial/models/marts/core/intermediate/customer_distinct_orders.sql", "deferred": false, "unrendered_config": {"re_data_monitored": true}, "created_at": 1674081662.9252744, "compiled_code": "with\n\ncustomers as (\n    select * from DEVELOPMENT.dbt_bregenold.stg_jaffle_shop__customers\n),\n\norders as (\n    select * from DEVELOPMENT.dbt_bregenold.stg_jaffle_shop__orders\n),\n\ncustomer_order_cnt as (\n    select\n        customer_id,\n        count(distinct order_id) as order_cnt\n    from orders\n    group by\n        customer_id\n),\n\nfinal as (\n    select\n        customers.customer_id,\n        coalesce(customer_order_cnt.order_cnt, 0) as dist_order_cnt\n    from customers\n        left join customer_order_cnt on \n            customers.customer_id = customer_order_cnt.customer_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.customer_distinct_orders"}, "model.dbt_tutorial.fct_holidays": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": ["holidays", "pandas"], "docs": {"show": true, "node_color": null}, "re_data_monitored": true, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_tutorial", "marts", "core", "fct_holidays"], "unique_id": "model.dbt_tutorial.fct_holidays", "raw_code": "import holidays\nimport pandas as pd\n\n\ndef model(dbt, session):\n    dbt.config(\n        materialized=\"table\",\n        packages=[\"holidays\",\"pandas\"]\n    )\n\n    us_holidays = holidays.US()\n    calendar = pd.DataFrame(\n        pd.date_range(\n            '2024-01-01',\n            periods = 365,\n            freq = 'D'\n        ).date,\n        columns = ['DATE_FIELD']\n    )\n    calendar['IS_HOLIDAY'] = calendar['DATE_FIELD'].apply(lambda x: x in us_holidays)\n\n    return calendar", "language": "python", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "marts/core/fct_holidays.py", "original_file_path": "models/marts/core/fct_holidays.py", "name": "fct_holidays", "alias": "fct_holidays", "checksum": {"name": "sha256", "checksum": "978168d9e1245eb74b1c97f1edf127cbbaa30c69e7e8a24e49d5cc53ed53cbac"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_tutorial/models/marts/core/fct_holidays.py", "build_path": "target/run/dbt_tutorial/models/marts/core/fct_holidays.py", "deferred": false, "unrendered_config": {"re_data_monitored": true, "materialized": "table", "packages": ["holidays", "pandas"]}, "created_at": 1674081661.9841394, "compiled_code": "import holidays\nimport pandas as pd\n\n\ndef model(dbt, session):\n    dbt.config(\n        materialized=\"table\",\n        packages=[\"holidays\",\"pandas\"]\n    )\n\n    us_holidays = holidays.US()\n    calendar = pd.DataFrame(\n        pd.date_range(\n            '2024-01-01',\n            periods = 365,\n            freq = 'D'\n        ).date,\n        columns = ['DATE_FIELD']\n    )\n    calendar['IS_HOLIDAY'] = calendar['DATE_FIELD'].apply(lambda x: x in us_holidays)\n\n    return calendar\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args,dbt_load_df_function):\n    refs = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = 'DEVELOPMENT'\n    schema = 'dbt_bregenold'\n    identifier = 'fct_holidays'\n    def __repr__(self):\n        return 'DEVELOPMENT.dbt_bregenold.fct_holidays'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.fct_holidays"}, "model.dbt_tutorial.fct_fruit_orders": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": ["seed.dbt_tutorial.fruit_user_input", "seed.dbt_tutorial.fruit_prices_fact"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": ["thefuzz"], "docs": {"show": true, "node_color": null}, "re_data_monitored": true, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_tutorial", "marts", "core", "fct_fruit_orders"], "unique_id": "model.dbt_tutorial.fct_fruit_orders", "raw_code": "from thefuzz import process\n\ndef model(dbt, session):\n\n    dbt.config(\n        materialized='table',\n        packages=[\n            'thefuzz'\n        ]\n    )\n\n    fruit_input = dbt.ref('fruit_user_input').to_pandas()\n    fruit_prices = dbt.ref('fruit_prices_fact').to_pandas()\n\n    fruit_input['FRUIT_NAME'] = fruit_input['FRUIT_USER_INPUT'].apply(lambda x: process.extractOne(x, fruit_prices['FRUIT_NAME'])[0])\n\n    fruit_orders = fruit_input.merge(fruit_prices, how='left', on='FRUIT_NAME')\n    fruit_orders['ORDER_TOTAL'] = fruit_orders['QUANTITY'] * fruit_orders['COST']\n\n    return fruit_orders", "language": "python", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "marts/core/fct_fruit_orders.py", "original_file_path": "models/marts/core/fct_fruit_orders.py", "name": "fct_fruit_orders", "alias": "fct_fruit_orders", "checksum": {"name": "sha256", "checksum": "10d8467c49194eeb05796f09ebf6866e7d445f61b2ee02ccd0eb67703a377182"}, "tags": [], "refs": [["fruit_user_input"], ["fruit_prices_fact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_tutorial/models/marts/core/fct_fruit_orders.py", "build_path": "target/run/dbt_tutorial/models/marts/core/fct_fruit_orders.py", "deferred": false, "unrendered_config": {"re_data_monitored": true, "materialized": "table", "packages": ["thefuzz"]}, "created_at": 1674081661.9897702, "compiled_code": "from thefuzz import process\n\ndef model(dbt, session):\n\n    dbt.config(\n        materialized='table',\n        packages=[\n            'thefuzz'\n        ]\n    )\n\n    fruit_input = dbt.ref('fruit_user_input').to_pandas()\n    fruit_prices = dbt.ref('fruit_prices_fact').to_pandas()\n\n    fruit_input['FRUIT_NAME'] = fruit_input['FRUIT_USER_INPUT'].apply(lambda x: process.extractOne(x, fruit_prices['FRUIT_NAME'])[0])\n\n    fruit_orders = fruit_input.merge(fruit_prices, how='left', on='FRUIT_NAME')\n    fruit_orders['ORDER_TOTAL'] = fruit_orders['QUANTITY'] * fruit_orders['COST']\n\n    return fruit_orders\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args,dbt_load_df_function):\n    refs = {\"fruit_prices_fact\": \"DEVELOPMENT.dbt_bregenold.fruit_prices_fact\", \"fruit_user_input\": \"DEVELOPMENT.dbt_bregenold.fruit_user_input\"}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = 'DEVELOPMENT'\n    schema = 'dbt_bregenold'\n    identifier = 'fct_fruit_orders'\n    def __repr__(self):\n        return 'DEVELOPMENT.dbt_bregenold.fct_fruit_orders'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.fct_fruit_orders"}, "model.dbt_tutorial.test": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": ["model.dbt_tutorial.date_spine"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "re_data_monitored": true, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_tutorial", "marts", "core", "test"], "unique_id": "model.dbt_tutorial.test", "raw_code": "from snowflake.snowpark.functions import sql_expr\n\n\ndef model(dbt, session):\n    dbt.config(\n        materialized=\"table\"\n    )\n\n    # convert to pandas\n    df1 = dbt.ref('date_spine').to_pandas()\n\n    # convert back to snowpark df\n    df2 = session.create_dataframe(df1)\n\n    # cast timestamp column\n    colCast = df2.withColumn(\"DATE_HOUR\", sql_expr(\"to_timestamp(DATE_HOUR::string)\"))\n\n    return colCast", "language": "python", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "marts/core/test.py", "original_file_path": "models/marts/core/test.py", "name": "test", "alias": "test", "checksum": {"name": "sha256", "checksum": "036c1d3899ad66689dc38755f729fe8722183be92f11785ace15ab3b190cf6d1"}, "tags": [], "refs": [["date_spine"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_tutorial/models/marts/core/test.py", "build_path": "target/run/dbt_tutorial/models/marts/core/test.py", "deferred": false, "unrendered_config": {"re_data_monitored": true, "materialized": "table"}, "created_at": 1674081661.9944084, "compiled_code": "from snowflake.snowpark.functions import sql_expr\n\n\ndef model(dbt, session):\n    dbt.config(\n        materialized=\"table\"\n    )\n\n    # convert to pandas\n    df1 = dbt.ref('date_spine').to_pandas()\n\n    # convert back to snowpark df\n    df2 = session.create_dataframe(df1)\n\n    # cast timestamp column\n    colCast = df2.withColumn(\"DATE_HOUR\", sql_expr(\"to_timestamp(DATE_HOUR::string)\"))\n\n    return colCast\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args,dbt_load_df_function):\n    refs = {\"date_spine\": \"DEVELOPMENT.dbt_bregenold.date_spine\"}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = 'DEVELOPMENT'\n    schema = 'dbt_bregenold'\n    identifier = 'test'\n    def __repr__(self):\n        return 'DEVELOPMENT.dbt_bregenold.test'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.test"}, "seed.dbt_tutorial.fruit_prices_fact": {"resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_tutorial", "fruit_prices_fact"], "unique_id": "seed.dbt_tutorial.fruit_prices_fact", "raw_code": "", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "fruit_prices_fact.csv", "original_file_path": "seeds/fruit_prices_fact.csv", "name": "fruit_prices_fact", "alias": "fruit_prices_fact", "checksum": {"name": "sha256", "checksum": "27826c2dc85d65444ff8f87bda9f584e9f54c9d71046e785fba07f4205843487"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674081662.013085}, "seed.dbt_tutorial.fruit_user_input": {"resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_tutorial", "fruit_user_input"], "unique_id": "seed.dbt_tutorial.fruit_user_input", "raw_code": "", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "fruit_user_input.csv", "original_file_path": "seeds/fruit_user_input.csv", "name": "fruit_user_input", "alias": "fruit_user_input", "checksum": {"name": "sha256", "checksum": "60c7286d66f58b779a710fae6f8a8d33d1e19394ebdbf3bd953e696810be3d3b"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674081662.0151818}, "model.re_data.re_data_test_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.re_data.empty_table_generic"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re", "fqn": ["re_data", "logs", "re_data_test_history"], "unique_id": "model.re_data.re_data_test_history", "raw_code": "{{\n    config(\n        materialized='incremental',\n        on_schema_change='sync_all_columns',\n    )\n}}\n\n{{\n    re_data.empty_table_generic([\n        ('table_name', 'string'),\n        ('column_name', 'string'),\n        ('test_name', 'string'),\n        ('status', 'string'),\n        ('execution_time', 'numeric'),\n        ('message', 'string'),\n        ('failures_count', 'numeric'),\n        ('failures_json', 'long_string'),\n        ('failures_table', 'long_string'),\n        ('severity', 'string'),\n        ('compiled_sql', 'long_string'),\n        ('run_at', 'timestamp')\n    ])\n}}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "logs/re_data_test_history.sql", "original_file_path": "models/logs/re_data_test_history.sql", "name": "re_data_test_history", "alias": "re_data_test_history", "checksum": {"name": "sha256", "checksum": "e73d55ac2c224a95a19f06fc98acd14e23536048131384e4f043dfe312c86a1d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/logs/re_data_test_history.sql", "build_path": "target/run/re_data/models/logs/re_data_test_history.sql", "deferred": false, "unrendered_config": {"schema": "re", "materialized": "incremental", "on_schema_change": "sync_all_columns"}, "created_at": 1674081662.1127994, "compiled_code": "\n\n\n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as column_name,\n    \n         string_type as test_name,\n    \n         string_type as status,\n    \n         numeric_type as execution_time,\n    \n         string_type as message,\n    \n         numeric_type as failures_count,\n    \n         long_string_type as failures_json,\n    \n         long_string_type as failures_table,\n    \n         string_type as severity,\n    \n         long_string_type as compiled_sql,\n    \n         timestamp_type as run_at\n    \n    from types_table\n    where string_type is not null\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re.re_data_test_history"}, "model.re_data.re_data_run_started_at": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re_internal", "fqn": ["re_data", "internal", "re_data_run_started_at"], "unique_id": "model.re_data.re_data_run_started_at", "raw_code": "{{\n    config(\n        materialized='table',\n    )\n}}\n\nselect {{ run_started_at.timestamp() * 1000000 }} as run_started_at", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "internal/re_data_run_started_at.sql", "original_file_path": "models/internal/re_data_run_started_at.sql", "name": "re_data_run_started_at", "alias": "re_data_run_started_at", "checksum": {"name": "sha256", "checksum": "9eff211f9f07f1678f1b085deab95fc6d74bd74f79014f2f111e2eba01516421"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/internal/re_data_run_started_at.sql", "build_path": "target/run/re_data/models/internal/re_data_run_started_at.sql", "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table"}, "created_at": 1674081662.134769, "compiled_code": "\n\nselect 1674081748141554.0 as run_started_at", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re_internal.re_data_run_started_at"}, "model.re_data.re_data_last_table_samples": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.re_data.re_data_last_table_samples"], "nodes": ["model.re_data.re_data_selected", "model.re_data.re_data_monitored", "model.re_data.re_data_columns", "model.re_data.re_data_run_started_at", "model.re_data.re_data_last_table_samples_part"]}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re_internal", "fqn": ["re_data", "internal", "samples", "re_data_last_table_samples"], "unique_id": "model.re_data.re_data_last_table_samples", "raw_code": "{{ re_data_last_table_samples() }}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "internal/samples/re_data_last_table_samples.sql", "original_file_path": "models/internal/samples/re_data_last_table_samples.sql", "name": "re_data_last_table_samples", "alias": "re_data_last_table_samples", "checksum": {"name": "sha256", "checksum": "96c8497110c5bea20dbfa1ca45ad5ae61a5ec998ae86df9317b380fe282b6e6e"}, "tags": [], "refs": [["re_data_selected"], ["re_data_monitored"], ["re_data_columns"], ["re_data_run_started_at"], ["re_data_last_table_samples_part"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/internal/samples/re_data_last_table_samples.sql", "build_path": "target/run/re_data/models/internal/samples/re_data_last_table_samples.sql", "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table"}, "created_at": 1674081662.141126, "compiled_code": "\n    \n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_selected\n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_monitored\n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_columns\n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re_internal.re_data_run_started_at\n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re_internal.re_data_last_table_samples_part\n    \n\n\n\n    \n\n    \n        \n    \n    \n\n    \n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as sample_data\n    \n    from types_table\n    where string_type is not null\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re_internal.re_data_last_table_samples"}, "model.re_data.re_data_last_table_samples_part": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.re_data.empty_last_table_samples"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re_internal", "fqn": ["re_data", "internal", "samples", "re_data_last_table_samples_part"], "unique_id": "model.re_data.re_data_last_table_samples_part", "raw_code": "{{\n    config(\n        materialized='table',\n    )\n}}\n\n{{ re_data.empty_last_table_samples() }}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "internal/samples/re_data_last_table_samples_part.sql", "original_file_path": "models/internal/samples/re_data_last_table_samples_part.sql", "name": "re_data_last_table_samples_part", "alias": "re_data_last_table_samples_part", "checksum": {"name": "sha256", "checksum": "bf46e48c8777912e23efb87a79c7ee7b1c7d07bd29f56734ed6281cd3acaee87"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/internal/samples/re_data_last_table_samples_part.sql", "build_path": "target/run/re_data/models/internal/samples/re_data_last_table_samples_part.sql", "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table"}, "created_at": 1674081662.1636767, "compiled_code": "\n\n\n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as sample_data\n    \n    from types_table\n    where string_type is not null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re_internal.re_data_last_table_samples_part"}, "model.re_data.re_data_last_base_metrics_part1": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.re_data.re_data_last_base_metrics_part"], "nodes": ["model.re_data.re_data_columns"]}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re_internal", "fqn": ["re_data", "internal", "metrics", "base", "re_data_last_base_metrics_part1"], "unique_id": "model.re_data.re_data_last_base_metrics_part1", "raw_code": "{{ re_data_last_base_metrics_part() }}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "internal/metrics/base/re_data_last_base_metrics_part1.sql", "original_file_path": "models/internal/metrics/base/re_data_last_base_metrics_part1.sql", "name": "re_data_last_base_metrics_part1", "alias": "re_data_last_base_metrics_part1", "checksum": {"name": "sha256", "checksum": "3b165368a21099a738af4fa48ef0cdc5e65757334cbc7efb6401ce2fd4990f42"}, "tags": [], "refs": [["re_data_columns"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/internal/metrics/base/re_data_last_base_metrics_part1.sql", "build_path": "target/run/re_data/models/internal/metrics/base/re_data_last_base_metrics_part1.sql", "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table"}, "created_at": 1674081662.1716967, "compiled_code": "\n\n-- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_columns\n\n\n\n\n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as column_name,\n    \n         string_type as metric,\n    \n         numeric_type as value\n    \n    from types_table\n    where string_type is not null\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re_internal.re_data_last_base_metrics_part1"}, "model.re_data.re_data_last_base_metrics_thread0": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.re_data.re_data_last_base_metrics_thread"], "nodes": ["model.re_data.re_data_selected", "model.re_data.re_data_monitored", "model.re_data.re_data_columns", "model.re_data.re_data_run_started_at", "model.re_data.re_data_last_base_metrics_part0"]}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re_internal", "fqn": ["re_data", "internal", "metrics", "base", "re_data_last_base_metrics_thread0"], "unique_id": "model.re_data.re_data_last_base_metrics_thread0", "raw_code": "{{ re_data_last_base_metrics_thread(0)}}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "internal/metrics/base/re_data_last_base_metrics_thread0.sql", "original_file_path": "models/internal/metrics/base/re_data_last_base_metrics_thread0.sql", "name": "re_data_last_base_metrics_thread0", "alias": "re_data_last_base_metrics_thread0", "checksum": {"name": "sha256", "checksum": "712c8a9dbf0b14ed9ea070c13489b1966f748e4b57ccc23a75428de29a100f4c"}, "tags": [], "refs": [["re_data_selected"], ["re_data_monitored"], ["re_data_columns"], ["re_data_run_started_at"], ["re_data_last_base_metrics_part0"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/internal/metrics/base/re_data_last_base_metrics_thread0.sql", "build_path": "target/run/re_data/models/internal/metrics/base/re_data_last_base_metrics_thread0.sql", "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table"}, "created_at": 1674081662.1817544, "compiled_code": "\n    \n    \n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_selected\n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_monitored\n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_columns\n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re_internal.re_data_run_started_at\n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re_internal.re_data_last_base_metrics_part0\n    \n\n\n\n    \n\n    \n        \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n            \n\n            \n            \n\n            \n                \n                \n                \n                    \n                \n\n                \n\n                \n            \n                \n                \n                \n                    \n                \n\n                \n\n                \n            \n\n            \n    \n\n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n            \n\n            \n            \n\n            \n                \n                \n                \n                    \n                \n\n                \n\n                \n            \n\n            \n    \n\n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n\n    \n\n    \n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as column_name,\n    \n         string_type as metric,\n    \n         numeric_type as value\n    \n    from types_table\n    where string_type is not null\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re_internal.re_data_last_base_metrics_thread0"}, "model.re_data.re_data_last_base_metrics_part3": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.re_data.re_data_last_base_metrics_part"], "nodes": ["model.re_data.re_data_columns"]}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re_internal", "fqn": ["re_data", "internal", "metrics", "base", "re_data_last_base_metrics_part3"], "unique_id": "model.re_data.re_data_last_base_metrics_part3", "raw_code": "{{ re_data_last_base_metrics_part() }}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "internal/metrics/base/re_data_last_base_metrics_part3.sql", "original_file_path": "models/internal/metrics/base/re_data_last_base_metrics_part3.sql", "name": "re_data_last_base_metrics_part3", "alias": "re_data_last_base_metrics_part3", "checksum": {"name": "sha256", "checksum": "3b165368a21099a738af4fa48ef0cdc5e65757334cbc7efb6401ce2fd4990f42"}, "tags": [], "refs": [["re_data_columns"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/internal/metrics/base/re_data_last_base_metrics_part3.sql", "build_path": "target/run/re_data/models/internal/metrics/base/re_data_last_base_metrics_part3.sql", "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table"}, "created_at": 1674081662.1918359, "compiled_code": "\n\n-- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_columns\n\n\n\n\n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as column_name,\n    \n         string_type as metric,\n    \n         numeric_type as value\n    \n    from types_table\n    where string_type is not null\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re_internal.re_data_last_base_metrics_part3"}, "model.re_data.re_data_last_base_metrics_thread2": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.re_data.re_data_last_base_metrics_thread"], "nodes": ["model.re_data.re_data_selected", "model.re_data.re_data_monitored", "model.re_data.re_data_columns", "model.re_data.re_data_run_started_at", "model.re_data.re_data_last_base_metrics_part2"]}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re_internal", "fqn": ["re_data", "internal", "metrics", "base", "re_data_last_base_metrics_thread2"], "unique_id": "model.re_data.re_data_last_base_metrics_thread2", "raw_code": "{{ re_data_last_base_metrics_thread(2)}}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "internal/metrics/base/re_data_last_base_metrics_thread2.sql", "original_file_path": "models/internal/metrics/base/re_data_last_base_metrics_thread2.sql", "name": "re_data_last_base_metrics_thread2", "alias": "re_data_last_base_metrics_thread2", "checksum": {"name": "sha256", "checksum": "1ef292e43baeb737bdab647664e7e0d99cf698424f0767bad3dc9172caafd6d9"}, "tags": [], "refs": [["re_data_selected"], ["re_data_monitored"], ["re_data_columns"], ["re_data_run_started_at"], ["re_data_last_base_metrics_part2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/internal/metrics/base/re_data_last_base_metrics_thread2.sql", "build_path": "target/run/re_data/models/internal/metrics/base/re_data_last_base_metrics_thread2.sql", "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table"}, "created_at": 1674081662.1989825, "compiled_code": "\n    \n    \n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_selected\n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_monitored\n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_columns\n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re_internal.re_data_run_started_at\n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re_internal.re_data_last_base_metrics_part2\n    \n\n\n\n    \n\n    \n        \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n            \n\n            \n            \n\n            \n                \n                \n                \n                    \n                \n\n                \n\n                \n            \n\n            \n    \n\n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n            \n\n            \n            \n\n            \n                \n                \n                \n                    \n                \n\n                \n\n                \n            \n\n            \n    \n\n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n            \n\n            \n            \n\n            \n                \n                \n                \n                    \n                \n\n                \n\n                \n            \n                \n                \n                \n                    \n                \n\n                \n\n                \n            \n                \n                \n                \n                    \n                \n\n                \n\n                \n            \n                \n                \n                \n                    \n                \n\n                \n\n                \n            \n                \n                \n                \n                    \n                \n\n                \n\n                \n            \n\n            \n    \n\n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n\n    \n\n    \n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as column_name,\n    \n         string_type as metric,\n    \n         numeric_type as value\n    \n    from types_table\n    where string_type is not null\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re_internal.re_data_last_base_metrics_thread2"}, "model.re_data.re_data_last_base_metrics_part2": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.re_data.re_data_last_base_metrics_part"], "nodes": ["model.re_data.re_data_columns"]}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re_internal", "fqn": ["re_data", "internal", "metrics", "base", "re_data_last_base_metrics_part2"], "unique_id": "model.re_data.re_data_last_base_metrics_part2", "raw_code": "{{ re_data_last_base_metrics_part() }}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "internal/metrics/base/re_data_last_base_metrics_part2.sql", "original_file_path": "models/internal/metrics/base/re_data_last_base_metrics_part2.sql", "name": "re_data_last_base_metrics_part2", "alias": "re_data_last_base_metrics_part2", "checksum": {"name": "sha256", "checksum": "3b165368a21099a738af4fa48ef0cdc5e65757334cbc7efb6401ce2fd4990f42"}, "tags": [], "refs": [["re_data_columns"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/internal/metrics/base/re_data_last_base_metrics_part2.sql", "build_path": "target/run/re_data/models/internal/metrics/base/re_data_last_base_metrics_part2.sql", "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table"}, "created_at": 1674081662.207524, "compiled_code": "\n\n-- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_columns\n\n\n\n\n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as column_name,\n    \n         string_type as metric,\n    \n         numeric_type as value\n    \n    from types_table\n    where string_type is not null\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re_internal.re_data_last_base_metrics_part2"}, "model.re_data.re_data_last_base_metrics_thread1": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.re_data.re_data_last_base_metrics_thread"], "nodes": ["model.re_data.re_data_selected", "model.re_data.re_data_monitored", "model.re_data.re_data_columns", "model.re_data.re_data_run_started_at", "model.re_data.re_data_last_base_metrics_part1"]}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re_internal", "fqn": ["re_data", "internal", "metrics", "base", "re_data_last_base_metrics_thread1"], "unique_id": "model.re_data.re_data_last_base_metrics_thread1", "raw_code": "{{ re_data_last_base_metrics_thread(1)}}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "internal/metrics/base/re_data_last_base_metrics_thread1.sql", "original_file_path": "models/internal/metrics/base/re_data_last_base_metrics_thread1.sql", "name": "re_data_last_base_metrics_thread1", "alias": "re_data_last_base_metrics_thread1", "checksum": {"name": "sha256", "checksum": "9d31906e3cef0a10ade87631d4b46f7a3ff8d83c6e240335d2adf6a0eace88fb"}, "tags": [], "refs": [["re_data_selected"], ["re_data_monitored"], ["re_data_columns"], ["re_data_run_started_at"], ["re_data_last_base_metrics_part1"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/internal/metrics/base/re_data_last_base_metrics_thread1.sql", "build_path": "target/run/re_data/models/internal/metrics/base/re_data_last_base_metrics_thread1.sql", "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table"}, "created_at": 1674081662.2145767, "compiled_code": "\n    \n    \n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_selected\n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_monitored\n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_columns\n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re_internal.re_data_run_started_at\n    \n        -- depends_on: DEVELOPMENT.dbt_bregenold_re_internal.re_data_last_base_metrics_part1\n    \n\n\n\n    \n\n    \n        \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n            \n\n            \n            \n\n            \n                \n                \n                \n                    \n                \n\n                \n\n                \n            \n                \n                \n                \n                    \n                \n\n                \n\n                \n            \n\n            \n    \n\n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n            \n\n            \n            \n\n            \n                \n                \n                \n                    \n                \n\n                \n\n                \n            \n\n            \n    \n\n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n            \n\n            \n            \n\n            \n                \n                \n                \n                    \n                \n\n                \n\n                \n            \n                \n                \n                \n                    \n                \n\n                \n\n                \n            \n                \n                \n                \n                    \n                \n\n                \n\n                \n            \n                \n                \n                \n                    \n                \n\n                \n\n                \n            \n\n            \n    \n\n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n        -- we are splitting computing metrics to 4 different threads\n        \n        \n    \n\n    \n\n    \n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as column_name,\n    \n         string_type as metric,\n    \n         numeric_type as value\n    \n    from types_table\n    where string_type is not null\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re_internal.re_data_last_base_metrics_thread1"}, "model.re_data.re_data_last_base_metrics_thread3": {"resource_type": "model", "depends_on": {"macros": ["macro.re_data.re_data_last_base_metrics_thread"], "nodes": ["model.re_data.re_data_selected", "model.re_data.re_data_monitored", "model.re_data.re_data_columns", "model.re_data.re_data_run_started_at", "model.re_data.re_data_last_base_metrics_part3"]}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re_internal", "fqn": ["re_data", "internal", "metrics", "base", "re_data_last_base_metrics_thread3"], "unique_id": "model.re_data.re_data_last_base_metrics_thread3", "raw_code": "{{ re_data_last_base_metrics_thread(3)}}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "internal/metrics/base/re_data_last_base_metrics_thread3.sql", "original_file_path": "models/internal/metrics/base/re_data_last_base_metrics_thread3.sql", "name": "re_data_last_base_metrics_thread3", "alias": "re_data_last_base_metrics_thread3", "checksum": {"name": "sha256", "checksum": "260166d3d7120fdda5b8c28c2a6de356155cc7aad7058cd8e90b31ad0d5b2762"}, "tags": [], "refs": [["re_data_selected"], ["re_data_monitored"], ["re_data_columns"], ["re_data_run_started_at"], ["re_data_last_base_metrics_part3"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table"}, "created_at": 1674081662.2219658}, "model.re_data.re_data_last_base_metrics_part0": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.re_data.re_data_last_base_metrics_part"], "nodes": ["model.re_data.re_data_columns"]}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re_internal", "fqn": ["re_data", "internal", "metrics", "base", "re_data_last_base_metrics_part0"], "unique_id": "model.re_data.re_data_last_base_metrics_part0", "raw_code": "{{ re_data_last_base_metrics_part() }}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "internal/metrics/base/re_data_last_base_metrics_part0.sql", "original_file_path": "models/internal/metrics/base/re_data_last_base_metrics_part0.sql", "name": "re_data_last_base_metrics_part0", "alias": "re_data_last_base_metrics_part0", "checksum": {"name": "sha256", "checksum": "3b165368a21099a738af4fa48ef0cdc5e65757334cbc7efb6401ce2fd4990f42"}, "tags": [], "refs": [["re_data_columns"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/internal/metrics/base/re_data_last_base_metrics_part0.sql", "build_path": "target/run/re_data/models/internal/metrics/base/re_data_last_base_metrics_part0.sql", "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table"}, "created_at": 1674081662.2303069, "compiled_code": "\n\n-- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_columns\n\n\n\n\n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as column_name,\n    \n         string_type as metric,\n    \n         numeric_type as value\n    \n    from types_table\n    where string_type is not null\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re_internal.re_data_last_base_metrics_part0"}, "model.re_data.re_data_alerts": {"resource_type": "model", "depends_on": {"macros": ["macro.re_data.clean_blacklist", "macro.re_data.generate_schema_change_message", "macro.re_data.generate_failed_test_message"], "nodes": ["model.re_data.re_data_anomalies", "model.re_data.re_data_schema_changes", "model.re_data.re_data_test_history"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re", "fqn": ["re_data", "alerts", "re_data_alerts"], "unique_id": "model.re_data.re_data_alerts", "raw_code": "select\n    'anomaly' as type,\n    {{ re_data.clean_blacklist('table_name', ['\"', '`'], '') }} as model,\n    message,\n    last_value_text as value,\n    time_window_end\nfrom\n    {{ ref('re_data_anomalies') }}\nunion all\n\nselect\n    'schema_change' as type,\n    {{ re_data.clean_blacklist('table_name', ['\"', '`'], '') }} as model,\n    {{ generate_schema_change_message('operation', 'column_name', 'prev_column_name', 'prev_data_type', 'data_type', 'detected_time') }} as message,\n    '' as value,\n    detected_time as time_window_end\nfrom {{ ref('re_data_schema_changes') }}\n\nunion all\n\nselect\n    'test' as type,\n    table_name as model,\n    {{ generate_failed_test_message('test_name', 'column_name') }},\n    status as value,\n    run_at as time_window_end\n\nfrom {{ ref('re_data_test_history') }}\nwhere status = 'Fail' or status = 'Error'", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "alerts/re_data_alerts.sql", "original_file_path": "models/alerts/re_data_alerts.sql", "name": "re_data_alerts", "alias": "re_data_alerts", "checksum": {"name": "sha256", "checksum": "16f169160f635e8d919d7707991a9341a9df664b2021e0124ca93ef75495287e"}, "tags": [], "refs": [["re_data_anomalies"], ["re_data_schema_changes"], ["re_data_test_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re"}, "created_at": 1674081662.2375796}, "model.re_data.re_data_test_runs": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.re_data.re_data_test_history"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re", "fqn": ["re_data", "alerts", "re_data_test_runs"], "unique_id": "model.re_data.re_data_test_runs", "raw_code": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nselect \n    sum(case when status = 'Fail' then 1 else 0 end) as failed,\n    sum(case when status = 'Pass' then 1 else 0 end) as passed,\n    run_at\nfrom {{ ref ('re_data_test_history') }}\ngroup by run_at\norder by run_at desc", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "alerts/re_data_test_runs.sql", "original_file_path": "models/alerts/re_data_test_runs.sql", "name": "re_data_test_runs", "alias": "re_data_test_runs", "checksum": {"name": "sha256", "checksum": "9d0e3fd6a05b5b18dc9da7471a34871402b68acc230f69a771b2c351ec16f6e1"}, "tags": [], "refs": [["re_data_test_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/alerts/re_data_test_runs.sql", "build_path": "target/run/re_data/models/alerts/re_data_test_runs.sql", "deferred": false, "unrendered_config": {"schema": "re", "materialized": "view"}, "created_at": 1674081662.25405, "compiled_code": "\n\nselect \n    sum(case when status = 'Fail' then 1 else 0 end) as failed,\n    sum(case when status = 'Pass' then 1 else 0 end) as passed,\n    run_at\nfrom DEVELOPMENT.dbt_bregenold_re.re_data_test_history\ngroup by run_at\norder by run_at desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re.re_data_test_runs"}, "model.re_data.re_data_z_score": {"resource_type": "model", "depends_on": {"macros": ["macro.re_data.time_window_end", "macro.dbt_utils.current_timestamp_in_utc", "macro.re_data.timestamp_type", "macro.dbt_utils.surrogate_key", "macro.re_data.string_type"], "nodes": ["model.re_data.re_data_last_stats", "model.re_data.re_data_last_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re", "fqn": ["re_data", "alerts", "re_data_z_score"], "unique_id": "model.re_data.re_data_z_score", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key = 'id',\n        on_schema_change='sync_all_columns',\n    )\n}}\n\nwith z_score_without_id as (\n\n    select\n        stats.table_name as table_name,\n        stats.column_name as column_name,\n        stats.metric as metric,\n        stats.interval_length_sec,\n        (last_metric.last_value - stats.last_avg) / (stats.last_stddev + 0.0000000001) as z_score_value,\n        case\n            when stats.last_median_absolute_deviation = 0 then\n                (last_metric.last_value - stats.last_median) / (1.253314 * (stats.last_mean_absolute_deviation + 0.0000000001))\n            else\n                (0.6745 * (last_metric.last_value - stats.last_median)) / (stats.last_median_absolute_deviation + 0.0000000001) \n        end as modified_z_score_value,\n        last_metric.last_value as last_value,\n        stats.last_avg as last_avg,\n        stats.last_median as last_median,\n        stats.last_stddev as last_stddev,\n        stats.last_median_absolute_deviation,\n        stats.last_mean_absolute_deviation,\n        stats.last_third_quartile - stats.last_first_quartile as last_iqr,\n        stats.last_first_quartile,\n        stats.last_third_quartile,\n        {{ time_window_end() }} as time_window_end,\n        cast( {{dbt_utils.current_timestamp_in_utc()}} as {{ timestamp_type() }} ) as computed_on\n    from\n        {{ ref('re_data_last_stats') }} as stats,\n        {{ ref('re_data_last_metrics') }} as last_metric\n    where\n        stats.table_name = last_metric.table_name and\n        stats.column_name = last_metric.column_name and\n        stats.metric = last_metric.metric and\n        (\n            stats.interval_length_sec = last_metric.interval_length_sec or\n            (stats.interval_length_sec is null and last_metric.interval_length_sec is null)\n        ) and\n        last_metric.last_value is not null and\n        stats.last_avg is not null and\n        stats.last_stddev is not null\n    )\n\nselect\n    cast ({{ dbt_utils.surrogate_key([\n      'table_name',\n      'column_name',\n      'metric',\n      'interval_length_sec',\n      'time_window_end'\n    ]) }} as {{ string_type() }} ) as id,\n    table_name,\n    column_name,\n    metric,\n    z_score_value,\n    modified_z_score_value,\n    last_value,\n    last_avg,\n    last_median,\n    last_stddev,\n    last_median_absolute_deviation,\n    last_mean_absolute_deviation,\n    last_iqr,\n    last_first_quartile,\n    last_third_quartile,\n    time_window_end,\n    interval_length_sec,\n    computed_on\n\nfrom z_score_without_id", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "alerts/re_data_z_score.sql", "original_file_path": "models/alerts/re_data_z_score.sql", "name": "re_data_z_score", "alias": "re_data_z_score", "checksum": {"name": "sha256", "checksum": "77745327261d3029ba43bfa78ba9bc8760774627deffcad0d8ef9bdcbcb344c4"}, "tags": [], "refs": [["re_data_last_stats"], ["re_data_last_metrics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re", "materialized": "incremental", "unique_key": "id", "on_schema_change": "sync_all_columns"}, "created_at": 1674081662.256875}, "model.re_data.re_data_schema_changes": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.re_data.empty_table_generic", "macro.re_data.in_compile", "macro.dbt.run_query", "macro.re_data.timestamp_type", "macro.re_data.full_table_name", "macro.dbt_utils.current_timestamp_in_utc", "macro.dbt_utils.surrogate_key", "macro.re_data.string_type"], "nodes": ["model.re_data.re_data_run_started_at", "model.re_data.re_data_columns_over_time", "model.re_data.re_data_monitored", "model.re_data.re_data_selected"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re", "fqn": ["re_data", "alerts", "re_data_schema_changes"], "unique_id": "model.re_data.re_data_schema_changes", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key = 'id',\n        on_schema_change='sync_all_columns',\n    )\n}}\n\n-- depends_on: {{ ref('re_data_run_started_at') }}\n-- depends_on: {{ ref('re_data_columns_over_time') }}\n-- depends_on: {{ ref('re_data_monitored') }}\n-- depends_on: {{ ref('re_data_selected') }}\n\n{% if execute and not re_data.in_compile() %}\n    {% set last_data_points %} \n        select\n            distinct detected_time\n        from {{ ref('re_data_columns_over_time') }}\n        order by\n        detected_time desc limit 2;\n    {% endset %}\n\n    {% set detected_times = run_query(last_data_points) %}\n\n    {% set times_list = detected_times.columns[0].values() %}\n    {% set most_recent_time = times_list[0] %}\n\n    {% if times_list | length > 1 %}\n        {% set prev_most_recent = times_list[1] %}\n    {% else %}\n        {% set prev_most_recent = times_list[0] %}\n    {% endif %}\n{% else %}\n    {% set times_list = () %}\n{% endif %}\n\n{% if times_list == () %}\n    {{\n        re_data.empty_table_generic([\n            ('id', 'string'),\n            ('table_name', 'string'),\n            ('operation', 'string'),\n            ('column_name', 'string'),\n            ('data_type', 'string'),\n            ('is_nullable', 'boolean'),\n            ('prev_column_name', 'string'),\n            ('prev_data_type', 'string'),\n            ('prev_is_nullable', 'boolean'),\n            ('detected_time', 'timestamp')\n            ])\n    }}\n{% else %}\n\n    with curr_monitored_schema as (\n        select * from {{ ref('re_data_columns_over_time')}}\n        where detected_time = cast('{{ most_recent_time }}' as {{ timestamp_type() }})\n        and table_name in (\n            select {{ full_table_name('name', 'schema', 'database') }} from {{ ref('re_data_selected')}}\n        )\n    ),\n\n\n    prev_monitored_schema as (\n        select * from {{ ref('re_data_columns_over_time')}}\n        where detected_time = cast('{{ prev_most_recent}}' as {{ timestamp_type() }})\n        and table_name in (\n            select {{ full_table_name('name', 'schema', 'database') }} from {{ ref('re_data_selected')}}\n        )\n    ),\n\n    all_changes as (\n            (\n            select\n                curr.table_name as table_name,\n                'type_change' as operation,\n                curr.column_name as column_name,\n                curr.data_type as data_type,\n                curr.is_nullable as is_nullable,\n\n                prev.column_name as prev_column_name,\n                prev.data_type as prev_data_type,\n                prev.is_nullable as prev_is_nullable\n            \n            from curr_monitored_schema curr inner join prev_monitored_schema prev on (curr.table_name = prev.table_name and curr.column_name = prev.column_name)\n            where\n                curr.data_type != prev.data_type or \n                curr.is_nullable != prev.is_nullable\n            )\n\n        union all\n\n        (\n\n            select\n                curr.table_name as table_name,\n                'column_added' as operation,\n                curr.column_name as column_name,\n                curr.data_type as data_type,\n                curr.is_nullable as is_nullable,\n\n                null as prev_column_name,\n                null as prev_data_type,\n                null as prev_is_nullable\n            \n            from curr_monitored_schema curr left join prev_monitored_schema prev on (curr.table_name = prev.table_name and curr.column_name = prev.column_name)\n            where prev.table_name is null and prev.column_name is null\n            {# note: when a column is added, make sure we only detect for models that were previously monitored,\n            this avoids a situation where a newly monitored model has all its columns detected with 'column_added' operation#}\n            and curr.table_name in (\n                select table_name from prev_monitored_schema\n            )\n        \n        )\n\n        union all\n\n        (\n\n            select\n                prev.table_name as table_name,\n                'column_removed' as operation,\n                null as column_name,\n                null as data_type,\n                null as is_nullable,\n\n                prev.column_name as prev_column_name,\n                prev.data_type as prev_data_type,\n                prev.is_nullable as prev_is_nullable\n            \n            from prev_monitored_schema prev left join curr_monitored_schema curr on (curr.table_name = prev.table_name and curr.column_name = prev.column_name)\n            where curr.table_name is null and curr.column_name is null\n\n        )\n    ),\n\n    all_with_time as (\n        select\n            all_changes.table_name,\n            all_changes.operation,\n            all_changes.column_name,\n            all_changes.data_type,\n            all_changes.is_nullable,\n            all_changes.prev_column_name,\n            all_changes.prev_data_type,\n            all_changes.prev_is_nullable,\n            cast({{dbt_utils.current_timestamp_in_utc()}} as {{ timestamp_type() }}) as detected_time\n        from all_changes\n    )\n\n    select \n        cast ({{ dbt_utils.surrogate_key([\n        'table_name',\n        'column_name',\n        'detected_time'\n        ]) }} as {{ string_type() }} ) as id,\n        table_name,\n        cast (operation as {{ string_type() }}) as operation,\n        column_name,\n        data_type,\n        is_nullable,\n        prev_column_name,\n        prev_data_type,\n        prev_is_nullable,\n        detected_time\n    from all_with_time\n    \n{% endif %}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "alerts/re_data_schema_changes.sql", "original_file_path": "models/alerts/re_data_schema_changes.sql", "name": "re_data_schema_changes", "alias": "re_data_schema_changes", "checksum": {"name": "sha256", "checksum": "512090ea7f7f9d00e7dd3ab6d249fbead654fdad29b774a802a2d51ed75b006c"}, "tags": [], "refs": [["re_data_run_started_at"], ["re_data_columns_over_time"], ["re_data_monitored"], ["re_data_selected"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/alerts/re_data_schema_changes.sql", "build_path": "target/run/re_data/models/alerts/re_data_schema_changes.sql", "deferred": false, "unrendered_config": {"schema": "re", "materialized": "incremental", "unique_key": "id", "on_schema_change": "sync_all_columns"}, "created_at": 1674081662.2900007, "compiled_code": "\n\n-- depends_on: DEVELOPMENT.dbt_bregenold_re_internal.re_data_run_started_at\n-- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_columns_over_time\n-- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_monitored\n-- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_selected\n\n\n    \n\n    \n\n    \n    \n\n    \n        \n    \n\n\n\n\n    with curr_monitored_schema as (\n        select * from DEVELOPMENT.dbt_bregenold_re.re_data_columns_over_time\n        where detected_time = cast('2023-01-18 22:43:19.905000' as \n    \n    TIMESTAMP_NTZ\n\n)\n        and table_name in (\n            select \n    \n    '\"' || database || '\"' || '.' || '\"' || schema || '\"' || '.' || '\"' || name || '\"'\n\n from DEVELOPMENT.dbt_bregenold_re.re_data_selected\n        )\n    ),\n\n\n    prev_monitored_schema as (\n        select * from DEVELOPMENT.dbt_bregenold_re.re_data_columns_over_time\n        where detected_time = cast('2022-12-22 16:01:02.307000' as \n    \n    TIMESTAMP_NTZ\n\n)\n        and table_name in (\n            select \n    \n    '\"' || database || '\"' || '.' || '\"' || schema || '\"' || '.' || '\"' || name || '\"'\n\n from DEVELOPMENT.dbt_bregenold_re.re_data_selected\n        )\n    ),\n\n    all_changes as (\n            (\n            select\n                curr.table_name as table_name,\n                'type_change' as operation,\n                curr.column_name as column_name,\n                curr.data_type as data_type,\n                curr.is_nullable as is_nullable,\n\n                prev.column_name as prev_column_name,\n                prev.data_type as prev_data_type,\n                prev.is_nullable as prev_is_nullable\n            \n            from curr_monitored_schema curr inner join prev_monitored_schema prev on (curr.table_name = prev.table_name and curr.column_name = prev.column_name)\n            where\n                curr.data_type != prev.data_type or \n                curr.is_nullable != prev.is_nullable\n            )\n\n        union all\n\n        (\n\n            select\n                curr.table_name as table_name,\n                'column_added' as operation,\n                curr.column_name as column_name,\n                curr.data_type as data_type,\n                curr.is_nullable as is_nullable,\n\n                null as prev_column_name,\n                null as prev_data_type,\n                null as prev_is_nullable\n            \n            from curr_monitored_schema curr left join prev_monitored_schema prev on (curr.table_name = prev.table_name and curr.column_name = prev.column_name)\n            where prev.table_name is null and prev.column_name is null\n            \n            and curr.table_name in (\n                select table_name from prev_monitored_schema\n            )\n        \n        )\n\n        union all\n\n        (\n\n            select\n                prev.table_name as table_name,\n                'column_removed' as operation,\n                null as column_name,\n                null as data_type,\n                null as is_nullable,\n\n                prev.column_name as prev_column_name,\n                prev.data_type as prev_data_type,\n                prev.is_nullable as prev_is_nullable\n            \n            from prev_monitored_schema prev left join curr_monitored_schema curr on (curr.table_name = prev.table_name and curr.column_name = prev.column_name)\n            where curr.table_name is null and curr.column_name is null\n\n        )\n    ),\n\n    all_with_time as (\n        select\n            all_changes.table_name,\n            all_changes.operation,\n            all_changes.column_name,\n            all_changes.data_type,\n            all_changes.is_nullable,\n            all_changes.prev_column_name,\n            all_changes.prev_data_type,\n            all_changes.prev_is_nullable,\n            cast(\n    convert_timezone('UTC', \n    current_timestamp::\n    timestamp_ntz\n\n)::\n    timestamp_ntz\n\n as \n    \n    TIMESTAMP_NTZ\n\n) as detected_time\n        from all_changes\n    )\n\n    select \n        cast (md5(cast(coalesce(cast(table_name as \n    varchar\n), '') || '-' || coalesce(cast(column_name as \n    varchar\n), '') || '-' || coalesce(cast(detected_time as \n    varchar\n), '') as \n    varchar\n)) as \n    \n    STRING\n\n ) as id,\n        table_name,\n        cast (operation as \n    \n    STRING\n\n) as operation,\n        column_name,\n        data_type,\n        is_nullable,\n        prev_column_name,\n        prev_data_type,\n        prev_is_nullable,\n        detected_time\n    from all_with_time\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re.re_data_schema_changes"}, "model.re_data.re_data_anomalies": {"resource_type": "model", "depends_on": {"macros": ["macro.re_data.json_extract", "macro.re_data.numeric_type", "macro.re_data.generate_anomaly_message", "macro.re_data.generate_metric_value_text", "macro.re_data.split_and_return_nth_value"], "nodes": ["model.re_data.re_data_z_score", "model.re_data.re_data_selected"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re", "fqn": ["re_data", "alerts", "re_data_anomalies"], "unique_id": "model.re_data.re_data_anomalies", "raw_code": "{{\n    config(\n        materialized='view'\n    )\n}}\nselect\n    z.id,\n    z.table_name,\n    z.column_name,\n    z.metric,\n    z.z_score_value,\n    z.modified_z_score_value,\n    m.anomaly_detector,\n    z.last_value,\n    z.last_avg,\n    z.last_median,\n    z.last_stddev,\n    z.last_median_absolute_deviation,\n    z.last_mean_absolute_deviation,\n    z.last_iqr,\n    z.last_first_quartile - (cast( {{ json_extract('m.anomaly_detector', 'whisker_boundary_multiplier') }} as {{numeric_type()}} ) * z.last_iqr) lower_bound,\n    z.last_third_quartile + (cast( {{ json_extract('m.anomaly_detector', 'whisker_boundary_multiplier') }} as {{numeric_type()}} ) * z.last_iqr) upper_bound,\n    z.last_first_quartile,\n    z.last_third_quartile,\n    z.time_window_end,\n    z.interval_length_sec,\n    z.computed_on,\n    {{ re_data.generate_anomaly_message('z.column_name', 'z.metric', 'z.last_value', 'z.last_avg') }} as message,\n    {{ re_data.generate_metric_value_text('z.metric', 'z.last_value') }} as last_value_text\nfrom\n    {{ ref('re_data_z_score')}} z \nleft join {{ ref('re_data_selected') }} m \non {{ split_and_return_nth_value('table_name', '.', 1) }} = m.database\nand {{ split_and_return_nth_value('table_name', '.', 2) }} = m.schema\nand {{ split_and_return_nth_value('table_name', '.', 3) }} = m.name\nwhere\n    case \n        when {{ json_extract('m.anomaly_detector', 'name') }} = 'z_score' \n            then abs(z_score_value) > cast({{ json_extract('m.anomaly_detector', 'threshold') }} as {{ numeric_type() }})\n        when {{ json_extract('m.anomaly_detector', 'name') }} = 'modified_z_score' \n            then abs(modified_z_score_value) > cast( {{ json_extract('m.anomaly_detector', 'threshold') }} as {{numeric_type()}} )\n        when {{ json_extract('m.anomaly_detector', 'name') }} = 'boxplot' \n            then (\n                z.last_value < z.last_first_quartile - (cast( {{ json_extract('m.anomaly_detector', 'whisker_boundary_multiplier') }} as {{numeric_type()}} ) * z.last_iqr)\n                or \n                z.last_value > z.last_third_quartile + (cast( {{ json_extract('m.anomaly_detector', 'whisker_boundary_multiplier') }} as {{numeric_type()}} ) * z.last_iqr)\n            )\n        else false\n    end", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "alerts/re_data_anomalies.sql", "original_file_path": "models/alerts/re_data_anomalies.sql", "name": "re_data_anomalies", "alias": "re_data_anomalies", "checksum": {"name": "sha256", "checksum": "4ed1250b6c7c2a82e8b1014823e73cf9d710e99ac36f86c649b88057d425b672"}, "tags": [], "refs": [["re_data_z_score"], ["re_data_selected"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re", "materialized": "view"}, "created_at": 1674081662.3067527}, "model.re_data.re_data_metrics": {"resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.re_data.re_data_base_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re", "fqn": ["re_data", "metrics", "final", "re_data_metrics"], "unique_id": "model.re_data.re_data_metrics", "raw_code": "select * from {{ ref('re_data_base_metrics') }}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "metrics/final/re_data_metrics.sql", "original_file_path": "models/metrics/final/re_data_metrics.sql", "name": "re_data_metrics", "alias": "re_data_metrics", "checksum": {"name": "sha256", "checksum": "035c9fce751ff39b423bed0790f8e00d8de07dfdb32b4c4d0e3cc3996728e8f4"}, "tags": [], "refs": [["re_data_base_metrics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re"}, "created_at": 1674081662.3403182}, "model.re_data.re_data_columns_over_time": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.re_data.full_table_name", "macro.dbt_utils.current_timestamp_in_utc", "macro.re_data.timestamp_type", "macro.dbt_utils.surrogate_key", "macro.re_data.string_type"], "nodes": ["model.re_data.re_data_columns", "model.re_data.re_data_selected"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re", "fqn": ["re_data", "metrics", "types", "schema", "re_data_columns_over_time"], "unique_id": "model.re_data.re_data_columns_over_time", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key = 'id',\n        on_schema_change='sync_all_columns',\n    )\n}}\n\n\nwith columns as (\n\nselect\n    {{ full_table_name('cols.name', 'cols.schema', 'cols.database') }} as table_name,\n    cols.column_name,\n    cols.data_type,\n    cols.is_nullable,\n    cast ({{dbt_utils.current_timestamp_in_utc()}} as {{ timestamp_type() }} ) as detected_time\nfrom\n    {{ ref('re_data_columns')}} cols, {{ ref('re_data_selected')}} tables\nwhere\n    cols.name = tables.name and cols.schema = tables.schema and cols.database = tables.database\n)\n\nselect\n    cast ({{ dbt_utils.surrogate_key([\n      'table_name',\n      'column_name',\n      'detected_time'\n    ]) }} as {{ string_type() }} ) as id,\n    table_name,\n    column_name,\n    data_type,\n    is_nullable,\n    detected_time\nfrom columns", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "metrics/types/schema/re_data_columns_over_time.sql", "original_file_path": "models/metrics/types/schema/re_data_columns_over_time.sql", "name": "re_data_columns_over_time", "alias": "re_data_columns_over_time", "checksum": {"name": "sha256", "checksum": "04acabd70a73daa085e37b6adb351c4503aef6c79f54e0743cc9d5bdd2733c87"}, "tags": [], "refs": [["re_data_columns"], ["re_data_selected"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/metrics/types/schema/re_data_columns_over_time.sql", "build_path": "target/run/re_data/models/metrics/types/schema/re_data_columns_over_time.sql", "deferred": false, "unrendered_config": {"schema": "re", "materialized": "incremental", "unique_key": "id", "on_schema_change": "sync_all_columns"}, "created_at": 1674081662.3429153, "compiled_code": "\n\n\nwith columns as (\n\nselect\n    \n    \n    '\"' || cols.database || '\"' || '.' || '\"' || cols.schema || '\"' || '.' || '\"' || cols.name || '\"'\n\n as table_name,\n    cols.column_name,\n    cols.data_type,\n    cols.is_nullable,\n    cast (\n    convert_timezone('UTC', \n    current_timestamp::\n    timestamp_ntz\n\n)::\n    timestamp_ntz\n\n as \n    \n    TIMESTAMP_NTZ\n\n ) as detected_time\nfrom\n    DEVELOPMENT.dbt_bregenold_re.re_data_columns cols, DEVELOPMENT.dbt_bregenold_re.re_data_selected tables\nwhere\n    cols.name = tables.name and cols.schema = tables.schema and cols.database = tables.database\n)\n\nselect\n    cast (md5(cast(coalesce(cast(table_name as \n    varchar\n), '') || '-' || coalesce(cast(column_name as \n    varchar\n), '') || '-' || coalesce(cast(detected_time as \n    varchar\n), '') as \n    varchar\n)) as \n    \n    STRING\n\n ) as id,\n    table_name,\n    column_name,\n    data_type,\n    is_nullable,\n    detected_time\nfrom columns", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re.re_data_columns_over_time"}, "model.re_data.re_data_table_samples": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp_in_utc", "macro.re_data.timestamp_type"], "nodes": ["model.re_data.re_data_last_table_samples", "model.re_data.re_data_last_table_samples_part", "model.re_data.re_data_last_table_samples_part"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "table_name", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re", "fqn": ["re_data", "metrics", "types", "samples", "re_data_table_samples"], "unique_id": "model.re_data.re_data_table_samples", "raw_code": "{{\n    config(\n        materialized='table',\n        unique_key = 'table_name',\n        on_schema_change='sync_all_columns',\n    )\n}}\n\n-- depends_on: {{ ref('re_data_last_table_samples') }}\n-- depends_on: {{ ref('re_data_last_table_samples_part') }}\n\nselect\n    table_name,\n    sample_data,\n    cast ({{- dbt_utils.current_timestamp_in_utc() -}} as {{ timestamp_type() }}) as sampled_on\n\nfrom {{ ref('re_data_last_table_samples_part') }}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "metrics/types/samples/re_data_table_samples.sql", "original_file_path": "models/metrics/types/samples/re_data_table_samples.sql", "name": "re_data_table_samples", "alias": "re_data_table_samples", "checksum": {"name": "sha256", "checksum": "d89989e8569fa002bf39787a588faf370e7baee6b2fc524c0dc972542e0308ea"}, "tags": [], "refs": [["re_data_last_table_samples"], ["re_data_last_table_samples_part"], ["re_data_last_table_samples_part"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/metrics/types/samples/re_data_table_samples.sql", "build_path": "target/run/re_data/models/metrics/types/samples/re_data_table_samples.sql", "deferred": false, "unrendered_config": {"schema": "re", "materialized": "table", "unique_key": "table_name", "on_schema_change": "sync_all_columns"}, "created_at": 1674081662.3569489, "compiled_code": "\n\n-- depends_on: DEVELOPMENT.dbt_bregenold_re_internal.re_data_last_table_samples\n-- depends_on: DEVELOPMENT.dbt_bregenold_re_internal.re_data_last_table_samples_part\n\nselect\n    table_name,\n    sample_data,\n    cast (\n    convert_timezone('UTC', \n    current_timestamp::\n    timestamp_ntz\n\n)::\n    timestamp_ntz\n\nas \n    \n    TIMESTAMP_NTZ\n\n) as sampled_on\n\nfrom DEVELOPMENT.dbt_bregenold_re_internal.re_data_last_table_samples_part", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re.re_data_table_samples"}, "model.re_data.re_data_base_metrics": {"resource_type": "model", "depends_on": {"macros": ["macro.re_data.time_window_start", "macro.re_data.time_window_end", "macro.dbt_utils.surrogate_key", "macro.re_data.string_type", "macro.re_data.numeric_type", "macro.re_data.timestamp_type", "macro.re_data.interval_length_sec", "macro.re_data.integer_type", "macro.dbt_utils.current_timestamp_in_utc"], "nodes": ["model.re_data.re_data_columns", "model.re_data.re_data_last_base_metrics_thread0", "model.re_data.re_data_last_base_metrics_thread1", "model.re_data.re_data_last_base_metrics_thread2", "model.re_data.re_data_last_base_metrics_thread3", "model.re_data.re_data_last_base_metrics_part0", "model.re_data.re_data_last_base_metrics_part1", "model.re_data.re_data_last_base_metrics_part2", "model.re_data.re_data_last_base_metrics_part3", "model.re_data.re_data_run_started_at", "model.re_data.re_data_monitored", "model.re_data.re_data_selected", "model.re_data.re_data_last_base_metrics_part0", "model.re_data.re_data_last_base_metrics_part1", "model.re_data.re_data_last_base_metrics_part2", "model.re_data.re_data_last_base_metrics_part3"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re", "fqn": ["re_data", "metrics", "types", "base", "re_data_base_metrics"], "unique_id": "model.re_data.re_data_base_metrics", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key = 'id',\n        on_schema_change='sync_all_columns',\n    )\n}}\n\n-- depends_on: {{ ref('re_data_columns') }}\n-- depends_on: {{ ref('re_data_last_base_metrics_thread0') }}\n-- depends_on: {{ ref('re_data_last_base_metrics_thread1') }}\n-- depends_on: {{ ref('re_data_last_base_metrics_thread2') }}\n-- depends_on: {{ ref('re_data_last_base_metrics_thread3') }}\n-- depends_on: {{ ref('re_data_last_base_metrics_part0') }}\n-- depends_on: {{ ref('re_data_last_base_metrics_part1') }}\n-- depends_on: {{ ref('re_data_last_base_metrics_part2') }}\n-- depends_on: {{ ref('re_data_last_base_metrics_part3') }}\n-- depends_on: {{ ref('re_data_run_started_at') }}\n-- depends_on: {{ ref('re_data_monitored') }}\n-- depends_on: {{ ref('re_data_selected') }}\n\nwith \n\nwith_time_window as (\n    {% set parts = ['0','1','2','3'] %}\n    {% for part in parts %}\n        {% set ref_name = 're_data_last_base_metrics_part' + part %}\n        select\n            *,\n            {{ time_window_start() }} as time_window_start,\n            {{ time_window_end() }} as time_window_end\n        from {{ ref(ref_name) }}\n        {%- if not loop.last %} union all {%- endif %}\n    {% endfor %}\n)\nselect\n    cast ({{ dbt_utils.surrogate_key([\n        'table_name',\n        'column_name',\n        'metric',\n        'time_window_start',\n        'time_window_end'\n    ]) }} as {{ string_type() }} ) as id,\n    cast (table_name as {{ string_type() }} ) as table_name,\n    cast (column_name as {{ string_type() }} ) as column_name,\n    cast (metric as {{ string_type() }} ) as metric,\n    cast (value as {{ numeric_type() }} ) as value,\n    cast (time_window_start as {{ timestamp_type() }} ) as time_window_start,\n    cast (time_window_end as {{ timestamp_type() }} ) as time_window_end,\n    cast (\n        {{ interval_length_sec('time_window_start', 'time_window_end') }} as {{ integer_type() }}\n    ) as interval_length_sec,\n    cast ({{- dbt_utils.current_timestamp_in_utc() -}} as {{ timestamp_type() }}) as computed_on\nfrom with_time_window", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "metrics/types/base/re_data_base_metrics.sql", "original_file_path": "models/metrics/types/base/re_data_base_metrics.sql", "name": "re_data_base_metrics", "alias": "re_data_base_metrics", "checksum": {"name": "sha256", "checksum": "d11b36c17069ac2864153dac5b6793dd81e64e235bdb7cb53d3dcb4b31e78ba7"}, "tags": [], "refs": [["re_data_columns"], ["re_data_last_base_metrics_thread0"], ["re_data_last_base_metrics_thread1"], ["re_data_last_base_metrics_thread2"], ["re_data_last_base_metrics_thread3"], ["re_data_last_base_metrics_part0"], ["re_data_last_base_metrics_part1"], ["re_data_last_base_metrics_part2"], ["re_data_last_base_metrics_part3"], ["re_data_run_started_at"], ["re_data_monitored"], ["re_data_selected"], ["re_data_last_base_metrics_part0"], ["re_data_last_base_metrics_part1"], ["re_data_last_base_metrics_part2"], ["re_data_last_base_metrics_part3"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re", "materialized": "incremental", "unique_key": "id", "on_schema_change": "sync_all_columns"}, "created_at": 1674081662.3649971}, "model.re_data.re_data_last_metrics": {"resource_type": "model", "depends_on": {"macros": ["macro.re_data.time_window_end"], "nodes": ["model.re_data.re_data_base_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re", "fqn": ["re_data", "metrics", "for_anomalies", "re_data_last_metrics"], "unique_id": "model.re_data.re_data_last_metrics", "raw_code": "select\n    table_name,\n    column_name,\n    metric,\n    value as last_value,\n    interval_length_sec,\n    computed_on\nfrom \n    {{ ref('re_data_base_metrics') }}\nwhere\n    time_window_end = {{- time_window_end() -}}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "metrics/for_anomalies/re_data_last_metrics.sql", "original_file_path": "models/metrics/for_anomalies/re_data_last_metrics.sql", "name": "re_data_last_metrics", "alias": "re_data_last_metrics", "checksum": {"name": "sha256", "checksum": "4de5025df7b9dc672b793596d5a2435f017279c483bdb0ec9d05fbff53b5bf6b"}, "tags": [], "refs": [["re_data_base_metrics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re"}, "created_at": 1674081662.3946755}, "model.re_data.re_data_last_stats": {"resource_type": "model", "depends_on": {"macros": ["macro.re_data.postgres_type_db", "macro.re_data.percentile", "macro.re_data.anamaly_detection_time_window_start", "macro.re_data.time_window_end"], "nodes": ["model.re_data.re_data_base_metrics", "model.re_data.re_data_base_metrics", "model.re_data.re_data_base_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re", "fqn": ["re_data", "metrics", "for_anomalies", "re_data_last_stats"], "unique_id": "model.re_data.re_data_last_stats", "raw_code": "{% set columns_to_group_by = 'table_name, column_name, metric, interval_length_sec' %}\n\nwith median_value as (\n    select distinct\n        table_name,\n        column_name,\n        metric,\n        interval_length_sec,\n        avg(value) {% if target.type not in postgres_type_db() %} over(partition by {{ columns_to_group_by }}) {% endif %} as last_avg,\n        {{ percentile(percentile_field='value', partition_field=columns_to_group_by, percent='0.25') }} as last_first_quartile,\n        {{ percentile(percentile_field='value', partition_field=columns_to_group_by, percent='0.5') }} as last_median,\n        {{ percentile(percentile_field='value', partition_field=columns_to_group_by, percent='0.75') }} as last_third_quartile\n    from\n        {{ ref('re_data_base_metrics') }}\n    where\n        time_window_end > {{- anamaly_detection_time_window_start() -}} and\n        time_window_end <= {{- time_window_end() -}}\n    {% if target.type in postgres_type_db() %} \n        group by\n            {{ columns_to_group_by }}\n    {% endif %}\n    \n), abs_deviation as (\n    select \n        s.table_name,\n        s.column_name,\n        s.metric,\n        s.interval_length_sec,\n        abs( s.value - mv.last_avg ) as absolute_deviation_from_mean,\n        abs( s.value - mv.last_median ) as absolute_deviation_from_median\n    from\n        {{ ref('re_data_base_metrics') }} s\n    left join \n        median_value mv\n        on\n            s.table_name = mv.table_name and\n            s.column_name = mv.column_name and\n            s.metric = mv.metric and\n            s.interval_length_sec = mv.interval_length_sec\n    where\n        s.time_window_end > {{- anamaly_detection_time_window_start() -}} and\n        s.time_window_end <= {{- time_window_end() -}}\n), median_abs_deviation as (\n    select distinct\n        table_name,\n        column_name,\n        metric,\n        interval_length_sec,\n        avg(absolute_deviation_from_mean) {% if target.type not in postgres_type_db() %} over(partition by {{ columns_to_group_by }}) {% endif %} as mean_absolute_deviation,\n        {{ percentile(percentile_field='absolute_deviation_from_median', partition_field=columns_to_group_by, percent='0.5') }} as median_absolute_deviation\n    from\n        abs_deviation\n    {% if target.type in postgres_type_db() %} \n        group by\n            {{ columns_to_group_by }}\n    {% endif %}\n), stats as (\n    select\n        table_name,\n        column_name,\n        metric,\n        stddev(value) as last_stddev,\n        max(time_window_end) as last_metric_time,\n        interval_length_sec,\n        max(computed_on) as computed_on\n    from\n        {{ ref('re_data_base_metrics') }}\n    where\n        time_window_end > {{- anamaly_detection_time_window_start() -}} and\n        time_window_end <= {{- time_window_end() -}}\n    group by\n        {{ columns_to_group_by }}\n)\n\nselect\n    s.table_name,\n    s.column_name,\n    s.metric,\n    mv.last_avg,\n    s.last_stddev,\n    s.last_metric_time,\n    s.interval_length_sec,\n    s.computed_on,\n    mv.last_median,\n    mv.last_first_quartile,\n    mv.last_third_quartile,\n    md.median_absolute_deviation last_median_absolute_deviation,\n    md.mean_absolute_deviation last_mean_absolute_deviation\nfrom\n    stats s\nleft join\n    median_value mv\n    on\n        s.table_name = mv.table_name and\n        s.column_name = mv.column_name and\n        s.metric = mv.metric and\n        s.interval_length_sec = mv.interval_length_sec\nleft join\n    median_abs_deviation md\n    on \n        s.table_name = md.table_name and\n        s.column_name = md.column_name and\n        s.metric = md.metric and\n        s.interval_length_sec = md.interval_length_sec", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "metrics/for_anomalies/re_data_last_stats.sql", "original_file_path": "models/metrics/for_anomalies/re_data_last_stats.sql", "name": "re_data_last_stats", "alias": "re_data_last_stats", "checksum": {"name": "sha256", "checksum": "925b71a5f6b9b03efce39b913d49f7b5a69f4f07aadd3f71a1468c1d1338886d"}, "tags": [], "refs": [["re_data_base_metrics"], ["re_data_base_metrics"], ["re_data_base_metrics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re"}, "created_at": 1674081662.401809}, "model.re_data.re_data_selected": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.re_data.re_data_monitored"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re", "fqn": ["re_data", "meta", "re_data_selected"], "unique_id": "model.re_data.re_data_selected", "raw_code": "select \n    name, schema, database, time_filter, metrics, columns, anomaly_detector, owners\nfrom {{ ref('re_data_monitored')}}\nwhere \n    selected = true", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "meta/re_data_selected.sql", "original_file_path": "models/meta/re_data_selected.sql", "name": "re_data_selected", "alias": "re_data_selected", "checksum": {"name": "sha256", "checksum": "3acfffe4b54e1f7cf1101f6ca1a5ce2c85432c12c82c086f0bb9236d3629c7a7"}, "tags": [], "refs": [["re_data_monitored"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/meta/re_data_selected.sql", "build_path": "target/run/re_data/models/meta/re_data_selected.sql", "deferred": false, "unrendered_config": {"schema": "re"}, "created_at": 1674081662.4287753, "compiled_code": "select \n    name, schema, database, time_filter, metrics, columns, anomaly_detector, owners\nfrom DEVELOPMENT.dbt_bregenold_re.re_data_monitored\nwhere \n    selected = true", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re.re_data_selected"}, "model.re_data.re_data_monitored": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.re_data.empty_table_generic"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "table_name", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [{"sql": "{% if execute %}{{ pub_insert_into_re_data_monitored() }}{% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re", "fqn": ["re_data", "meta", "re_data_monitored"], "unique_id": "model.re_data.re_data_monitored", "raw_code": "{{\n    config(\n        materialized='table',\n        unique_key = 'table_name',\n        post_hook=\"{% if execute %}{{ pub_insert_into_re_data_monitored() }}{% endif %}\"\n    )\n}}\n\n{{\n    re_data.empty_table_generic([\n        ('name', 'string'),\n        ('schema', 'string'),\n        ('database', 'string'),\n        ('time_filter', 'string'),\n        ('metrics_groups', 'string'),\n        ('additional_metrics', 'string'),\n        ('metrics', 'string'),\n        ('columns', 'string'),\n        ('anomaly_detector', 'string'),\n        ('owners', 'string'),\n        ('selected', 'boolean')\n    ])\n}}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "meta/re_data_monitored.sql", "original_file_path": "models/meta/re_data_monitored.sql", "name": "re_data_monitored", "alias": "re_data_monitored", "checksum": {"name": "sha256", "checksum": "ac536608cd17e00f2d502860fadbae32947e053a408711f74b10506824445eb0"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/meta/re_data_monitored.sql", "build_path": "target/run/re_data/models/meta/re_data_monitored.sql", "deferred": false, "unrendered_config": {"schema": "re", "materialized": "table", "unique_key": "table_name", "post-hook": ["{% if execute %}{{ pub_insert_into_re_data_monitored() }}{% endif %}"]}, "created_at": 1674081662.4313161, "compiled_code": "\n\n\n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as name,\n    \n         string_type as schema,\n    \n         string_type as database,\n    \n         string_type as time_filter,\n    \n         string_type as metrics_groups,\n    \n         string_type as additional_metrics,\n    \n         string_type as metrics,\n    \n         string_type as columns,\n    \n         string_type as anomaly_detector,\n    \n         string_type as owners,\n    \n         boolean_type as selected\n    \n    from types_table\n    where string_type is not null\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re.re_data_monitored"}, "model.re_data.re_data_columns": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.re_data.empty_columns_table", "macro.re_data.get_schemas", "macro.dbt.run_query", "macro.re_data.row_value", "macro.re_data.name_in_db", "macro.re_data.get_monitored_columns", "macro.re_data.string_type", "macro.re_data.boolean_type", "macro.dbt_utils.current_timestamp_in_utc", "macro.re_data.timestamp_type"], "nodes": ["model.re_data.re_data_run_started_at", "model.re_data.re_data_monitored", "model.re_data.re_data_selected"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re", "fqn": ["re_data", "meta", "re_data_columns"], "unique_id": "model.re_data.re_data_columns", "raw_code": "{{\n    config(\n        materialized='table',\n    )\n}}\n\n-- depends_on: {{ ref('re_data_run_started_at') }}\n-- depends_on: {{ ref('re_data_monitored') }}\n-- depends_on: {{ ref('re_data_selected') }}\n\n{% if execute %}\n    {% set schemas = run_query(re_data.get_schemas()) %}\n    {% if schemas %}\n\n    with columns_from_select as (\n        {% for row in schemas %}\n            {% set schema_name = re_data.name_in_db(re_data.row_value(row, 'schema')) %}\n            {{ get_monitored_columns(schema_name, re_data.row_value(row, 'database')) }}\n        {%- if not loop.last %} union all {%- endif %}\n        {% endfor %}\n    )\n\n    select\n        cast (table_name as {{ string_type() }} ) as name,\n        cast (table_schema as {{ string_type() }} ) as schema,\n        cast (table_catalog as {{ string_type() }} ) as database,\n        cast (column_name as {{ string_type() }} ) as column_name,\n        cast (data_type as {{ string_type() }} ) as data_type,\n        cast (case is_nullable when 'YES' then 1 else 0 end as {{ boolean_type() }} ) as is_nullable,\n        cast ({{- dbt_utils.current_timestamp_in_utc() -}} as {{ timestamp_type() }}) as computed_on\n    from columns_from_select\n\n    {% else %}\n        {{ empty_columns_table() }}\n    {% endif %}\n\n{% else %}\n    {{ empty_columns_table() }}\n{% endif %}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "meta/re_data_columns.sql", "original_file_path": "models/meta/re_data_columns.sql", "name": "re_data_columns", "alias": "re_data_columns", "checksum": {"name": "sha256", "checksum": "0f90b2ccf20a1bfce126e226194f8837c9c8cdd81c4f330dd12353aebe544ace"}, "tags": [], "refs": [["re_data_run_started_at"], ["re_data_monitored"], ["re_data_selected"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/models/meta/re_data_columns.sql", "build_path": "target/run/re_data/models/meta/re_data_columns.sql", "deferred": false, "unrendered_config": {"schema": "re", "materialized": "table"}, "created_at": 1674081662.4415329, "compiled_code": "\n\n-- depends_on: DEVELOPMENT.dbt_bregenold_re_internal.re_data_run_started_at\n-- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_monitored\n-- depends_on: DEVELOPMENT.dbt_bregenold_re.re_data_selected\n\n\n    \n    \n\n    with columns_from_select as (\n        \n            \n            \n    \n    \n    select\n        table_name,\n        table_schema,\n        table_catalog,\n        column_name,\n        data_type,\n        is_nullable\n    from\n        DEVELOPMENT.INFORMATION_SCHEMA.COLUMNS\n    where\n        table_schema = 'DBT_BREGENOLD'\n\n\n        \n    )\n\n    select\n        cast (table_name as \n    \n    STRING\n\n ) as name,\n        cast (table_schema as \n    \n    STRING\n\n ) as schema,\n        cast (table_catalog as \n    \n    STRING\n\n ) as database,\n        cast (column_name as \n    \n    STRING\n\n ) as column_name,\n        cast (data_type as \n    \n    STRING\n\n ) as data_type,\n        cast (case is_nullable when 'YES' then 1 else 0 end as \n    \n    BOOLEAN\n\n ) as is_nullable,\n        cast (\n    convert_timezone('UTC', \n    current_timestamp::\n    timestamp_ntz\n\n)::\n    timestamp_ntz\n\nas \n    \n    TIMESTAMP_NTZ\n\n) as computed_on\n    from columns_from_select\n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold_re.re_data_columns"}, "operation.re_data.re_data-on-run-end-0": {"compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.re_data.save_test_history"], "nodes": ["model.re_data.re_data_test_history"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_re", "fqn": ["re_data", "hooks", "re_data-on-run-end-0"], "unique_id": "operation.re_data.re_data-on-run-end-0", "raw_code": "{% if var('re_data:save_test_history') %} {{ re_data.save_test_history(results) }} {% endif %}", "language": "sql", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "hooks/re_data-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "name": "re_data-on-run-end-0", "alias": "re_data-on-run-end-0", "checksum": {"name": "sha256", "checksum": "a886e840a279ef484ab91ee28cbe248dcc9995df2386afd33e677f783e1426f3"}, "tags": ["on-run-end"], "refs": [["re_data_test_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/re_data/./dbt_project.yml/hooks/re_data-on-run-end-0.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "re"}, "created_at": 1674081662.4693224, "compiled_code": "  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "model.dbt_artifacts.fct_dbt__test_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__test_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "fct_dbt__test_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__test_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__test_executions') }}\n\n),\n\ntest_executions as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures\n    from base\n\n)\n\nselect * from test_executions", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "fct_dbt__test_executions.sql", "original_file_path": "models/fct_dbt__test_executions.sql", "name": "fct_dbt__test_executions", "alias": "fct_dbt__test_executions", "checksum": {"name": "sha256", "checksum": "e3f063c873571c579a15322193d5eb934d877c2b9ef4cfe56f0267af345a6142"}, "tags": [], "refs": [["stg_dbt__test_executions"]], "sources": [], "metrics": [], "description": "Fact model that contains data about test executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__test_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__test_executions.sql", "build_path": "target/run/dbt_artifacts/models/fct_dbt__test_executions.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081662.9566128, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.stg_dbt__test_executions\n\n),\n\ntest_executions as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures\n    from base\n\n)\n\nselect * from test_executions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.fct_dbt__test_executions"}, "model.dbt_artifacts.fct_dbt__snapshot_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__snapshot_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "fct_dbt__snapshot_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__snapshot_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__snapshot_executions') }}\n\n),\n\nsnapshot_executions as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name,\n        alias\n    from base\n\n)\n\nselect * from snapshot_executions", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "fct_dbt__snapshot_executions.sql", "original_file_path": "models/fct_dbt__snapshot_executions.sql", "name": "fct_dbt__snapshot_executions", "alias": "fct_dbt__snapshot_executions", "checksum": {"name": "sha256", "checksum": "9adc805db26a04e0c9640a31a86706026e90b49b6ac5eb0f12e3d2dfff41ab44"}, "tags": [], "refs": [["stg_dbt__snapshot_executions"]], "sources": [], "metrics": [], "description": "Fact model that contains data about snapshot executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__snapshot_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__snapshot_executions.sql", "build_path": "target/run/dbt_artifacts/models/fct_dbt__snapshot_executions.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081662.9516897, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.stg_dbt__snapshot_executions\n\n),\n\nsnapshot_executions as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name,\n        alias\n    from base\n\n)\n\nselect * from snapshot_executions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.fct_dbt__snapshot_executions"}, "model.dbt_artifacts.dim_dbt__tests": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__tests"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "dim_dbt__tests"], "unique_id": "model.dbt_artifacts.dim_dbt__tests", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__tests') }}\n\n),\n\ntests as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from tests", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "dim_dbt__tests.sql", "original_file_path": "models/dim_dbt__tests.sql", "name": "dim_dbt__tests", "alias": "dim_dbt__tests", "checksum": {"name": "sha256", "checksum": "157bb696979983cf36a9779e9a56f6f833de060191a4b867f3648afafa32fb71"}, "tags": [], "refs": [["stg_dbt__tests"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about tests.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_path": {"name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__tests.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__tests.sql", "build_path": "target/run/dbt_artifacts/models/dim_dbt__tests.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081662.9402792, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.stg_dbt__tests\n\n),\n\ntests as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from tests", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.dim_dbt__tests"}, "model.dbt_artifacts.dim_dbt__snapshots": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__snapshots"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "dim_dbt__snapshots"], "unique_id": "model.dbt_artifacts.dim_dbt__snapshots", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__snapshots') }}\n\n),\n\nsnapshots as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from snapshots", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "dim_dbt__snapshots.sql", "original_file_path": "models/dim_dbt__snapshots.sql", "name": "dim_dbt__snapshots", "alias": "dim_dbt__snapshots", "checksum": {"name": "sha256", "checksum": "5513b505bb4f4c2f46b2ae1bc8d7fe6c292b4ab9e3db6e9676ecdc9c7a43e9e4"}, "tags": [], "refs": [["stg_dbt__snapshots"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about snapshots.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "strategy": {"name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__snapshots.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__snapshots.sql", "build_path": "target/run/dbt_artifacts/models/dim_dbt__snapshots.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081662.945715, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.stg_dbt__snapshots\n\n),\n\nsnapshots as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from snapshots", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.dim_dbt__snapshots"}, "model.dbt_artifacts.fct_dbt__seed_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__seed_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "fct_dbt__seed_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__seed_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__seed_executions') }}\n\n),\n\nseed_executions as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name,\n        alias\n    from base\n\n)\n\nselect * from seed_executions", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "fct_dbt__seed_executions.sql", "original_file_path": "models/fct_dbt__seed_executions.sql", "name": "fct_dbt__seed_executions", "alias": "fct_dbt__seed_executions", "checksum": {"name": "sha256", "checksum": "192fd04719e40dd822d688c4a011b99865404320dd241a1893c26b3d78501252"}, "tags": [], "refs": [["stg_dbt__seed_executions"]], "sources": [], "metrics": [], "description": "Fact model that contains data about seed executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__seed_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__seed_executions.sql", "build_path": "target/run/dbt_artifacts/models/fct_dbt__seed_executions.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081662.9866874, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.stg_dbt__seed_executions\n\n),\n\nseed_executions as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name,\n        alias\n    from base\n\n)\n\nselect * from seed_executions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.fct_dbt__seed_executions"}, "model.dbt_artifacts.fct_dbt__model_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__model_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "fct_dbt__model_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__model_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__model_executions') }}\n\n),\n\nmodel_executions as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        {% if target.type == 'bigquery' %}\n            bytes_processed,\n        {% endif %}\n        materialization,\n        schema, -- noqa\n        name,\n        alias\n    from base\n\n)\n\nselect * from model_executions", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "fct_dbt__model_executions.sql", "original_file_path": "models/fct_dbt__model_executions.sql", "name": "fct_dbt__model_executions", "alias": "fct_dbt__model_executions", "checksum": {"name": "sha256", "checksum": "a111011ede098c4f4a04f05a9ab54a961c801f65463cf2f21e3028c5a43c28a3"}, "tags": [], "refs": [["stg_dbt__model_executions"]], "sources": [], "metrics": [], "description": "Fact model that contains data about model executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_affected": {"name": "bytes_affected", "description": "Number of bytes processed by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__model_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__model_executions.sql", "build_path": "target/run/dbt_artifacts/models/fct_dbt__model_executions.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081662.9930394, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.stg_dbt__model_executions\n\n),\n\nmodel_executions as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        \n        materialization,\n        schema, -- noqa\n        name,\n        alias\n    from base\n\n)\n\nselect * from model_executions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.fct_dbt__model_executions"}, "model.dbt_artifacts.dim_dbt__current_models": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__models", "model.dbt_artifacts.stg_dbt__model_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "dim_dbt__current_models"], "unique_id": "model.dbt_artifacts.dim_dbt__current_models", "raw_code": "with base as (\n    select *\n    from {{ ref('stg_dbt__models') }}\n),\n\nmodel_executions as (\n    select *\n    from {{ ref('stg_dbt__model_executions') }}\n),\n\nlatest_models as (\n    /* Retrieves the models present in the most recent run */\n    select *\n    from base\n    where run_started_at = (select max(run_started_at) from base)\n),\n\nlatest_models_runs as (\n    /* Retreives all successful run information for the models present in the most\n    recent run and ranks them based on query completion time */\n    select\n        model_executions.node_id\n        , model_executions.was_full_refresh\n        , model_executions.query_completed_at\n        , model_executions.total_node_runtime\n        , model_executions.rows_affected\n        {% if target.type == 'bigquery' %}\n        , model_executions.bytes_processed\n        {% endif %}\n        , row_number() over (\n            partition by latest_models.node_id, model_executions.was_full_refresh\n            order by model_executions.query_completed_at desc /* most recent ranked first */\n        ) as run_idx\n    from model_executions\n    inner join latest_models on model_executions.node_id = latest_models.node_id\n    where model_executions.status = 'success'\n),\n\nlatest_model_stats as (\n    select\n        node_id\n        , max(case when was_full_refresh then query_completed_at end) as last_full_refresh_run_completed_at\n        , max(case when was_full_refresh then total_node_runtime end) as last_full_refresh_run_total_runtime\n        , max(case when was_full_refresh then rows_affected end) as last_full_refresh_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , max(case when was_full_refresh then bytes_processed end) as last_full_refresh_run_bytes_processed\n        {% endif %}\n        , max(query_completed_at) as last_run_completed_at\n        , max(total_node_runtime) as last_run_total_runtime\n        , max(rows_affected) as last_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , max(bytes_processed) as last_run_bytes_processed\n        {% endif %}\n    from latest_models_runs\n    where run_idx = 1\n    group by 1\n),\n\nfinal as (\n    select\n        latest_models.*\n        , latest_model_stats.last_full_refresh_run_completed_at\n        , latest_model_stats.last_full_refresh_run_total_runtime\n        , latest_model_stats.last_full_refresh_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , latest_model_stats.last_full_refresh_run_bytes_processed\n        {% endif %}\n        , latest_model_stats.last_run_completed_at\n        , latest_model_stats.last_run_total_runtime\n        , latest_model_stats.last_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , latest_model_stats.last_run_bytes_processed\n        {% endif %}\n    from latest_models\n    left join latest_model_stats\n        on latest_models.node_id = latest_model_stats.node_id\n)\n\nselect * from final", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "dim_dbt__current_models.sql", "original_file_path": "models/dim_dbt__current_models.sql", "name": "dim_dbt__current_models", "alias": "dim_dbt__current_models", "checksum": {"name": "sha256", "checksum": "216edd27f1ec80eaaa536cc8c691f73f508a1367330102fa0dd14e203ad95385"}, "tags": [], "refs": [["stg_dbt__models"], ["stg_dbt__model_executions"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about models' most recent successful runs", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_refresh_run_completed_at": {"name": "last_full_refresh_run_completed_at", "description": "Timestamp when the node's SQL query completed on the last full (non-incremental) run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_refresh_run_rows_affected": {"name": "last_full_refresh_run_rows_affected", "description": "Number of rows affected by the node's last full (non-incremental) run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_refresh_run_bytes_processed": {"name": "last_full_refresh_run_bytes_processed", "description": "Number of bytes processed by the node's last full (non-incremental) run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_refresh_run_total_runtime": {"name": "last_full_refresh_run_total_runtime", "description": "Total time spent executing the node's last full (non-incremental) run (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_run_completed_at": {"name": "last_run_completed_at", "description": "Timestamp when the node's SQL query completed on the last run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_run_rows_affected": {"name": "last_run_rows_affected", "description": "Number of rows affected by the node's last run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_run_bytes_processed": {"name": "last_run_bytes_processed", "description": "Number of bytes processed by the node's last run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_run_total_runtime": {"name": "last_run_total_runtime", "description": "Total time spent executing the node's last run (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__current_models.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__current_models.sql", "build_path": "target/run/dbt_artifacts/models/dim_dbt__current_models.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081663.0012288, "compiled_code": "with base as (\n    select *\n    from DEVELOPMENT.dbt_bregenold.stg_dbt__models\n),\n\nmodel_executions as (\n    select *\n    from DEVELOPMENT.dbt_bregenold.stg_dbt__model_executions\n),\n\nlatest_models as (\n    /* Retrieves the models present in the most recent run */\n    select *\n    from base\n    where run_started_at = (select max(run_started_at) from base)\n),\n\nlatest_models_runs as (\n    /* Retreives all successful run information for the models present in the most\n    recent run and ranks them based on query completion time */\n    select\n        model_executions.node_id\n        , model_executions.was_full_refresh\n        , model_executions.query_completed_at\n        , model_executions.total_node_runtime\n        , model_executions.rows_affected\n        \n        , row_number() over (\n            partition by latest_models.node_id, model_executions.was_full_refresh\n            order by model_executions.query_completed_at desc /* most recent ranked first */\n        ) as run_idx\n    from model_executions\n    inner join latest_models on model_executions.node_id = latest_models.node_id\n    where model_executions.status = 'success'\n),\n\nlatest_model_stats as (\n    select\n        node_id\n        , max(case when was_full_refresh then query_completed_at end) as last_full_refresh_run_completed_at\n        , max(case when was_full_refresh then total_node_runtime end) as last_full_refresh_run_total_runtime\n        , max(case when was_full_refresh then rows_affected end) as last_full_refresh_run_rows_affected\n        \n        , max(query_completed_at) as last_run_completed_at\n        , max(total_node_runtime) as last_run_total_runtime\n        , max(rows_affected) as last_run_rows_affected\n        \n    from latest_models_runs\n    where run_idx = 1\n    group by 1\n),\n\nfinal as (\n    select\n        latest_models.*\n        , latest_model_stats.last_full_refresh_run_completed_at\n        , latest_model_stats.last_full_refresh_run_total_runtime\n        , latest_model_stats.last_full_refresh_run_rows_affected\n        \n        , latest_model_stats.last_run_completed_at\n        , latest_model_stats.last_run_total_runtime\n        , latest_model_stats.last_run_rows_affected\n        \n    from latest_models\n    left join latest_model_stats\n        on latest_models.node_id = latest_model_stats.node_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.dim_dbt__current_models"}, "model.dbt_artifacts.dim_dbt__exposures": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__exposures"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "dim_dbt__exposures"], "unique_id": "model.dbt_artifacts.dim_dbt__exposures", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__exposures') }}\n\n),\n\nexposures as (\n\n    select\n        exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes\n    from base\n\n)\n\nselect * from exposures", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "dim_dbt__exposures.sql", "original_file_path": "models/dim_dbt__exposures.sql", "name": "dim_dbt__exposures", "alias": "dim_dbt__exposures", "checksum": {"name": "sha256", "checksum": "3632b529bf1dd2a1dfa86444a95ba41745c4c224121c19d3ddcfbc20a4016c7e"}, "tags": [], "refs": [["stg_dbt__exposures"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about exposures.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Node description.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exposure_execution_id": {"name": "exposure_execution_id", "description": "Execution ID of the exposure node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__exposures.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__exposures.sql", "build_path": "target/run/dbt_artifacts/models/dim_dbt__exposures.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081663.0069635, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.stg_dbt__exposures\n\n),\n\nexposures as (\n\n    select\n        exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes\n    from base\n\n)\n\nselect * from exposures", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.dim_dbt__exposures"}, "model.dbt_artifacts.dim_dbt__models": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__models"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "dim_dbt__models"], "unique_id": "model.dbt_artifacts.dim_dbt__models", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__models') }}\n\n),\n\nmodels as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization,\n        tags,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from models", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "dim_dbt__models.sql", "original_file_path": "models/dim_dbt__models.sql", "name": "dim_dbt__models", "alias": "dim_dbt__models", "checksum": {"name": "sha256", "checksum": "6c5c24260386f0d2c2284d0f6844eb4d55d71bb302b17959d5efbb703b34ff46"}, "tags": [], "refs": [["stg_dbt__models"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about models.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__models.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__models.sql", "build_path": "target/run/dbt_artifacts/models/dim_dbt__models.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081662.9707055, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.stg_dbt__models\n\n),\n\nmodels as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization,\n        tags,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from models", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.dim_dbt__models"}, "model.dbt_artifacts.dim_dbt__sources": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__sources"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "dim_dbt__sources"], "unique_id": "model.dbt_artifacts.dim_dbt__sources", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__sources') }}\n\n),\n\nsources as (\n\n    select\n        source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from sources", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "dim_dbt__sources.sql", "original_file_path": "models/dim_dbt__sources.sql", "name": "dim_dbt__sources", "alias": "dim_dbt__sources", "checksum": {"name": "sha256", "checksum": "319fceac4dee8ee048a99d857d27e5e70d499ef12718abed922ae0eee0f69313"}, "tags": [], "refs": [["stg_dbt__sources"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about sources.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "freshness": {"name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loader": {"name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_execution_id": {"name": "source_execution_id", "description": "Execution ID of the source node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__sources.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__sources.sql", "build_path": "target/run/dbt_artifacts/models/dim_dbt__sources.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081662.9759629, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.stg_dbt__sources\n\n),\n\nsources as (\n\n    select\n        source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from sources", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.dim_dbt__sources"}, "model.dbt_artifacts.dim_dbt__seeds": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__seeds"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "dim_dbt__seeds"], "unique_id": "model.dbt_artifacts.dim_dbt__seeds", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__seeds') }}\n\n),\n\nseeds as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from seeds", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "dim_dbt__seeds.sql", "original_file_path": "models/dim_dbt__seeds.sql", "name": "dim_dbt__seeds", "alias": "dim_dbt__seeds", "checksum": {"name": "sha256", "checksum": "16a76fa8d240b2014c6a230f5e3d1ad11bc58418ca059d3a23dd7d80cc5ef323"}, "tags": [], "refs": [["stg_dbt__seeds"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about seeds.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__seeds.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__seeds.sql", "build_path": "target/run/dbt_artifacts/models/dim_dbt__seeds.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081662.9809148, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.stg_dbt__seeds\n\n),\n\nseeds as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from seeds", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.dim_dbt__seeds"}, "model.dbt_artifacts.fct_dbt__invocations": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__invocations"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "fct_dbt__invocations"], "unique_id": "model.dbt_artifacts.fct_dbt__invocations", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__invocations') }}\n\n),\n\ninvocations as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars,\n        invocation_args,\n        dbt_custom_envs\n    from base\n\n)\n\nselect * from invocations", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "fct_dbt__invocations.sql", "original_file_path": "models/fct_dbt__invocations.sql", "name": "fct_dbt__invocations", "alias": "fct_dbt__invocations", "checksum": {"name": "sha256", "checksum": "03ad2d98f2bb14c728dfd1e77a3d882e271535779d024dc0a7be5ab44ce3d771"}, "tags": [], "refs": [["stg_dbt__invocations"]], "sources": [], "metrics": [], "description": "Fact model that contains data about invocations.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_command": {"name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_refresh_flag": {"name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_threads": {"name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "env_vars": {"name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_vars": {"name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invocation_args": {"name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_custom_envs": {"name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__invocations.yml", "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__invocations.sql", "build_path": "target/run/dbt_artifacts/models/fct_dbt__invocations.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081662.964546, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.stg_dbt__invocations\n\n),\n\ninvocations as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars,\n        invocation_args,\n        dbt_custom_envs\n    from base\n\n)\n\nselect * from invocations", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.fct_dbt__invocations"}, "model.dbt_artifacts.snapshot_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "sources", "snapshot_executions"], "unique_id": "model.dbt_artifacts.snapshot_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "sources/snapshot_executions.sql", "original_file_path": "models/sources/snapshot_executions.sql", "name": "snapshot_executions", "alias": "snapshot_executions", "checksum": {"name": "sha256", "checksum": "2ecc1bc070853022de7bb1fe576790937aed14f381f9ad14d9ab1419f0aebb58"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_artifacts/models/sources/snapshot_executions.sql", "build_path": "target/run/dbt_artifacts/models/sources/snapshot_executions.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false}, "created_at": 1674081662.5292344, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as BOOLEAN) as was_full_refresh,\n    cast(null as TEXT) as thread_id,\n    cast(null as TEXT) as status,\n    cast(null as TIMESTAMP) as compile_started_at,\n    cast(null as TIMESTAMP) as query_completed_at,\n    cast(null as FLOAT) as total_node_runtime,\n    cast(null as INT) as rows_affected,\n    cast(null as TEXT) as materialization,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as alias\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.snapshot_executions"}, "model.dbt_artifacts.test_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "sources", "test_executions"], "unique_id": "model.dbt_artifacts.test_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    cast(null as {{ type_int() }}) as failures\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "sources/test_executions.sql", "original_file_path": "models/sources/test_executions.sql", "name": "test_executions", "alias": "test_executions", "checksum": {"name": "sha256", "checksum": "39f54bc4d9ce331ec49ac85a9fec686d8b620f15a3e5c1699ae9aed0f11569e3"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_artifacts/models/sources/test_executions.sql", "build_path": "target/run/dbt_artifacts/models/sources/test_executions.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false}, "created_at": 1674081662.551287, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as BOOLEAN) as was_full_refresh,\n    cast(null as TEXT) as thread_id,\n    cast(null as TEXT) as status,\n    cast(null as TIMESTAMP) as compile_started_at,\n    cast(null as TIMESTAMP) as query_completed_at,\n    cast(null as FLOAT) as total_node_runtime,\n    cast(null as INT) as rows_affected,\n    cast(null as INT) as failures\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.test_executions"}, "model.dbt_artifacts.exposures": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_json", "macro.dbt_artifacts.type_array"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "sources", "exposures"], "unique_id": "model.dbt_artifacts.exposures", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as type,\n    cast(null as {{ type_json() }}) as owner,\n    cast(null as {{ type_string() }}) as maturity,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as description,\n    cast(null as {{ type_string() }}) as url,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_array() }}) as depends_on_nodes\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "sources/exposures.sql", "original_file_path": "models/sources/exposures.sql", "name": "exposures", "alias": "exposures", "checksum": {"name": "sha256", "checksum": "e066a6845074144411a223d2db537d77ee2108d702e34fb2523e85b29466b2fc"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_artifacts/models/sources/exposures.sql", "build_path": "target/run/dbt_artifacts/models/sources/exposures.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false}, "created_at": 1674081662.5607316, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as type,\n    cast(null as \n   OBJECT\n) as owner,\n    cast(null as TEXT) as maturity,\n    cast(null as TEXT) as path,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as url,\n    cast(null as TEXT) as package_name,\n    cast(null as \n   ARRAY\n) as depends_on_nodes\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.exposures"}, "model.dbt_artifacts.models": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "sources", "models"], "unique_id": "model.dbt_artifacts.models", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as checksum,\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_array() }}) as tags,\n    cast(null as {{ type_json() }}) as meta,\n    cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "sources/models.sql", "original_file_path": "models/sources/models.sql", "name": "models", "alias": "models", "checksum": {"name": "sha256", "checksum": "828694c88ec4506c82169459bbcfb2484ab7025cc87861b17485f6c630ae792d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_artifacts/models/sources/models.sql", "build_path": "target/run/dbt_artifacts/models/sources/models.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false}, "created_at": 1674081662.5744464, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as \n   ARRAY\n) as depends_on_nodes,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as path,\n    cast(null as TEXT) as checksum,\n    cast(null as TEXT) as materialization,\n    cast(null as \n   ARRAY\n) as tags,\n    cast(null as \n   OBJECT\n) as meta,\n    cast(null as TEXT) as alias\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.models"}, "model.dbt_artifacts.seeds": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_json"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "sources", "seeds"], "unique_id": "model.dbt_artifacts.seeds", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as checksum,\n    cast(null as {{ type_json() }}) as meta,\n    cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "sources/seeds.sql", "original_file_path": "models/sources/seeds.sql", "name": "seeds", "alias": "seeds", "checksum": {"name": "sha256", "checksum": "8d3a63ddabd3130641361296f472e52bf6991125d177b8bf6e1d88677b8e573c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_artifacts/models/sources/seeds.sql", "build_path": "target/run/dbt_artifacts/models/sources/seeds.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false}, "created_at": 1674081662.58437, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as path,\n    cast(null as TEXT) as checksum,\n    cast(null as \n   OBJECT\n) as meta,\n    cast(null as TEXT) as alias\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.seeds"}, "model.dbt_artifacts.sources": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "sources", "sources"], "unique_id": "model.dbt_artifacts.sources", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as source_name,\n    cast(null as {{ type_string() }}) as loader,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as identifier,\n    cast(null as {{ type_string() }}) as loaded_at_field,\n    {% if target.type == 'snowflake'%}\n        cast(null as {{ type_array() }}) as freshness\n    {% else %}\n        cast(null as {{ type_json() }}) as freshness\n    {% endif %}\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "sources/sources.sql", "original_file_path": "models/sources/sources.sql", "name": "sources", "alias": "sources", "checksum": {"name": "sha256", "checksum": "51e5dfc74061e0eaefe61a94f84b1568aaedef1b8b216ed2db083f9863174719"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_artifacts/models/sources/sources.sql", "build_path": "target/run/dbt_artifacts/models/sources/sources.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false}, "created_at": 1674081662.5939624, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as source_name,\n    cast(null as TEXT) as loader,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as identifier,\n    cast(null as TEXT) as loaded_at_field,\n    \n        cast(null as \n   ARRAY\n) as freshness\n    \nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.sources"}, "model.dbt_artifacts.tests": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "sources", "tests"], "unique_id": "model.dbt_artifacts.tests", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as test_path,\n    cast(null as {{ type_array() }}) as tags\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "sources/tests.sql", "original_file_path": "models/sources/tests.sql", "name": "tests", "alias": "tests", "checksum": {"name": "sha256", "checksum": "b119f5c951c557f42c7098a8d00eabb8a1b83f2b446bedb2d3c8af9db74740b3"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_artifacts/models/sources/tests.sql", "build_path": "target/run/dbt_artifacts/models/sources/tests.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false}, "created_at": 1674081662.6035674, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as name,\n    cast(null as \n   ARRAY\n) as depends_on_nodes,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as test_path,\n    cast(null as \n   ARRAY\n) as tags\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.tests"}, "model.dbt_artifacts.snapshots": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "sources", "snapshots"], "unique_id": "model.dbt_artifacts.snapshots", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as checksum,\n    cast(null as {{ type_string() }}) as strategy,\n    cast(null as {{ type_json() }}) as meta,\n    cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "sources/snapshots.sql", "original_file_path": "models/sources/snapshots.sql", "name": "snapshots", "alias": "snapshots", "checksum": {"name": "sha256", "checksum": "8877cea5bc91627ab644e09743fcb96c32a3d47ebf5249937cd2089f973d6a55"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_artifacts/models/sources/snapshots.sql", "build_path": "target/run/dbt_artifacts/models/sources/snapshots.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false}, "created_at": 1674081662.6123948, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as \n   ARRAY\n) as depends_on_nodes,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as path,\n    cast(null as TEXT) as checksum,\n    cast(null as TEXT) as strategy,\n    cast(null as \n   OBJECT\n) as meta,\n    cast(null as TEXT) as alias\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.snapshots"}, "model.dbt_artifacts.seed_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "sources", "seed_executions"], "unique_id": "model.dbt_artifacts.seed_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "sources/seed_executions.sql", "original_file_path": "models/sources/seed_executions.sql", "name": "seed_executions", "alias": "seed_executions", "checksum": {"name": "sha256", "checksum": "2ecc1bc070853022de7bb1fe576790937aed14f381f9ad14d9ab1419f0aebb58"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_artifacts/models/sources/seed_executions.sql", "build_path": "target/run/dbt_artifacts/models/sources/seed_executions.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false}, "created_at": 1674081662.6219614, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as BOOLEAN) as was_full_refresh,\n    cast(null as TEXT) as thread_id,\n    cast(null as TEXT) as status,\n    cast(null as TIMESTAMP) as compile_started_at,\n    cast(null as TIMESTAMP) as query_completed_at,\n    cast(null as FLOAT) as total_node_runtime,\n    cast(null as INT) as rows_affected,\n    cast(null as TEXT) as materialization,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as alias\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.seed_executions"}, "model.dbt_artifacts.model_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "sources", "model_executions"], "unique_id": "model.dbt_artifacts.model_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    {% if target.type == 'bigquery' %}\n        cast(null as {{ type_int() }}) as bytes_processed,\n    {% endif %}\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "sources/model_executions.sql", "original_file_path": "models/sources/model_executions.sql", "name": "model_executions", "alias": "model_executions", "checksum": {"name": "sha256", "checksum": "da9cb1427ff8e8b5865a5202d6f5b48f58b127fd94e840c5707a2c8009bca62e"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_artifacts/models/sources/model_executions.sql", "build_path": "target/run/dbt_artifacts/models/sources/model_executions.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false}, "created_at": 1674081662.6320744, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as BOOLEAN) as was_full_refresh,\n    cast(null as TEXT) as thread_id,\n    cast(null as TEXT) as status,\n    cast(null as TIMESTAMP) as compile_started_at,\n    cast(null as TIMESTAMP) as query_completed_at,\n    cast(null as FLOAT) as total_node_runtime,\n    cast(null as INT) as rows_affected,\n    \n    cast(null as TEXT) as materialization,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as alias\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.model_executions"}, "model.dbt_artifacts.invocations": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_int", "macro.dbt_artifacts.type_json"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "sources", "invocations"], "unique_id": "model.dbt_artifacts.invocations", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as dbt_version,\n    cast(null as {{ type_string() }}) as project_name,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as dbt_command,\n    cast(null as {{ type_boolean() }}) as full_refresh_flag,\n    cast(null as {{ type_string() }}) as target_profile_name,\n    cast(null as {{ type_string() }}) as target_name,\n    cast(null as {{ type_string() }}) as target_schema,\n    cast(null as {{ type_int() }}) as target_threads,\n    cast(null as {{ type_string() }}) as dbt_cloud_project_id,\n    cast(null as {{ type_string() }}) as dbt_cloud_job_id,\n    cast(null as {{ type_string() }}) as dbt_cloud_run_id,\n    cast(null as {{ type_string() }}) as dbt_cloud_run_reason_category,\n    cast(null as {{ type_string() }}) as dbt_cloud_run_reason,\n    cast(null as {{ type_json() }}) as env_vars,\n    cast(null as {{ type_json() }}) as dbt_vars,\n    cast(null as {{ type_json() }}) as invocation_args,\n    cast(null as {{ type_json() }}) as dbt_custom_envs\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "sources/invocations.sql", "original_file_path": "models/sources/invocations.sql", "name": "invocations", "alias": "invocations", "checksum": {"name": "sha256", "checksum": "0cb88835ee9f206b5dd1ff7c74f34e3f6e5027cc6d12edd140568187ccb0f4f4"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/dbt_artifacts/models/sources/invocations.sql", "build_path": "target/run/dbt_artifacts/models/sources/invocations.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false}, "created_at": 1674081662.6432269, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as dbt_version,\n    cast(null as TEXT) as project_name,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as dbt_command,\n    cast(null as BOOLEAN) as full_refresh_flag,\n    cast(null as TEXT) as target_profile_name,\n    cast(null as TEXT) as target_name,\n    cast(null as TEXT) as target_schema,\n    cast(null as INT) as target_threads,\n    cast(null as TEXT) as dbt_cloud_project_id,\n    cast(null as TEXT) as dbt_cloud_job_id,\n    cast(null as TEXT) as dbt_cloud_run_id,\n    cast(null as TEXT) as dbt_cloud_run_reason_category,\n    cast(null as TEXT) as dbt_cloud_run_reason,\n    cast(null as \n   OBJECT\n) as env_vars,\n    cast(null as \n   OBJECT\n) as dbt_vars,\n    cast(null as \n   OBJECT\n) as invocation_args,\n    cast(null as \n   OBJECT\n) as dbt_custom_envs\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.invocations"}, "model.dbt_artifacts.stg_dbt__invocations": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.invocations"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "staging", "stg_dbt__invocations"], "unique_id": "model.dbt_artifacts.stg_dbt__invocations", "raw_code": "with base as (\n\n    select *\n    from {{ ref('invocations') }}\n\n),\n\nenhanced as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars,\n        invocation_args,\n        dbt_custom_envs\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__invocations.sql", "original_file_path": "models/staging/stg_dbt__invocations.sql", "name": "stg_dbt__invocations", "alias": "stg_dbt__invocations", "checksum": {"name": "sha256", "checksum": "8fad1c836b8fa4f77766e35537b26cfddbe8869d47766bae2bd93676268a35ab"}, "tags": [], "refs": [["invocations"]], "sources": [], "metrics": [], "description": "Staging model that contains data about the invocations of dbt. One row per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_command": {"name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_refresh_flag": {"name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_threads": {"name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "env_vars": {"name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_vars": {"name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invocation_args": {"name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_custom_envs": {"name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__invocations.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__invocations.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__invocations.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081663.0373478, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.invocations\n\n),\n\nenhanced as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars,\n        invocation_args,\n        dbt_custom_envs\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.stg_dbt__invocations"}, "model.dbt_artifacts.stg_dbt__model_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.model_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "staging", "stg_dbt__model_executions"], "unique_id": "model.dbt_artifacts.stg_dbt__model_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('model_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        {% if target.type == 'bigquery' %}\n            bytes_processed,\n        {% endif %}\n        materialization,\n        schema, -- noqa\n        name,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__model_executions.sql", "original_file_path": "models/staging/stg_dbt__model_executions.sql", "name": "stg_dbt__model_executions", "alias": "stg_dbt__model_executions", "checksum": {"name": "sha256", "checksum": "8bf97279b4d80d1e5d49fb238600b050290956671acf4e0b87ba2ba254824e66"}, "tags": [], "refs": [["model_executions"]], "sources": [], "metrics": [], "description": "Staging model that contains data about model executions. One row per model execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_processed": {"name": "bytes_processed", "description": "Number of bytes processed by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__model_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__model_executions.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__model_executions.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081663.0233285, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.model_executions\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        \n\n    split_part(\n        thread_id,\n        '-',\n        2\n        )\n\n as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        \n        materialization,\n        schema, -- noqa\n        name,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.stg_dbt__model_executions"}, "model.dbt_artifacts.stg_dbt__seed_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.seed_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "staging", "stg_dbt__seed_executions"], "unique_id": "model.dbt_artifacts.stg_dbt__seed_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('seed_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema, -- noqa\n        name,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__seed_executions.sql", "original_file_path": "models/staging/stg_dbt__seed_executions.sql", "name": "stg_dbt__seed_executions", "alias": "stg_dbt__seed_executions", "checksum": {"name": "sha256", "checksum": "243d3f4bc68ab9dd03899dc83fdb7118817e07a116b865c80157c1d8118d9505"}, "tags": [], "refs": [["seed_executions"]], "sources": [], "metrics": [], "description": "Staging model that contains data about seed executions. One row per seed execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__seed_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__seed_executions.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__seed_executions.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081663.0293484, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.seed_executions\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        \n\n    split_part(\n        thread_id,\n        '-',\n        2\n        )\n\n as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema, -- noqa\n        name,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.stg_dbt__seed_executions"}, "model.dbt_artifacts.stg_dbt__snapshots": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key"], "nodes": ["model.dbt_artifacts.snapshots"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "staging", "stg_dbt__snapshots"], "unique_id": "model.dbt_artifacts.stg_dbt__snapshots", "raw_code": "with base as (\n\n    select *\n    from {{ ref('snapshots') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__snapshots.sql", "original_file_path": "models/staging/stg_dbt__snapshots.sql", "name": "stg_dbt__snapshots", "alias": "stg_dbt__snapshots", "checksum": {"name": "sha256", "checksum": "de6ad5bd8b27e3eb35e7ccaee94c66953d178030f7336b10a279030e81e5da45"}, "tags": [], "refs": [["snapshots"]], "sources": [], "metrics": [], "description": "Staging model that contains metadata about seed executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "strategy": {"name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__snapshots.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__snapshots.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__snapshots.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081663.0125818, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.snapshots\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.stg_dbt__snapshots"}, "model.dbt_artifacts.stg_dbt__tests": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key"], "nodes": ["model.dbt_artifacts.tests"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "staging", "stg_dbt__tests"], "unique_id": "model.dbt_artifacts.stg_dbt__tests", "raw_code": "with base as (\n\n    select *\n    from {{ ref('tests') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__tests.sql", "original_file_path": "models/staging/stg_dbt__tests.sql", "name": "stg_dbt__tests", "alias": "stg_dbt__tests", "checksum": {"name": "sha256", "checksum": "bc0a410ed9571f7795a79737a2cd304a28ee4db922dc90e4beb0c66949b5c23f"}, "tags": [], "refs": [["tests"]], "sources": [], "metrics": [], "description": "Staging model that contains metadata about test executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_path": {"name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__tests.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__tests.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__tests.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081663.016588, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.tests\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.stg_dbt__tests"}, "model.dbt_artifacts.stg_dbt__exposures": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key"], "nodes": ["model.dbt_artifacts.exposures"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "staging", "stg_dbt__exposures"], "unique_id": "model.dbt_artifacts.stg_dbt__exposures", "raw_code": "with base as (\n\n    select *\n    from {{ ref('exposures') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__exposures.sql", "original_file_path": "models/staging/stg_dbt__exposures.sql", "name": "stg_dbt__exposures", "alias": "stg_dbt__exposures", "checksum": {"name": "sha256", "checksum": "cfc6ecf133242c233b69e2abd71f9d77867a70aad79314ec5c563c8604a29ddf"}, "tags": [], "refs": [["exposures"]], "sources": [], "metrics": [], "description": "Staging model that contains data about exposure exections. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Node description.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exposure_execution_id": {"name": "exposure_execution_id", "description": "Execution ID of the exposure node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__exposures.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__exposures.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__exposures.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081663.0594387, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.exposures\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.stg_dbt__exposures"}, "model.dbt_artifacts.stg_dbt__snapshot_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.snapshot_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "staging", "stg_dbt__snapshot_executions"], "unique_id": "model.dbt_artifacts.stg_dbt__snapshot_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('snapshot_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema, -- noqa\n        name,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__snapshot_executions.sql", "original_file_path": "models/staging/stg_dbt__snapshot_executions.sql", "name": "stg_dbt__snapshot_executions", "alias": "stg_dbt__snapshot_executions", "checksum": {"name": "sha256", "checksum": "c19c8b61848ea238ca8e9a6be4390c8c6aa21854583ca6db78c8ac4122425b2d"}, "tags": [], "refs": [["snapshot_executions"]], "sources": [], "metrics": [], "description": "Staging model that contains data about snapshot executions. One row per snapshot execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__snapshot_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__snapshot_executions.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__snapshot_executions.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081663.0652318, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.snapshot_executions\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        \n\n    split_part(\n        thread_id,\n        '-',\n        2\n        )\n\n as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema, -- noqa\n        name,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.stg_dbt__snapshot_executions"}, "model.dbt_artifacts.stg_dbt__test_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.test_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "staging", "stg_dbt__test_executions"], "unique_id": "model.dbt_artifacts.stg_dbt__test_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('test_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__test_executions.sql", "original_file_path": "models/staging/stg_dbt__test_executions.sql", "name": "stg_dbt__test_executions", "alias": "stg_dbt__test_executions", "checksum": {"name": "sha256", "checksum": "9fd97246486de3156eaa84ad6c257300dbd1f4b3705da2b92fda6e1201f47c57"}, "tags": [], "refs": [["test_executions"]], "sources": [], "metrics": [], "description": "Staging model that contains metadata about test executions. One row per test execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__test_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__test_executions.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__test_executions.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081663.0705874, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.test_executions\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        \n\n    split_part(\n        thread_id,\n        '-',\n        2\n        )\n\n as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.stg_dbt__test_executions"}, "model.dbt_artifacts.stg_dbt__seeds": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key"], "nodes": ["model.dbt_artifacts.seeds"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "staging", "stg_dbt__seeds"], "unique_id": "model.dbt_artifacts.stg_dbt__seeds", "raw_code": "with base as (\n\n    select *\n    from {{ ref('seeds') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__seeds.sql", "original_file_path": "models/staging/stg_dbt__seeds.sql", "name": "stg_dbt__seeds", "alias": "stg_dbt__seeds", "checksum": {"name": "sha256", "checksum": "c736e277d661dffd4689ebd5e8a670ffad90103b9dbcd173e54d4037b06ddfd8"}, "tags": [], "refs": [["seeds"]], "sources": [], "metrics": [], "description": "Stageing model that contains metadata about seed executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__seeds.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__seeds.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__seeds.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081663.0420532, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.seeds\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.stg_dbt__seeds"}, "model.dbt_artifacts.stg_dbt__models": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key"], "nodes": ["model.dbt_artifacts.models"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "staging", "stg_dbt__models"], "unique_id": "model.dbt_artifacts.stg_dbt__models", "raw_code": "with base as (\n\n    select *\n    from {{ ref('models') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization,\n        tags,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__models.sql", "original_file_path": "models/staging/stg_dbt__models.sql", "name": "stg_dbt__models", "alias": "stg_dbt__models", "checksum": {"name": "sha256", "checksum": "dcbd8eace8332defd857f1b6ec6be50110795b88a93a8b38ca5f050a299e7295"}, "tags": [], "refs": [["models"]], "sources": [], "metrics": [], "description": "Staging model that contains metadata about model executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__models.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__models.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__models.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081663.0485187, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.models\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization,\n        tags,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.stg_dbt__models"}, "model.dbt_artifacts.stg_dbt__sources": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key"], "nodes": ["model.dbt_artifacts.sources"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_bregenold", "fqn": ["dbt_artifacts", "staging", "stg_dbt__sources"], "unique_id": "model.dbt_artifacts.stg_dbt__sources", "raw_code": "with base as (\n\n    select *\n    from {{ ref('sources') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__sources.sql", "original_file_path": "models/staging/stg_dbt__sources.sql", "name": "stg_dbt__sources", "alias": "stg_dbt__sources", "checksum": {"name": "sha256", "checksum": "db8ba4f61865eb4d5192926653ee56f10a550377e2faf2c36257af8cc7b3c8a7"}, "tags": [], "refs": [["sources"]], "sources": [], "metrics": [], "description": "Staging model that contains data about sources. One row per node per execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "freshness": {"name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loader": {"name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_execution_id": {"name": "source_execution_id", "description": "Execution ID of the source node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__sources.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__sources.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__sources.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1674081663.0538554, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_bregenold.sources\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_bregenold.stg_dbt__sources"}, "test.dbt_tutorial.unique_my_first_dbt_model_id.16e066b321": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_tutorial.my_first_dbt_model"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_dbt_test__audit", "fqn": ["dbt_tutorial", "example", "unique_my_first_dbt_model_id"], "unique_id": "test.dbt_tutorial.unique_my_first_dbt_model_id.16e066b321", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "unique_my_first_dbt_model_id.sql", "original_file_path": "models/example/example_schema.yml", "name": "unique_my_first_dbt_model_id", "alias": "unique_my_first_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["my_first_dbt_model"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674081662.8917463, "column_name": "id", "file_key_name": "models.my_first_dbt_model"}, "test.dbt_tutorial.accepted_values_my_first_dbt_model_id__1__2__3.440a95ba04": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [1, 2, 3], "column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_tutorial.my_first_dbt_model"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_dbt_test__audit", "fqn": ["dbt_tutorial", "example", "accepted_values_my_first_dbt_model_id__1__2__3"], "unique_id": "test.dbt_tutorial.accepted_values_my_first_dbt_model_id__1__2__3.440a95ba04", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "accepted_values_my_first_dbt_model_id__1__2__3.sql", "original_file_path": "models/example/example_schema.yml", "name": "accepted_values_my_first_dbt_model_id__1__2__3", "alias": "accepted_values_my_first_dbt_model_id__1__2__3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["my_first_dbt_model"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674081662.8937137, "column_name": "id", "file_key_name": "models.my_first_dbt_model"}, "test.dbt_tutorial.unique_my_second_dbt_model_id.57a0f8c493": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_tutorial.my_second_dbt_model"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_dbt_test__audit", "fqn": ["dbt_tutorial", "example", "unique_my_second_dbt_model_id"], "unique_id": "test.dbt_tutorial.unique_my_second_dbt_model_id.57a0f8c493", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "unique_my_second_dbt_model_id.sql", "original_file_path": "models/example/example_schema.yml", "name": "unique_my_second_dbt_model_id", "alias": "unique_my_second_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["my_second_dbt_model"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674081662.9061308, "column_name": "id", "file_key_name": "models.my_second_dbt_model"}, "test.dbt_tutorial.not_null_my_second_dbt_model_id.151b76d778": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_tutorial.my_second_dbt_model"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_dbt_test__audit", "fqn": ["dbt_tutorial", "example", "not_null_my_second_dbt_model_id"], "unique_id": "test.dbt_tutorial.not_null_my_second_dbt_model_id.151b76d778", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "not_null_my_second_dbt_model_id.sql", "original_file_path": "models/example/example_schema.yml", "name": "not_null_my_second_dbt_model_id", "alias": "not_null_my_second_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["my_second_dbt_model"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674081662.9080079, "column_name": "id", "file_key_name": "models.my_second_dbt_model"}, "test.dbt_tutorial.unique_stg_jaffle_shop__customers_customer_id.231d91af86": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_jaffle_shop__customers')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_tutorial.stg_jaffle_shop__customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_dbt_test__audit", "fqn": ["dbt_tutorial", "stg", "unique_stg_jaffle_shop__customers_customer_id"], "unique_id": "test.dbt_tutorial.unique_stg_jaffle_shop__customers_customer_id.231d91af86", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "unique_stg_jaffle_shop__customers_customer_id.sql", "original_file_path": "models/stg/models.yml", "name": "unique_stg_jaffle_shop__customers_customer_id", "alias": "unique_stg_jaffle_shop__customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jaffle_shop__customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674081662.9212177, "column_name": "customer_id", "file_key_name": "models.stg_jaffle_shop__customers"}, "test.dbt_tutorial.not_null_stg_jaffle_shop__customers_customer_id.b4343d8610": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_jaffle_shop__customers')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_tutorial.stg_jaffle_shop__customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_dbt_test__audit", "fqn": ["dbt_tutorial", "stg", "not_null_stg_jaffle_shop__customers_customer_id"], "unique_id": "test.dbt_tutorial.not_null_stg_jaffle_shop__customers_customer_id.b4343d8610", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "not_null_stg_jaffle_shop__customers_customer_id.sql", "original_file_path": "models/stg/models.yml", "name": "not_null_stg_jaffle_shop__customers_customer_id", "alias": "not_null_stg_jaffle_shop__customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jaffle_shop__customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674081662.9230256, "column_name": "customer_id", "file_key_name": "models.stg_jaffle_shop__customers"}, "test.dbt_tutorial.unique_customer_distinct_orders_customer_id.e370639724": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customer_distinct_orders')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_tutorial.customer_distinct_orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_dbt_test__audit", "fqn": ["dbt_tutorial", "marts", "core", "intermediate", "unique_customer_distinct_orders_customer_id"], "unique_id": "test.dbt_tutorial.unique_customer_distinct_orders_customer_id.e370639724", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "unique_customer_distinct_orders_customer_id.sql", "original_file_path": "models/marts/core/intermediate/intermediate.yml", "name": "unique_customer_distinct_orders_customer_id", "alias": "unique_customer_distinct_orders_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["customer_distinct_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674081662.9262092, "column_name": "customer_id", "file_key_name": "models.customer_distinct_orders"}, "test.dbt_tutorial.not_null_customer_distinct_orders_customer_id.cd4437fce8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customer_distinct_orders')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_tutorial.customer_distinct_orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_bregenold_dbt_test__audit", "fqn": ["dbt_tutorial", "marts", "core", "intermediate", "not_null_customer_distinct_orders_customer_id"], "unique_id": "test.dbt_tutorial.not_null_customer_distinct_orders_customer_id.cd4437fce8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "not_null_customer_distinct_orders_customer_id.sql", "original_file_path": "models/marts/core/intermediate/intermediate.yml", "name": "not_null_customer_distinct_orders_customer_id", "alias": "not_null_customer_distinct_orders_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["customer_distinct_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674081662.9279892, "column_name": "customer_id", "file_key_name": "models.customer_distinct_orders"}}, "sources": {"source.dbt_tutorial.jaffle_shop.orders": {"fqn": ["dbt_tutorial", "stg", "jaffle_shop", "orders"], "database": "development", "schema": "jaffle_shop", "unique_id": "source.dbt_tutorial.jaffle_shop.orders", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "models/stg/src_jaffle_shop.yml", "original_file_path": "models/stg/src_jaffle_shop.yml", "name": "orders", "source_name": "jaffle_shop", "source_description": "", "loader": "", "identifier": "orders", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_etl_loaded_at", "freshness": {"warn_after": {"count": 6, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "development.jaffle_shop.orders", "created_at": 1674081663.0709667}, "source.dbt_tutorial.jaffle_shop.customers": {"fqn": ["dbt_tutorial", "stg", "jaffle_shop", "customers"], "database": "development", "schema": "jaffle_shop", "unique_id": "source.dbt_tutorial.jaffle_shop.customers", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "models/stg/src_jaffle_shop.yml", "original_file_path": "models/stg/src_jaffle_shop.yml", "name": "customers", "source_name": "jaffle_shop", "source_description": "", "loader": "", "identifier": "customers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "development.jaffle_shop.customers", "created_at": 1674081663.0711384}}, "macros": {"macro.dbt_tutorial.drop_target_schema_if_exists": {"unique_id": "macro.dbt_tutorial.drop_target_schema_if_exists", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "macros/drop_schema_if_exists.sql", "original_file_path": "macros/drop_schema_if_exists.sql", "name": "drop_target_schema_if_exists", "macro_sql": "{% macro drop_target_schema_if_exists() %}\n\n\t{{ log('Preparing to drop schema: ' ~ target.schema , True) }}\n\n\t{# replace the database below with your database name #}\n\t{% set drop_statement = 'drop schema if exists development.' ~ target.schema %}\n\t\n\t{% if execute %}\n\t\t{% do run_query(drop_statement) %}\n    {{ log('Schema dropped successfully' , True) }}\t\t\n\t{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1231918, "supported_languages": null}, "macro.dbt_tutorial.any_value": {"unique_id": "macro.dbt_tutorial.any_value", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "macros/any_value.sql", "original_file_path": "macros/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value() -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') ()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_tutorial.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.12396, "supported_languages": null}, "macro.dbt_tutorial.default__any_value": {"unique_id": "macro.dbt_tutorial.default__any_value", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "macros/any_value.sql", "original_file_path": "macros/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value() -%}\n    \n   {{ log('This came from my project', True) }}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1242542, "supported_languages": null}, "macro.dbt_tutorial.compiled_sql": {"unique_id": "macro.dbt_tutorial.compiled_sql", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "macros/compiled_sql.sql", "original_file_path": "macros/compiled_sql.sql", "name": "compiled_sql", "macro_sql": "{% macro compiled_sql() %}\n\n{% if execute %}\n    {% for node in graph.nodes.values()\n        | selectattr(\"resource_type\", \"equalto\", \"model\") %}\n        \n        {% set node_name = node.unique_id %}\n        {% set raw_sql = node.raw_code %}\n        {{ log(node_name~': '~raw_sql, True) }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.125701, "supported_languages": null}, "macro.dbt_tutorial.return_value": {"unique_id": "macro.dbt_tutorial.return_value", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "macros/return_value.sql", "original_file_path": "macros/return_value.sql", "name": "return_value", "macro_sql": "{% macro return_value(mat) %}\n    \n    {% if execute %}\n\n        {#\n        {% set qry = 'select \\'table\\' as return_col' %}\n        {% set qry_results = run_query(qry) %}\n        {% set return_column = qry_results.columns[0].values() %}\n        {{ log('Log: ' ~ return_column[0], True) }}\n\n        {{ return(return_column[0]) }}\n        #}\n\n       {% set mat_dict = {1: 'table', 2: 'view'} %}\n       {{ log('Log: '~ mat_dict[mat], True) }}\n       {{ return(mat_dict[mat]) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1268868, "supported_languages": null}, "macro.dbt_tutorial.test_run": {"unique_id": "macro.dbt_tutorial.test_run", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "macros/query_test.sql", "original_file_path": "macros/query_test.sql", "name": "test_run", "macro_sql": "{% macro test_run() %}\n\n    {# Provide a list of commands to run #}\n    {% set statements_to_run_list = [\n        'create table development.dbt_bregenold.test1 (id int)', \n        'create table development.dbt_bregenold.test2 (id int)'\n        ] \n    %}\n\n    {# Join each list element into a string, and separate them with a semi-colon #}\n    {% set statements_to_run %}\n    {{ statements_to_run_list|join(';') }}\n    {% endset %}\n\n    {{ dbt_utils.log_info(\"Statements to run: \" ~ statements_to_run) }}\n\n    {# Run the commands #}\n    {% if execute %}\n    {{ run_query(statements_to_run) }}\n    {{ dbt_utils.log_info(\"Commands executed.\") }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1283011, "supported_languages": null}, "macro.dbt_tutorial.get_max_processed_date": {"unique_id": "macro.dbt_tutorial.get_max_processed_date", "package_name": "dbt_tutorial", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727", "path": "macros/get_max_processed_date.sql", "original_file_path": "macros/get_max_processed_date.sql", "name": "get_max_processed_date", "macro_sql": "{% macro get_max_processed_date(audit_date_column, audit_table_name) %}\n\n    {% set timestamp_query %}\n        select max({{ audit_date_column }})\n        from {{ target.database }}.{{ target.schema }}.{{ audit_table_name }}\n    {% endset %}\n\n    {% set timestamp_results = run_query(timestamp_query) %}\n\n    {% if execute %}\n\n        {% set process_ts = timestamp_results.columns[0].values()[0] %}\n        {{ log('Running with a max process timestamp of: '~process_ts, True) }}\n\n        {{ return(process_ts) }}\n\n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1300898, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1308458, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.131108, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1328654, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from(\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1545424, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1561952, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1568294, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1583986, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1601198, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1613288, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1624238, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1631384, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.163577, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1641247, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1645648, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.165749, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.166154, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1665125, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1675339, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1679406, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1690094, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1706605, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.171161, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1716938, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1760542, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1767285, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n\n  /* {#\n       If we are running multiple statements (DELETE + INSERT),\n       we must first save the model query results as a temporary table\n       in order to guarantee consistent inputs to both statements.\n\n       If we are running a single statement (MERGE or INSERT alone),\n       we can save the model query definition as a view instead,\n       for faster overall incremental processing.\n  #} */\n\n  {% if language == 'sql' and (strategy in ('default', 'append', 'merge') or (unique_key is none)) %}\n    {{ return('view') }}\n  {% else %}  {#--  play it safe -- #}\n    {{ return('table') }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1794999, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ create_view_as(tmp_relation, compiled_code) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_view_as", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1863203, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1867054, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1876962, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.188589, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1909878, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1916022, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.192152, "supported_languages": null}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1967752, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"unique_id": "macro.dbt_snowflake.py_write_table", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    df.write.mode(\"overwrite\").save_as_table(\"{{ target_relation }}\", create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1972532, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"unique_id": "macro.dbt_snowflake.py_script_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1975365, "supported_languages": null}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1988032, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1993663, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.1998658, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"unique_id": "macro.dbt_snowflake.snowflake__array_construct", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2003818, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2010736, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2014704, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2017176, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2019556, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.202253, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.20296, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2034097, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.206533, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.207827, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2084782, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2116098, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2141795, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2157674, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2162833, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.219294, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.219567, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2199314, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2201838, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2209532, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2213633, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2216022, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2220795, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2224958, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.222993, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2234952, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2240193, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2254653, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2260294, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2265937, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2270994, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2295504, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.230529, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.231438, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2343497, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2347064, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2353854, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2357895, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.236505, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2370217, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2382617, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2388906, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2405362, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2416098, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.24194, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.242254, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.242494, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.242867, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2430472, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.243408, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2438624, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2491543, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2496872, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.25016, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2507763, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2513142, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2519984, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2524002, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2528942, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2532942, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2536566, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.25417, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2547843, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2553263, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2564862, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2570083, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2573307, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.257758, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2586315, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2591333, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2595081, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.25992, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2613344, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2617137, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2621489, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.262519, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2632596, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2643545, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2669392, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2675102, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2679117, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2682629, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2686539, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2692952, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2697587, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2704139, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.270822, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2711935, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2722082, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2725213, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2728977, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2737665, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2747607, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2753348, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.276433, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2770333, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.277647, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.278516, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2791858, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.281877, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2828825, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2838593, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.284814, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.285002, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2872183, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2876587, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2879817, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2883, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2886157, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2894952, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2902367, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2909122, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.2974386, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3048785, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3068516, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3073695, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3084052, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3088498, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.309153, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.309462, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.309725, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3100712, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3104029, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3114395, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3118448, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3144076, "supported_languages": null}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3191128, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3201237, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3209062, "supported_languages": null}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3217793, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3226037, "supported_languages": null}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3233523, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3238282, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3269813, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3278482, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3282084, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3285987, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.329189, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.334304, "supported_languages": ["sql"]}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3360894, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3366127, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.337046, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.337609, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3380163, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3385751, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3389919, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3395534, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3399608, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3402984, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3409097, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.343839, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3450246, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.346512, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3470445, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3485494, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3582826, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3667397, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.369367, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3718772, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.373787, "supported_languages": null}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.375211, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3820348, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3853881, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.38591, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3875475, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3881314, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3895006, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3905876, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3910017, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3919094, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3928916, "supported_languages": null}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.3979907, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4041307, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4045143, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.405033, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4065218, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4068995, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4072835, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4102426, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.413141, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4141152, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4146967, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4254684, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4314785, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4320984, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4324677, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4326751, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.433023, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4332907, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4338071, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.435623, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.436036, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.436572, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4374993, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.438273, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4391687, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.439818, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4411013, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4417207, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4419026, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4426188, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4429379, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4436235, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4440176, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4449208, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4452465, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4461412, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.446676, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4473436, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4477017, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4485126, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.448902, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.449681, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4499664, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4506323, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4508908, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_tutorial.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.451547, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4517906, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4536605, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4539995, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.45448, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4548204, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.455195, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4555233, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4558702, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4563913, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4567733, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4571095, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.457462, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4577816, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4581363, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4584558, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4591763, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4596007, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4603515, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4606614, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4614055, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4617078, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4625206, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4631016, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4634275, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4645786, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4649785, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.465458, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4661682, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4664638, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4671254, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4673717, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4681706, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4685433, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4691813, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4693668, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4701006, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4703448, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4711597, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4715266, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4723415, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4727318, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.473999, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4749773, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4760766, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.476578, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.477207, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.477787, "supported_languages": null}, "macro.re_data.bigquery__split_and_return_nth_value": {"unique_id": "macro.re_data.bigquery__split_and_return_nth_value", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/bigquery/split_and_return_nth_value.sql", "original_file_path": "macros/db/bigquery/split_and_return_nth_value.sql", "name": "bigquery__split_and_return_nth_value", "macro_sql": "{% macro bigquery__split_and_return_nth_value(column_name, delimiter, ordinal) %}\n    split({{ re_data.clean_blacklist(column_name, ['\"', '`'], '') }}, '{{ delimiter }}')[ORDINAL( {{ ordinal }} )]\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.clean_blacklist"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.478571, "supported_languages": null}, "macro.re_data.bigquery__quote_string": {"unique_id": "macro.re_data.bigquery__quote_string", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/bigquery/quote_string.sql", "original_file_path": "macros/db/bigquery/quote_string.sql", "name": "bigquery__quote_string", "macro_sql": "{%- macro bigquery__quote_string(str) %}\n    r\"\"\"{{ str }}\"\"\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4790204, "supported_languages": null}, "macro.re_data.bigquery__quote_column_name": {"unique_id": "macro.re_data.bigquery__quote_column_name", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/bigquery/quote_column_name.sql", "original_file_path": "macros/db/bigquery/quote_column_name.sql", "name": "bigquery__quote_column_name", "macro_sql": "{% macro bigquery__quote_column_name(column_name) %}\n    {% set quoted_col_name = '`' + column_name + '`' %}\n    {{ return(quoted_col_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4796665, "supported_languages": null}, "macro.re_data.snowflake__name_in_db": {"unique_id": "macro.re_data.snowflake__name_in_db", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/snowflake/identifier_mapping.sql", "original_file_path": "macros/db/snowflake/identifier_mapping.sql", "name": "snowflake__name_in_db", "macro_sql": "{% macro snowflake__name_in_db(name) %}\n    {% if name %}\n        {{ return (name.upper()) }}\n    {% else %}\n        {{ return (name) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4805553, "supported_languages": null}, "macro.re_data.redshift__quote_new_line": {"unique_id": "macro.re_data.redshift__quote_new_line", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/redshift/quote_string.sql", "original_file_path": "macros/db/redshift/quote_string.sql", "name": "redshift__quote_new_line", "macro_sql": "{%- macro redshift__quote_new_line() %}'\\134\\134n'{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4809537, "supported_languages": null}, "macro.re_data.redshift__escape_seq_for_json": {"unique_id": "macro.re_data.redshift__escape_seq_for_json", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/redshift/escape.sql", "original_file_path": "macros/db/redshift/escape.sql", "name": "redshift__escape_seq_for_json", "macro_sql": "{% macro redshift__escape_seq_for_json(chr) %}'\\\\\\{{chr}}'{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4813755, "supported_languages": null}, "macro.re_data.split_and_return_nth_value": {"unique_id": "macro.re_data.split_and_return_nth_value", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/core/split_and_return_nth_value.sql", "original_file_path": "macros/db/core/split_and_return_nth_value.sql", "name": "split_and_return_nth_value", "macro_sql": "{% macro split_and_return_nth_value(column_name, delimiter, ordinal) -%}\n    {{ adapter.dispatch('split_and_return_nth_value', 're_data')(column_name, delimiter, ordinal) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__split_and_return_nth_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.482253, "supported_languages": null}, "macro.re_data.default__split_and_return_nth_value": {"unique_id": "macro.re_data.default__split_and_return_nth_value", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/core/split_and_return_nth_value.sql", "original_file_path": "macros/db/core/split_and_return_nth_value.sql", "name": "default__split_and_return_nth_value", "macro_sql": "{% macro default__split_and_return_nth_value(column_name, delimiter, ordinal) -%}\n    split_part({{ re_data.clean_blacklist(column_name, ['\"', '`'], '') }}, '{{ delimiter }}', {{ ordinal }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.clean_blacklist"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4827812, "supported_languages": null}, "macro.re_data.name_in_db": {"unique_id": "macro.re_data.name_in_db", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/core/identifier_mapping.sql", "original_file_path": "macros/db/core/identifier_mapping.sql", "name": "name_in_db", "macro_sql": "{% macro name_in_db(name) %}\n    {% set translated = adapter.dispatch('name_in_db', 're_data')(name) %}\n    {{ return(translated) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__name_in_db"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.483559, "supported_languages": null}, "macro.re_data.default__name_in_db": {"unique_id": "macro.re_data.default__name_in_db", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/core/identifier_mapping.sql", "original_file_path": "macros/db/core/identifier_mapping.sql", "name": "default__name_in_db", "macro_sql": "{% macro default__name_in_db(name) %}\n    {{ return(name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.483842, "supported_languages": null}, "macro.re_data.quote_string": {"unique_id": "macro.re_data.quote_string", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/core/quote_string.sql", "original_file_path": "macros/db/core/quote_string.sql", "name": "quote_string", "macro_sql": "{%- macro quote_string(str) %}\n    {{ adapter.dispatch('quote_string', 're_data')(str) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__quote_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4845595, "supported_languages": null}, "macro.re_data.default__quote_string": {"unique_id": "macro.re_data.default__quote_string", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/core/quote_string.sql", "original_file_path": "macros/db/core/quote_string.sql", "name": "default__quote_string", "macro_sql": "\n\n{%- macro default__quote_string(str) %}\n    $${{ str }}$$\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4848235, "supported_languages": null}, "macro.re_data.quote_new_line": {"unique_id": "macro.re_data.quote_new_line", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/core/quote_string.sql", "original_file_path": "macros/db/core/quote_string.sql", "name": "quote_new_line", "macro_sql": "\n\n\n{%- macro quote_new_line() %}{{ adapter.dispatch('quote_new_line', 're_data')() }}{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__quote_new_line"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.485216, "supported_languages": null}, "macro.re_data.default__quote_new_line": {"unique_id": "macro.re_data.default__quote_new_line", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/core/quote_string.sql", "original_file_path": "macros/db/core/quote_string.sql", "name": "default__quote_new_line", "macro_sql": "\n\n{%- macro default__quote_new_line() %}'\\134\\134n'{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4853995, "supported_languages": null}, "macro.re_data.quote_column_name": {"unique_id": "macro.re_data.quote_column_name", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/core/quote_column_name.sql", "original_file_path": "macros/db/core/quote_column_name.sql", "name": "quote_column_name", "macro_sql": "{% macro quote_column_name(column_name) %}\n    {% set col_name = adapter.dispatch('quote_column_name', 're_data')(column_name) %}\n    {{ return(col_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__quote_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4862077, "supported_languages": null}, "macro.re_data.default__quote_column_name": {"unique_id": "macro.re_data.default__quote_column_name", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/core/quote_column_name.sql", "original_file_path": "macros/db/core/quote_column_name.sql", "name": "default__quote_column_name", "macro_sql": "{% macro default__quote_column_name(column_name) %}\n    {% set quoted_col_name = '\"' + column_name + '\"' %}\n    {{ return(quoted_col_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.486637, "supported_languages": null}, "macro.re_data.escape_seq_for_json": {"unique_id": "macro.re_data.escape_seq_for_json", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/core/escape.sql", "original_file_path": "macros/db/core/escape.sql", "name": "escape_seq_for_json", "macro_sql": "{% macro escape_seq_for_json(chr) %}{{adapter.dispatch('escape_seq_for_json', 're_data')(chr)}}{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__escape_seq_for_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.48725, "supported_languages": null}, "macro.re_data.default__escape_seq_for_json": {"unique_id": "macro.re_data.default__escape_seq_for_json", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/core/escape.sql", "original_file_path": "macros/db/core/escape.sql", "name": "default__escape_seq_for_json", "macro_sql": "{% macro default__escape_seq_for_json(chr) %}'\\\\\\{{chr}}'{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4874842, "supported_languages": null}, "macro.re_data.postgres__quote_new_line": {"unique_id": "macro.re_data.postgres__quote_new_line", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/postgres/quote_string.sql", "original_file_path": "macros/db/postgres/quote_string.sql", "name": "postgres__quote_new_line", "macro_sql": "{%- macro postgres__quote_new_line() %}'\\\\n'{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4878418, "supported_languages": null}, "macro.re_data.postgres_type_db": {"unique_id": "macro.re_data.postgres_type_db", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/postgres/postgres_type_db.sql", "original_file_path": "macros/db/postgres/postgres_type_db.sql", "name": "postgres_type_db", "macro_sql": "{% macro postgres_type_db() %}\n    {{ ('postgres', 'greenplum') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4883208, "supported_languages": null}, "macro.re_data.postgres__escape_seq_for_json": {"unique_id": "macro.re_data.postgres__escape_seq_for_json", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/db/postgres/escape.sql", "original_file_path": "macros/db/postgres/escape.sql", "name": "postgres__escape_seq_for_json", "macro_sql": "{% macro postgres__escape_seq_for_json(chr) %}'\\{{chr}}'{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.488763, "supported_languages": null}, "macro.re_data.get_model_config": {"unique_id": "macro.re_data.get_model_config", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/config/get_model_config.sql", "original_file_path": "macros/config/get_model_config.sql", "name": "get_model_config", "macro_sql": "{% macro get_model_config(monitored) %}\n    {% set model = {} %}\n    {% do model.update({'name': re_data.row_value(monitored, 'name')}) %}\n    {% do model.update({'schema': re_data.row_value(monitored, 'schema')}) %}\n    {% do model.update({'database': re_data.row_value(monitored, 'database')}) %}\n    {% do model.update({'time_filter': re_data.row_value(monitored, 'time_filter')}) %}    \n    {% do model.update({'metrics': fromjson(re_data.row_value(monitored, 'metrics'))}) %}\n    {% do model.update({'model_name': model.get('database') + '.' + model.get('schema') + '.' + model.get('name')}) %}\n    {% do model.update({'table_name': full_table_name_values(model.get('name'), model.get('schema'), model.get('database'))}) %}\n\n    {% set columns_db = re_data.row_value(monitored, 'columns') %}\n\n    {% set column_list = fromjson(columns_db) if columns_db is not none else none %}\n    {% set columns_dict = re_data.dict_from_list(column_list) %}\n\n    {% do model.update({'columns_dict': columns_dict}) %}\n    {% do model.update({'columns_compute_all': columns_dict is none}) %}\n\n    {% set columns_query %}\n        select * from {{ ref('re_data_columns') }}\n        where name = '{{ model.name }}' and schema = '{{ model.schema }}' and database = '{{ model.database }}'\n    {% endset %}\n    {% set columns = run_query(columns_query) %}\n\n    {% set columns_info = {} %}\n    {% for col in columns %}\n        {% set column_name = re_data.row_value(col, 'column_name') %}\n        {% set data_type = re_data.get_column_type(col) %}\n        {% do columns_info.update({column_name: { 'data_type': data_type }}) %}\n    {% endfor %}\n\n    {% do model.update({'columns_info': columns_info}) %}\n    {% do model.update({'columns': columns}) %}\n\n    {{ return(model) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.row_value", "macro.re_data.full_table_name_values", "macro.re_data.dict_from_list", "macro.dbt.run_query", "macro.re_data.get_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4953632, "supported_languages": null}, "macro.re_data.should_compute_metric": {"unique_id": "macro.re_data.should_compute_metric", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/config/get_model_config.sql", "original_file_path": "macros/config/get_model_config.sql", "name": "should_compute_metric", "macro_sql": "{% macro should_compute_metric(model, column_name) %}\n    {{ return(model.columns_compute_all or model.columns_dict.get(column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4958332, "supported_languages": null}, "macro.re_data.pub_insert_into_re_data_monitored": {"unique_id": "macro.re_data.pub_insert_into_re_data_monitored", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/post_hook/re_data_monitored.sql", "original_file_path": "macros/post_hook/re_data_monitored.sql", "name": "pub_insert_into_re_data_monitored", "macro_sql": "{% macro pub_insert_into_re_data_monitored() %}\n    {% set monitored = re_data.pub_monitored_from_graph() %}\n    {% do re_data.insert_list_to_table(\n        this,\n        monitored,\n        ['name', 'schema', 'database', 'time_filter', 'metrics_groups', 'additional_metrics', 'metrics', 'columns', 'anomaly_detector', 'owners', 'selected']\n    ) %}\n\n    {{ return('') }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.pub_monitored_from_graph", "macro.re_data.insert_list_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.4970434, "supported_languages": null}, "macro.re_data.get_column_type": {"unique_id": "macro.re_data.get_column_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/column_types.sql", "original_file_path": "macros/utils/column_types.sql", "name": "get_column_type", "macro_sql": "{% macro get_column_type(column) %}\n    {% set result = adapter.dispatch('get_column_type', 're_data')(column) %}\n    {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__get_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.499259, "supported_languages": null}, "macro.re_data.default__get_column_type": {"unique_id": "macro.re_data.default__get_column_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/column_types.sql", "original_file_path": "macros/utils/column_types.sql", "name": "default__get_column_type", "macro_sql": "{% macro default__get_column_type(column) %}\n    \n    {% if column.data_type in [\n        'character varying',\n        'varchar',\n        'character',\n        'char',\n        'text'\n    ] %}\n        {{ return('text') }}\n\n    {% elif column.data_type in [\n            'smallint',\n            'integer',\n            'bigint',\n            'decimal',\n            'numeric',\n            'real',\n            'double precision',\n            'enum',\n        ] %}\n        {{ return('numeric') }}\n\n    {% else %}\n        {{ return('unknown') }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5003514, "supported_languages": null}, "macro.re_data.snowflake__get_column_type": {"unique_id": "macro.re_data.snowflake__get_column_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/column_types.sql", "original_file_path": "macros/utils/column_types.sql", "name": "snowflake__get_column_type", "macro_sql": "{% macro snowflake__get_column_type(column) %}\n\n    {% if column.DATA_TYPE in [\n        'VARCHAR',\n        'CHAR',\n        'CHARACTER',\n        'STRING',\n        'TEXT'\n    ] %}\n\n        {{ return('text') }}\n\n    {% elif column.DATA_TYPE in [\n            'NUMBER',\n            'DECIMAL',\n            'NUMERIC',\n            'INT',\n            'INTEGER',\n            'BIGINT',\n            'SMALLINT',\n            'TINYINT',\n            'BYTEINT',\n            'FLOAT',\n            'FLOAT4',\n            'FLOAT8',\n            'DOUBLE',\n            'DOUBLE PRECISION',\n            'REAL',\n    ] %}\n\n        {{ return('numeric') }}\n\n    {% else %}\n\n        {{ return('unknown') }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.501723, "supported_languages": null}, "macro.re_data.bigquery__get_column_type": {"unique_id": "macro.re_data.bigquery__get_column_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/column_types.sql", "original_file_path": "macros/utils/column_types.sql", "name": "bigquery__get_column_type", "macro_sql": "{% macro bigquery__get_column_type(column) %}\n    \n    {% if column.data_type in [\n        'STRING'\n    ] %}\n\n        {{ return('text') }}\n\n    {% elif column.data_type in [\n        \"INT64\", \"NUMERIC\", \"BIGNUMERIC\", \"FLOAT64\", \"INTEGER\"]\n    %}\n\n        {{ return('numeric') }}\n\n    {% else %}\n    \n        {{ return('unknown') }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5026457, "supported_languages": null}, "macro.re_data.dict_from_list": {"unique_id": "macro.re_data.dict_from_list", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/dict_from_list.sql", "original_file_path": "macros/utils/dict_from_list.sql", "name": "dict_from_list", "macro_sql": "{% macro dict_from_list(el_list) %}\n\n    {% if el_list is none %}\n        {{ return (none) }}\n    {% endif %}\n\n    {% set for_cols_dict = {} %}\n    {% for col in el_list %}\n        {% do for_cols_dict.update({col: True})%}\n    {% endfor %}\n    {% do return(for_cols_dict) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.503895, "supported_languages": null}, "macro.re_data.columns_in_db": {"unique_id": "macro.re_data.columns_in_db", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/monitored_config.sql", "original_file_path": "macros/utils/monitored_config.sql", "name": "columns_in_db", "macro_sql": "{% macro columns_in_db(columns) %}\n    {% set translated = [] %}\n    {% if columns is none %}\n        {{ return (none) }}\n    {% endif %}\n    {% for col in columns %}\n        {% do translated.append(re_data.name_in_db(col))%}\n    {% endfor %}\n    {{ return (translated) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.name_in_db"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5060341, "supported_languages": null}, "macro.re_data.metrics_in_db": {"unique_id": "macro.re_data.metrics_in_db", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/monitored_config.sql", "original_file_path": "macros/utils/monitored_config.sql", "name": "metrics_in_db", "macro_sql": "{% macro metrics_in_db(metrics) %}\n    {% set translated = metrics %}\n    {% set column_metrics = {} %}\n    {% for col in metrics.column %}\n        {% do column_metrics.update({re_data.name_in_db(col): metrics.column[col]}) %}\n    {% endfor %}\n    {% if column_metrics %}\n        {% do metrics.update({'column': column_metrics}) %}\n    {% endif %}\n    {{ return (metrics) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.name_in_db"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5071929, "supported_languages": null}, "macro.re_data.final_metrics": {"unique_id": "macro.re_data.final_metrics", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/monitored_config.sql", "original_file_path": "macros/utils/monitored_config.sql", "name": "final_metrics", "macro_sql": "{% macro final_metrics(metrics_groups, additional_metrics) %}\n    {% set final_metrics_dict = dict([('group', {}), ('additional', {})]) %}\n    {% set all_metrics_groups = var('re_data:metrics_groups')%}\n\n    {% for group in metrics_groups %}\n        {% set value = all_metrics_groups.get(group) %}\n        {% do final_metrics_dict['group'].update(value) %}\n    {% endfor %}\n\n    {% do final_metrics_dict['additional'].update(additional_metrics) %}\n    {{ return (final_metrics_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.508484, "supported_languages": null}, "macro.re_data.generate_anomaly_message": {"unique_id": "macro.re_data.generate_anomaly_message", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/generate_alert_message.sql", "original_file_path": "macros/utils/generate_alert_message.sql", "name": "generate_anomaly_message", "macro_sql": "{% macro generate_anomaly_message(column_name, metric, last_value, last_avg) %}\n\n    case when {{ column_name }} != '' then metric || '(' || column_name || ')'\n    else metric\n    end \n    || ' is ' ||\n    {{ to_2dp( percentage_formula('last_value - last_avg', last_avg) ) }}\n    || '% ' ||\n    {{ comparison_text(last_value, last_avg) }}\n    || ' average.'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.to_2dp", "macro.re_data.percentage_formula", "macro.re_data.comparison_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5118153, "supported_languages": null}, "macro.re_data.to_2dp": {"unique_id": "macro.re_data.to_2dp", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/generate_alert_message.sql", "original_file_path": "macros/utils/generate_alert_message.sql", "name": "to_2dp", "macro_sql": "{% macro to_2dp(val) %}\n    {{ adapter.dispatch('to_2dp', 're_data')(val) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__to_2dp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.512183, "supported_languages": null}, "macro.re_data.default__to_2dp": {"unique_id": "macro.re_data.default__to_2dp", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/generate_alert_message.sql", "original_file_path": "macros/utils/generate_alert_message.sql", "name": "default__to_2dp", "macro_sql": "{% macro default__to_2dp(val) %}\n    trim(to_char({{ val }}, '9999999999999999990D00'))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5124192, "supported_languages": null}, "macro.re_data.bigquery__to_2dp": {"unique_id": "macro.re_data.bigquery__to_2dp", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/generate_alert_message.sql", "original_file_path": "macros/utils/generate_alert_message.sql", "name": "bigquery__to_2dp", "macro_sql": "{% macro bigquery__to_2dp(val) %}\n    format('%.2f', {{ val }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5126476, "supported_languages": null}, "macro.re_data.seconds_to_hours": {"unique_id": "macro.re_data.seconds_to_hours", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/generate_alert_message.sql", "original_file_path": "macros/utils/generate_alert_message.sql", "name": "seconds_to_hours", "macro_sql": "{% macro seconds_to_hours(val) %}\n    cast({{ val }} as {{ numeric_type() }}) / 3600\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.numeric_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5129623, "supported_languages": null}, "macro.re_data.generate_metric_value_text": {"unique_id": "macro.re_data.generate_metric_value_text", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/generate_alert_message.sql", "original_file_path": "macros/utils/generate_alert_message.sql", "name": "generate_metric_value_text", "macro_sql": "{% macro generate_metric_value_text(metric, value) %}\n    case \n        when {{ metric }} = 'freshness' \n            then cast({{ to_2dp(seconds_to_hours(value)) }} as {{ string_type() }}) || ' hours'\n        when {{ regex_match_expression(metric, 'percent') }} \n            then cast({{ to_2dp(value) }} as {{ string_type() }}) || '%'\n        when {{ regex_match_expression(metric, 'count') }} \n            then cast({{ value }} as {{ string_type() }})\n        else cast({{ to_2dp(value) }} as {{ string_type() }})\n    end\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.to_2dp", "macro.re_data.seconds_to_hours", "macro.re_data.string_type", "macro.re_data.regex_match_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5139763, "supported_languages": null}, "macro.re_data.generate_schema_change_message": {"unique_id": "macro.re_data.generate_schema_change_message", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/generate_alert_message.sql", "original_file_path": "macros/utils/generate_alert_message.sql", "name": "generate_schema_change_message", "macro_sql": "{% macro generate_schema_change_message(operation, column_name, prev_column_name, prev_data_type, data_type, detected_time) %}\n    case \n        when {{ operation }} = 'column_added'\n            then 'column ' || {{ column_name }} || ' of type ' || {{ data_type }} || ' was added.'\n        when {{ operation }} = 'column_removed'\n            then 'column ' || {{ prev_column_name }} || ' of type ' || {{ prev_data_type }} || ' was removed.'\n        when {{ operation }} = 'type_change'\n            then {{ column_name }} || ' column data type was changed from ' || {{ prev_data_type }} || ' to ' || {{ data_type }} || '.'\n        else ''\n    end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5146878, "supported_languages": null}, "macro.re_data.generate_failed_test_message": {"unique_id": "macro.re_data.generate_failed_test_message", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/generate_alert_message.sql", "original_file_path": "macros/utils/generate_alert_message.sql", "name": "generate_failed_test_message", "macro_sql": "{% macro generate_failed_test_message(test_name, column_name) %}\n    case \n        when {{ column_name }} is null\n            then 'Test ' || {{ test_name }} || ' failed.'\n        else\n            'Test ' || {{ test_name }} || ' failed for column ' || {{ column_name }} || '.'\n    end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5150828, "supported_languages": null}, "macro.re_data.quote_column": {"unique_id": "macro.re_data.quote_column", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/quote.sql", "original_file_path": "macros/utils/quote.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(col_name) %}\n    {{ adapter.dispatch('quote_column', 're_data')(col_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5157619, "supported_languages": null}, "macro.re_data.default__quote_column": {"unique_id": "macro.re_data.default__quote_column", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/quote.sql", "original_file_path": "macros/utils/quote.sql", "name": "default__quote_column", "macro_sql": "{% macro default__quote_column(col_name) %}\n    \"{{ col_name }}\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5160818, "supported_languages": null}, "macro.re_data.bigquery__quote_column": {"unique_id": "macro.re_data.bigquery__quote_column", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/quote.sql", "original_file_path": "macros/utils/quote.sql", "name": "bigquery__quote_column", "macro_sql": "{% macro bigquery__quote_column(col_name) %}\n    `{{ col_name }}`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5163138, "supported_languages": null}, "macro.re_data.generate_depends": {"unique_id": "macro.re_data.generate_depends", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/depends_macro.sql", "original_file_path": "macros/utils/depends_macro.sql", "name": "generate_depends", "macro_sql": "{% macro generate_depends(used_tables) %}\n    {% for t in used_tables %}\n        -- depends_on: {{ ref(t) }}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5169866, "supported_languages": null}, "macro.re_data.get_target_database": {"unique_id": "macro.re_data.get_target_database", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/get_database.sql", "original_file_path": "macros/utils/get_database.sql", "name": "get_target_database", "macro_sql": "{% macro get_target_database() %}\n    {{- adapter.dispatch('get_target_database', 're_data')() -}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__get_target_database"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5178037, "supported_languages": null}, "macro.re_data.default__get_target_database": {"unique_id": "macro.re_data.default__get_target_database", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/get_database.sql", "original_file_path": "macros/utils/get_database.sql", "name": "default__get_target_database", "macro_sql": "{% macro default__get_target_database() %}\n    {{- return (target.dbname) -}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5180857, "supported_languages": null}, "macro.re_data.bigquery__get_target_database": {"unique_id": "macro.re_data.bigquery__get_target_database", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/get_database.sql", "original_file_path": "macros/utils/get_database.sql", "name": "bigquery__get_target_database", "macro_sql": "{% macro bigquery__get_target_database() %}\n    {{- return (target.project) -}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.518348, "supported_languages": null}, "macro.re_data.snowflake__get_target_database": {"unique_id": "macro.re_data.snowflake__get_target_database", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/get_database.sql", "original_file_path": "macros/utils/get_database.sql", "name": "snowflake__get_target_database", "macro_sql": "{% macro snowflake__get_target_database() %}\n    {{- return (target.database) -}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.518607, "supported_languages": null}, "macro.re_data.bool_to_string": {"unique_id": "macro.re_data.bool_to_string", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/bool_to_string.sql", "original_file_path": "macros/utils/bool_to_string.sql", "name": "bool_to_string", "macro_sql": "{% macro bool_to_string(column) %}\n    (\n    case when {{ column }} = true then 'true'\n         when {{ column }} = false then 'false'\n    end\n    ) as {{ column }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5191858, "supported_languages": null}, "macro.re_data.comma_delimited_list": {"unique_id": "macro.re_data.comma_delimited_list", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/comma_delimited_list.sql", "original_file_path": "macros/utils/comma_delimited_list.sql", "name": "comma_delimited_list", "macro_sql": "{% macro comma_delimited_list(args) %}\n    {%- for arg in args %} \n        {{- arg -}} {{- \", \" if not loop.last else \"\" -}}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5199142, "supported_languages": null}, "macro.re_data.time_window_start": {"unique_id": "macro.re_data.time_window_start", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "time_window_start", "macro_sql": "{% macro time_window_start() %}\n    cast('{{- var('re_data:time_window_start') -}}' as timestamp) \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5233846, "supported_languages": null}, "macro.re_data.time_window_end": {"unique_id": "macro.re_data.time_window_end", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "time_window_end", "macro_sql": "{% macro time_window_end() %}\n    cast('{{- var('re_data:time_window_end') -}}' as timestamp)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5236583, "supported_languages": null}, "macro.re_data.anamaly_detection_time_window_start": {"unique_id": "macro.re_data.anamaly_detection_time_window_start", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "anamaly_detection_time_window_start", "macro_sql": "{% macro anamaly_detection_time_window_start() %}\n   {{ adapter.dispatch('anamaly_detection_time_window_start', 're_data')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__anamaly_detection_time_window_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5239844, "supported_languages": null}, "macro.re_data.default__anamaly_detection_time_window_start": {"unique_id": "macro.re_data.default__anamaly_detection_time_window_start", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "default__anamaly_detection_time_window_start", "macro_sql": "{% macro default__anamaly_detection_time_window_start() %}\n    {{ time_window_start() }} - interval '{{var('re_data:anomaly_detection_look_back_days')}} days'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.524302, "supported_languages": null}, "macro.re_data.bigquery__anamaly_detection_time_window_start": {"unique_id": "macro.re_data.bigquery__anamaly_detection_time_window_start", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "bigquery__anamaly_detection_time_window_start", "macro_sql": "{% macro bigquery__anamaly_detection_time_window_start() %}\n    DATE_ADD({{ time_window_start() }}, INTERVAL -{{var('re_data:anomaly_detection_look_back_days')}} DAY)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5246174, "supported_languages": null}, "macro.re_data.snowflake__anamaly_detection_time_window_start": {"unique_id": "macro.re_data.snowflake__anamaly_detection_time_window_start", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "snowflake__anamaly_detection_time_window_start", "macro_sql": "{% macro snowflake__anamaly_detection_time_window_start() %}\n    DATEADD('DAY', -{{-var('re_data:anomaly_detection_look_back_days')-}}, {{ time_window_start() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5249593, "supported_languages": null}, "macro.re_data.interval_length_sec": {"unique_id": "macro.re_data.interval_length_sec", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "interval_length_sec", "macro_sql": "{% macro interval_length_sec(start_timestamp, end_timestamp) %}\n    {{ adapter.dispatch('interval_length_sec', 're_data')(start_timestamp, end_timestamp) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__interval_length_sec"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.525363, "supported_languages": null}, "macro.re_data.default__interval_length_sec": {"unique_id": "macro.re_data.default__interval_length_sec", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "default__interval_length_sec", "macro_sql": "{% macro default__interval_length_sec(start_timestamp, end_timestamp) %}\n   EXTRACT(EPOCH FROM ({{ end_timestamp }} - {{ start_timestamp }} ))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5256515, "supported_languages": null}, "macro.re_data.bigquery__interval_length_sec": {"unique_id": "macro.re_data.bigquery__interval_length_sec", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "bigquery__interval_length_sec", "macro_sql": "{% macro bigquery__interval_length_sec(start_timestamp, end_timestamp) %}\n    TIMESTAMP_DIFF ({{ end_timestamp }}, {{ start_timestamp }}, SECOND)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5259352, "supported_languages": null}, "macro.re_data.snowflake__interval_length_sec": {"unique_id": "macro.re_data.snowflake__interval_length_sec", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "snowflake__interval_length_sec", "macro_sql": "{% macro snowflake__interval_length_sec(start_timestamp, end_timestamp) %}\n   timediff(second, {{ start_timestamp }}, {{ end_timestamp }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5262988, "supported_languages": null}, "macro.re_data.redshift__interval_length_sec": {"unique_id": "macro.re_data.redshift__interval_length_sec", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "redshift__interval_length_sec", "macro_sql": "{% macro redshift__interval_length_sec(start_timestamp, end_timestamp) %}\n   DATEDIFF(second, {{ start_timestamp }}, {{ end_timestamp }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5265963, "supported_languages": null}, "macro.re_data.in_time_window": {"unique_id": "macro.re_data.in_time_window", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "in_time_window", "macro_sql": "\n\n{%- macro in_time_window(time_column) %}\n    {# /* If not time_filter is specified, we compute the metric over the entire table else we filter for the time frame */ #}\n    {% if time_column is none %}\n            true\n    {% else %}\n        {{ adapter.dispatch('in_time_window', 're_data')(time_column) }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__in_time_window"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5271616, "supported_languages": null}, "macro.re_data.default__in_time_window": {"unique_id": "macro.re_data.default__in_time_window", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "default__in_time_window", "macro_sql": "{% macro default__in_time_window(time_column) %}\n    {{time_column}} >= {{ time_window_start() }} and\n    {{time_column}} < {{ time_window_end() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_start", "macro.re_data.time_window_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.527557, "supported_languages": null}, "macro.re_data.bigquery__in_time_window": {"unique_id": "macro.re_data.bigquery__in_time_window", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "bigquery__in_time_window", "macro_sql": "{% macro bigquery__in_time_window(time_column) %}\n    cast({{time_column}} as timestamp) >= {{ time_window_start() }} and\n    cast({{time_column}} as timestamp) < {{ time_window_end() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_start", "macro.re_data.time_window_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.52794, "supported_languages": null}, "macro.re_data.format_timestamp": {"unique_id": "macro.re_data.format_timestamp", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "format_timestamp", "macro_sql": "{% macro format_timestamp(column_name) %}\n    {{ adapter.dispatch('format_timestamp', 're_data')(column_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__format_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5282981, "supported_languages": null}, "macro.re_data.default__format_timestamp": {"unique_id": "macro.re_data.default__format_timestamp", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "default__format_timestamp", "macro_sql": "{% macro default__format_timestamp(column_name) %}\n    to_char({{column_name}}, 'YYYY-MM-DD HH24:MI:SS')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5285282, "supported_languages": null}, "macro.re_data.bigquery__format_timestamp": {"unique_id": "macro.re_data.bigquery__format_timestamp", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "bigquery__format_timestamp", "macro_sql": "{% macro bigquery__format_timestamp(column_name) %}\n    FORMAT_TIMESTAMP('%Y-%m-%d %H:%I:%S', {{column_name}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.528775, "supported_languages": null}, "macro.re_data.in_date_window": {"unique_id": "macro.re_data.in_date_window", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "in_date_window", "macro_sql": "\n{%- macro in_date_window(target, start_date, end_date) %}\n  {{ adapter.dispatch('in_date_window','re_data')(target, start_date, end_date) }}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__in_date_window"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5296063, "supported_languages": null}, "macro.re_data.default__in_date_window": {"unique_id": "macro.re_data.default__in_date_window", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "default__in_date_window", "macro_sql": "{% macro default__in_date_window(target, start_date, end_date) %}\n  {% if start_date is not none and end_date is not none %}\n    date({{target}}) between '{{start_date}}' and '{{end_date}}'\n  {% elif start_date is none %}\n    date({{target}}) <= '{{end_date}}'\n  {% elif end_date is none %}\n    date({{target}}) >= '{{start_date}}'\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5304549, "supported_languages": null}, "macro.re_data.print_list": {"unique_id": "macro.re_data.print_list", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/for_loops.sql", "original_file_path": "macros/utils/for_loops.sql", "name": "print_list", "macro_sql": "{% macro print_list(l) %}\n    {% for el in l %}{{el}}{% if not loop.last %},{% endif %}{% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5312731, "supported_languages": null}, "macro.re_data.is_list": {"unique_id": "macro.re_data.is_list", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/is_list.sql", "original_file_path": "macros/utils/is_list.sql", "name": "is_list", "macro_sql": "{% macro is_list(obj) %}\n    {% if not obj %}\n        {{ return (False) }}\n    {% endif %}\n    {% set check = obj is iterable and (obj is not string and obj is not mapping) %}\n    {{ return (check) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5322835, "supported_languages": null}, "macro.re_data.comparison_text": {"unique_id": "macro.re_data.comparison_text", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/comparison_text.sql", "original_file_path": "macros/utils/comparison_text.sql", "name": "comparison_text", "macro_sql": "{% macro comparison_text(a, b) %}\n    case when {{a}} > {{b}} then 'greater than' \n    when {{a}} = {{b}} then 'equal to'\n    else 'less than' end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5329292, "supported_languages": null}, "macro.re_data.in_compile": {"unique_id": "macro.re_data.in_compile", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/in_compile.sql", "original_file_path": "macros/utils/in_compile.sql", "name": "in_compile", "macro_sql": "{% macro in_compile() %}\n\n    {%- call statement('in_compile', fetch_result=True) -%}\n        select * from {{ ref('re_data_run_started_at') }}\n    {%- endcall -%}\n\n    {% if execute %}\n        {%- set result = load_result('in_compile')['data'][0][0] -%}\n        {% if result == run_started_at.timestamp() * 1000000 %}\n            {{ return(False) }}\n        {% else %}\n            {{ return(True) }}\n        {% endif %}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.534489, "supported_languages": null}, "macro.re_data.timestamp_type": {"unique_id": "macro.re_data.timestamp_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "timestamp_type", "macro_sql": "{% macro timestamp_type() %}\n    {{ adapter.dispatch('timestamp_type', 're_data')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__timestamp_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5370982, "supported_languages": null}, "macro.re_data.default__timestamp_type": {"unique_id": "macro.re_data.default__timestamp_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "default__timestamp_type", "macro_sql": "{% macro default__timestamp_type() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.53728, "supported_languages": null}, "macro.re_data.redshift__timestamp_type": {"unique_id": "macro.re_data.redshift__timestamp_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "redshift__timestamp_type", "macro_sql": "{% macro redshift__timestamp_type() %}\n    TIMESTAMP\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5374498, "supported_languages": null}, "macro.re_data.bigquery__timestamp_type": {"unique_id": "macro.re_data.bigquery__timestamp_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "bigquery__timestamp_type", "macro_sql": "{% macro bigquery__timestamp_type() %}\n    TIMESTAMP\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.537613, "supported_languages": null}, "macro.re_data.snowflake__timestamp_type": {"unique_id": "macro.re_data.snowflake__timestamp_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "snowflake__timestamp_type", "macro_sql": "{% macro snowflake__timestamp_type() %}\n    TIMESTAMP_NTZ\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5377758, "supported_languages": null}, "macro.re_data.string_type": {"unique_id": "macro.re_data.string_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "string_type", "macro_sql": "{% macro string_type() %}\n    {{ adapter.dispatch('string_type', 're_data')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__string_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5380929, "supported_languages": null}, "macro.re_data.default__string_type": {"unique_id": "macro.re_data.default__string_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "default__string_type", "macro_sql": "{% macro default__string_type() %}\n    text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5382643, "supported_languages": null}, "macro.re_data.redshift__string_type": {"unique_id": "macro.re_data.redshift__string_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "redshift__string_type", "macro_sql": "{% macro redshift__string_type() %}\n    varchar(2047)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.53843, "supported_languages": null}, "macro.re_data.bigquery__string_type": {"unique_id": "macro.re_data.bigquery__string_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "bigquery__string_type", "macro_sql": "{% macro bigquery__string_type() %}\n    STRING\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5385911, "supported_languages": null}, "macro.re_data.snowflake__string_type": {"unique_id": "macro.re_data.snowflake__string_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "snowflake__string_type", "macro_sql": "{% macro snowflake__string_type() %}\n    STRING\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.538753, "supported_languages": null}, "macro.re_data.long_string_type": {"unique_id": "macro.re_data.long_string_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "long_string_type", "macro_sql": "{% macro long_string_type() %}\n    {{ adapter.dispatch('long_string_type', 're_data')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__long_string_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5390825, "supported_languages": null}, "macro.re_data.default__long_string_type": {"unique_id": "macro.re_data.default__long_string_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "default__long_string_type", "macro_sql": "{% macro default__long_string_type() %}\n    {{ re_data.string_type() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.string_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5393422, "supported_languages": null}, "macro.re_data.redshift__long_string_type": {"unique_id": "macro.re_data.redshift__long_string_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "redshift__long_string_type", "macro_sql": "{% macro redshift__long_string_type() %}\n    varchar(65535)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.539514, "supported_languages": null}, "macro.re_data.integer_type": {"unique_id": "macro.re_data.integer_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "integer_type", "macro_sql": "{% macro integer_type() %}\n    INTEGER\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.53968, "supported_languages": null}, "macro.re_data.boolean_type": {"unique_id": "macro.re_data.boolean_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "boolean_type", "macro_sql": "{% macro boolean_type() %}\n    {{ adapter.dispatch('boolean_type', 're_data')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__boolean_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5399976, "supported_languages": null}, "macro.re_data.default__boolean_type": {"unique_id": "macro.re_data.default__boolean_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "default__boolean_type", "macro_sql": "{% macro default__boolean_type() %}\n    BOOLEAN\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5401676, "supported_languages": null}, "macro.re_data.redshift__boolean_type": {"unique_id": "macro.re_data.redshift__boolean_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "redshift__boolean_type", "macro_sql": "{% macro redshift__boolean_type() %}\n    boolean\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5403295, "supported_languages": null}, "macro.re_data.bigquery__boolean_type": {"unique_id": "macro.re_data.bigquery__boolean_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "bigquery__boolean_type", "macro_sql": "{% macro bigquery__boolean_type() %}\n    BOOLEAN\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5406334, "supported_languages": null}, "macro.re_data.snowflake__boolean_type": {"unique_id": "macro.re_data.snowflake__boolean_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "snowflake__boolean_type", "macro_sql": "{% macro snowflake__boolean_type() %}\n    BOOLEAN\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.54083, "supported_languages": null}, "macro.re_data.numeric_type": {"unique_id": "macro.re_data.numeric_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "numeric_type", "macro_sql": "{% macro numeric_type() %}\n    {{ adapter.dispatch('numeric_type', 're_data')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__numeric_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5411582, "supported_languages": null}, "macro.re_data.default__numeric_type": {"unique_id": "macro.re_data.default__numeric_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "default__numeric_type", "macro_sql": "{% macro default__numeric_type() %}\n    double precision\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.541333, "supported_languages": null}, "macro.re_data.redshift__numeric_type": {"unique_id": "macro.re_data.redshift__numeric_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "redshift__numeric_type", "macro_sql": "{% macro redshift__numeric_type() %}\n    DOUBLE PRECISION\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5416083, "supported_languages": null}, "macro.re_data.bigquery__numeric_type": {"unique_id": "macro.re_data.bigquery__numeric_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "bigquery__numeric_type", "macro_sql": "{% macro bigquery__numeric_type() %}\n    FLOAT64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5417812, "supported_languages": null}, "macro.re_data.snowflake__numeric_type": {"unique_id": "macro.re_data.snowflake__numeric_type", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "snowflake__numeric_type", "macro_sql": "{% macro snowflake__numeric_type() %}\n    FLOAT\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.541947, "supported_languages": null}, "macro.re_data.percentage_formula": {"unique_id": "macro.re_data.percentage_formula", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/formulas.sql", "original_file_path": "macros/utils/formulas.sql", "name": "percentage_formula", "macro_sql": "{% macro percentage_formula(summation, total) %}\n    abs(\n        ( \n            cast({{ summation }} as {{ numeric_type() }})\n        ) / \n        nullif(\n            cast( {{ total }} as {{ numeric_type() }} )\n        , 0) * 100.0\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.numeric_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.542662, "supported_languages": null}, "macro.re_data.regex_match_expression": {"unique_id": "macro.re_data.regex_match_expression", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/regular_expression.sql", "original_file_path": "macros/utils/regular_expression.sql", "name": "regex_match_expression", "macro_sql": "{% macro regex_match_expression(column_name, pattern) %}\n    {{ adapter.dispatch('regex_match_expression', 're_data')(column_name, pattern) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__regex_match_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5435207, "supported_languages": null}, "macro.re_data.default__regex_match_expression": {"unique_id": "macro.re_data.default__regex_match_expression", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/regular_expression.sql", "original_file_path": "macros/utils/regular_expression.sql", "name": "default__regex_match_expression", "macro_sql": "{% macro default__regex_match_expression(column_name, pattern) %}\n    ({{column_name}} ~ '{{pattern}}')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5438173, "supported_languages": null}, "macro.re_data.bigquery__regex_match_expression": {"unique_id": "macro.re_data.bigquery__regex_match_expression", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/regular_expression.sql", "original_file_path": "macros/utils/regular_expression.sql", "name": "bigquery__regex_match_expression", "macro_sql": "{% macro bigquery__regex_match_expression(column_name, pattern) %}\n    regexp_contains({{column_name}}, r'{{pattern}}')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.544102, "supported_languages": null}, "macro.re_data.snowflake__regex_match_expression": {"unique_id": "macro.re_data.snowflake__regex_match_expression", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/regular_expression.sql", "original_file_path": "macros/utils/regular_expression.sql", "name": "snowflake__regex_match_expression", "macro_sql": "{% macro snowflake__regex_match_expression(column_name, pattern) %}\n    regexp_like({{column_name | upper}}, '{{pattern}}')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5444112, "supported_languages": null}, "macro.re_data.row_value": {"unique_id": "macro.re_data.row_value", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/agate/row_value.sql", "original_file_path": "macros/utils/agate/row_value.sql", "name": "row_value", "macro_sql": "{% macro row_value(agate_row, column) %}\n    {{ return (agate_row[re_data.name_in_db(column)]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.name_in_db"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5455024, "supported_languages": null}, "macro.re_data.agate_to_list": {"unique_id": "macro.re_data.agate_to_list", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/agate/row_value.sql", "original_file_path": "macros/utils/agate/row_value.sql", "name": "agate_to_list", "macro_sql": "{% macro agate_to_list(table) %}\n    {% set col_names = table.column_names %}\n    {% set query_result = [] %}\n    {% for row in table.rows %}\n        {% set pairs = [] %}\n        {% for col_name in col_names %}\n            {% set value = row.get(col_name) | string %}\n            {% do pairs.append('\"' ~ (col_name | lower) ~ '\":' ~ '\"' ~ (value | replace('\"', '\\\\\\\"') | replace('\\n', '\\\\n') ) ~ '\"') %}\n        {% endfor %}\n        {% set joined_pairs = '{' ~ (pairs | join(',')) ~ '}' %}\n        {% do query_result.append(joined_pairs) %}\n    {% endfor %}\n    {% set query_result = '[' ~ (query_result | join(',')) ~ ']' %}\n    {{ return (query_result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5475616, "supported_languages": null}, "macro.re_data.all_types_select": {"unique_id": "macro.re_data.all_types_select", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/mock/empty_tables.sql", "original_file_path": "macros/utils/mock/empty_tables.sql", "name": "all_types_select", "macro_sql": "{% macro all_types_select() %}\n    with types_table as (\n        select\n            cast (null as {{ string_type() }}) as string_type,\n            cast (null as {{ long_string_type() }}) as long_string_type,\n            cast (1 as {{ numeric_type() }}) as numeric_type,\n            cast ('2000-01-10' as {{ timestamp_type() }}) as timestamp_type,\n            cast (true as {{ boolean_type() }}) as boolean_type\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.string_type", "macro.re_data.long_string_type", "macro.re_data.numeric_type", "macro.re_data.timestamp_type", "macro.re_data.boolean_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5498443, "supported_languages": null}, "macro.re_data.empty_table_generic": {"unique_id": "macro.re_data.empty_table_generic", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/mock/empty_tables.sql", "original_file_path": "macros/utils/mock/empty_tables.sql", "name": "empty_table_generic", "macro_sql": "{% macro empty_table_generic(list) %}\n    {{ re_data.all_types_select() }}\n    select\n    {% for name, type in list %}\n         {{ type }}_type as {{ name }}\n        {%- if not loop.last %}, {%- endif %}\n    {% endfor %}\n    from types_table\n    where string_type is not null\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.all_types_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5504878, "supported_languages": null}, "macro.re_data.empty_last_base_metrics": {"unique_id": "macro.re_data.empty_last_base_metrics", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/mock/empty_tables.sql", "original_file_path": "macros/utils/mock/empty_tables.sql", "name": "empty_last_base_metrics", "macro_sql": "{% macro empty_last_base_metrics() %}\n    {{\n        re_data.empty_table_generic([\n            ('table_name', 'string'),\n            ('column_name', 'string'),\n            ('metric', 'string'),\n            ('value', 'numeric')\n        ])\n    }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.empty_table_generic"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5511043, "supported_languages": null}, "macro.re_data.empty_last_table_samples": {"unique_id": "macro.re_data.empty_last_table_samples", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/mock/empty_tables.sql", "original_file_path": "macros/utils/mock/empty_tables.sql", "name": "empty_last_table_samples", "macro_sql": "{% macro empty_last_table_samples() %}\n    {{\n        re_data.empty_table_generic([\n            ('table_name', 'string'),\n            ('sample_data', 'string')\n        ])\n    }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.empty_table_generic"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5515432, "supported_languages": null}, "macro.re_data.empty_columns_table": {"unique_id": "macro.re_data.empty_columns_table", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/mock/empty_tables.sql", "original_file_path": "macros/utils/mock/empty_tables.sql", "name": "empty_columns_table", "macro_sql": "{% macro empty_columns_table() %}\n    {{\n        re_data.empty_table_generic([\n            ('name', 'string'),\n            ('schema', 'string'),\n            ('database', 'string'),\n            ('column_name', 'string'),\n            ('data_type', 'string'),\n            ('is_nullable', 'boolean'),\n            ('time_filter', 'string'),\n            ('computed_on', 'timestamp')\n        ])\n    }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.empty_table_generic"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.55252, "supported_languages": null}, "macro.re_data.empty_table": {"unique_id": "macro.re_data.empty_table", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/mock/empty_tables.sql", "original_file_path": "macros/utils/mock/empty_tables.sql", "name": "empty_table", "macro_sql": "{% macro empty_table() %}\n    {{\n        re_data.empty_table_generic([\n            ('name', 'string')\n        ])\n    }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.empty_table_generic"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.552924, "supported_languages": null}, "macro.re_data.to_json_string_value_or_null": {"unique_id": "macro.re_data.to_json_string_value_or_null", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/json/to_single_json.sql", "original_file_path": "macros/utils/json/to_single_json.sql", "name": "to_json_string_value_or_null", "macro_sql": "{% macro to_json_string_value_or_null(column) %}\n    (\n        case \n            when {{ column }} is null then 'null'\n            else '\"' ||\n                regexp_replace(\n                    replace(cast({{ column }} as {{ string_type() }}), '\"', {{ escape_seq_for_json('\"') }}),\n                    '\\n', {{ quote_new_line() }} {% if target.type in postgres_type_db() %}, 'g' {% endif %}\n                ) || '\"'\n        end\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.string_type", "macro.re_data.escape_seq_for_json", "macro.re_data.quote_new_line", "macro.re_data.postgres_type_db"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5542085, "supported_languages": null}, "macro.re_data.to_single_json": {"unique_id": "macro.re_data.to_single_json", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/json/to_single_json.sql", "original_file_path": "macros/utils/json/to_single_json.sql", "name": "to_single_json", "macro_sql": "{% macro to_single_json(columns) %}\n    '{' ||\n    {%- for column in columns %}\n        '\"{{ column }}\": ' ||\n        {{ to_json_string_value_or_null(column) }}\n        {%- if not loop.last %} || ',' || {%- endif %}\n    {%- endfor %}\n    || '}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.to_json_string_value_or_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5547805, "supported_languages": null}, "macro.re_data.add_duplication_context": {"unique_id": "macro.re_data.add_duplication_context", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/deduplication/add_duplication_context.sql", "original_file_path": "macros/utils/deduplication/add_duplication_context.sql", "name": "add_duplication_context", "macro_sql": "{% macro add_duplication_context(relation, unique_cols, sort_columns) %}\n\n            select {{ dbt_utils.star(from=relation) }}\n            , count(*) over (\n                 partition by {{ re_data.comma_delimited_list(unique_cols) }} \n            ) as re_data_duplicate_group_row_count\n            , row_number() over (\n                partition by {{ re_data.comma_delimited_list(unique_cols) }} {% if sort_columns %} order by {{ re_data.comma_delimited_list(sort_columns) }} {% endif %}\n            ) as re_data_duplicate_group_row_number\n\n            from {{ relation }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.re_data.comma_delimited_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5559814, "supported_languages": null}, "macro.re_data.json_extract": {"unique_id": "macro.re_data.json_extract", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/fivetran_utils/json_extract.sql", "original_file_path": "macros/utils/fivetran_utils/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract','re_data') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5573041, "supported_languages": null}, "macro.re_data.default__json_extract": {"unique_id": "macro.re_data.default__json_extract", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/fivetran_utils/json_extract.sql", "original_file_path": "macros/utils/fivetran_utils/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5578163, "supported_languages": null}, "macro.re_data.snowflake__json_extract": {"unique_id": "macro.re_data.snowflake__json_extract", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/fivetran_utils/json_extract.sql", "original_file_path": "macros/utils/fivetran_utils/json_extract.sql", "name": "snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5581667, "supported_languages": null}, "macro.re_data.redshift__json_extract": {"unique_id": "macro.re_data.redshift__json_extract", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/fivetran_utils/json_extract.sql", "original_file_path": "macros/utils/fivetran_utils/json_extract.sql", "name": "redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5585473, "supported_languages": null}, "macro.re_data.bigquery__json_extract": {"unique_id": "macro.re_data.bigquery__json_extract", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/fivetran_utils/json_extract.sql", "original_file_path": "macros/utils/fivetran_utils/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5588953, "supported_languages": null}, "macro.re_data.postgres__json_extract": {"unique_id": "macro.re_data.postgres__json_extract", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/fivetran_utils/json_extract.sql", "original_file_path": "macros/utils/fivetran_utils/json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5592356, "supported_languages": null}, "macro.re_data.percentile": {"unique_id": "macro.re_data.percentile", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/fivetran_utils/percentile.sql", "original_file_path": "macros/utils/fivetran_utils/percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile','re_data') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5609508, "supported_languages": null}, "macro.re_data.default__percentile": {"unique_id": "macro.re_data.default__percentile", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/fivetran_utils/percentile.sql", "original_file_path": "macros/utils/fivetran_utils/percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5613322, "supported_languages": null}, "macro.re_data.redshift__percentile": {"unique_id": "macro.re_data.redshift__percentile", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/fivetran_utils/percentile.sql", "original_file_path": "macros/utils/fivetran_utils/percentile.sql", "name": "redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5616934, "supported_languages": null}, "macro.re_data.bigquery__percentile": {"unique_id": "macro.re_data.bigquery__percentile", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/fivetran_utils/percentile.sql", "original_file_path": "macros/utils/fivetran_utils/percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.562134, "supported_languages": null}, "macro.re_data.postgres__percentile": {"unique_id": "macro.re_data.postgres__percentile", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/fivetran_utils/percentile.sql", "original_file_path": "macros/utils/fivetran_utils/percentile.sql", "name": "postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5624669, "supported_languages": null}, "macro.re_data.spark__percentile": {"unique_id": "macro.re_data.spark__percentile", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/utils/fivetran_utils/percentile.sql", "original_file_path": "macros/utils/fivetran_utils/percentile.sql", "name": "spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5628226, "supported_languages": null}, "macro.re_data.order_by_if_time_filter": {"unique_id": "macro.re_data.order_by_if_time_filter", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/samples/internal_model_template.sql", "original_file_path": "macros/samples/internal_model_template.sql", "name": "order_by_if_time_filter", "macro_sql": "{%- macro order_by_if_time_filter(time_filter) -%}\n    {%- if time_filter is not none -%}\n        order by {{ time_filter }} desc\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5652165, "supported_languages": null}, "macro.re_data.re_data_last_table_samples": {"unique_id": "macro.re_data.re_data_last_table_samples", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/samples/internal_model_template.sql", "original_file_path": "macros/samples/internal_model_template.sql", "name": "re_data_last_table_samples", "macro_sql": "{% macro re_data_last_table_samples() %}\n    {{ re_data.generate_depends(['re_data_selected', 're_data_monitored', 're_data_columns', 're_data_run_started_at', 're_data_last_table_samples_part']) }}\n\n    {{\n        config(\n            materialized='table',\n        )\n    }}\n\n    {% if var.has_var('re_data:store_table_samples') %}\n        {% set store_samples = var('re_data:store_table_samples') %}\n    {% endif %}\n    {% if not re_data.in_compile() and store_samples is sameas true %}\n        {%- set tables = run_query(re_data.get_tables()) %}\n\n        {% set samples_list = [] %}\n        {%- for sample_table in tables %}\n\n            {% set model = get_model_config(sample_table) %}\n            {% set columns_to_sample = [] %}\n            {% for key, value in model.columns_info.items() | sort %}\n                {% if value.data_type in ['numeric', 'text'] %}\n                    {% do columns_to_sample.append(key) %}\n                {% endif %}\n            {% endfor %}\n\n            {% set samples_query %}\n                select {{ print_list(columns_to_sample)}} from {{ model.table_name }}\n                {{ order_by_if_time_filter(model.time_filter) }}\n                limit 10\n            {% endset %}\n\n            {% set samples = re_data.agate_to_list(run_query(samples_query)) %}\n            {% do samples_list.append({\n                'table_name': model.model_name,\n                'sample_data': samples,\n            }) %}\n\n        {% endfor %}\n        {% do re_data.insert_list_to_table(\n                ref('re_data_last_table_samples_part'),\n                samples_list,\n                ['table_name', 'sample_data']\n            ) %}\n    {% endif %}\n\n    {{ re_data.empty_last_table_samples() }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.generate_depends", "macro.re_data.in_compile", "macro.dbt.run_query", "macro.re_data.get_tables", "macro.re_data.get_model_config", "macro.re_data.print_list", "macro.re_data.order_by_if_time_filter", "macro.re_data.agate_to_list", "macro.re_data.insert_list_to_table", "macro.re_data.empty_last_table_samples"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.568559, "supported_languages": null}, "macro.re_data.insert_list_to_table": {"unique_id": "macro.re_data.insert_list_to_table", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/store/insert_list_to_table.sql", "original_file_path": "macros/store/insert_list_to_table.sql", "name": "insert_list_to_table", "macro_sql": "{% macro insert_list_to_table(table, list, params, dtype=None,insert_size=100) %}\n\n    {% set single_insert_list = [] %}\n    {% for el in list %}\n        {% do single_insert_list.append(el) %}\n        {% set single_insert_list_size = single_insert_list | length %}\n        {% if single_insert_list_size == insert_size or loop.last %}\n\n            {% set insert_query %}\n                insert into {{ table }} ({%- for p in params %}{{p}}{% if not loop.last %}, {% endif %}{% endfor %}) values\n                {%- for row in single_insert_list -%}\n                    (\n                    {%- for p in params -%}\n                        {%- if row[p] is none -%}\n                            NULL\n                        {%- else -%}\n                            {%- if row[p] is string -%}\n                                {%- if dtype and p in dtype -%}\n                                  {% set cast_type = dtype[p] %}\n                                  cast ({{ re_data.quote_string(row[p]) }} as {{ cast_type }})\n                                {%- else %}\n                                  {{- re_data.quote_string(row[p]) -}}\n                                {%- endif -%}\n                            {%- elif row[p] is number -%}\n                                {{-row[p]-}}\n                            {%- else -%}\n                                {{- re_data.quote_string(tojson(row[p])) -}}\n                            {%- endif -%}\n                        {%- endif -%}\n                        {%- if not loop.last -%},{%- endif -%}\n                    {%- endfor -%}\n                    )\n                    {%- if not loop.last -%},{%- endif %}\n                {% endfor -%}\n            {% endset %}\n\n            {% do run_query(insert_query) %}\n            {% do single_insert_list.clear() %}\n        {% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.quote_string", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5752165, "supported_languages": null}, "macro.re_data.metric_expression": {"unique_id": "macro.re_data.metric_expression", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "metric_expression", "macro_sql": "{% macro metric_expression(table, metric, expression, column_name=None, condition=None) %}\n    select * from {{ref('re_data_base_metrics')}}\n    where\n        table_name = '{{ re_data.full_table_name_values(table.identifier, table.schema, table.database)}}' and\n        metric = '{{ metric }}' and\n        {% if condition is not none %}\n            {{ condition }} and\n        {% endif %}\n        {% if column_name is none %}\n        not ( {{ expression }} )\n        {% else %}\n        column_name = '{{ column_name }}' and\n        not ( {{ expression }} )\n        {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.full_table_name_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5804653, "supported_languages": null}, "macro.re_data.test_metric_expression_is_true": {"unique_id": "macro.re_data.test_metric_expression_is_true", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_metric_expression_is_true", "macro_sql": "{% test metric_expression_is_true(model, table, metric, expression, column_name=None, condition=None) %}\n    {{ re_data.metric_expression(table, metric, expression, column_name=None, condition=None) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.581073, "supported_languages": null}, "macro.re_data.test_metric_equal_to": {"unique_id": "macro.re_data.test_metric_equal_to", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_metric_equal_to", "macro_sql": "{% test metric_equal_to(model, table, metric, value, column_name=None, condition=None) %}\n    {{ re_data.metric_expression(table, metric, 'value = ' ~ value, column_name, condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.581635, "supported_languages": null}, "macro.re_data.test_metric_in_range": {"unique_id": "macro.re_data.test_metric_in_range", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_metric_in_range", "macro_sql": "{% test metric_in_range(model, table, metric, min_value, max_value, column_name=None, condition=None) %}\n    {{ re_data.metric_expression(table, metric, 'value >= ' ~ min_value ~ ' and value <= ' ~ max_value, column_name, condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5822546, "supported_languages": null}, "macro.re_data.test_assert_true": {"unique_id": "macro.re_data.test_assert_true", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_assert_true", "macro_sql": "{% test assert_true(model, column_name=None, metric=None, expression=expression, condition=None) %}\n    -- depends_on: {{ ref('re_data_base_metrics') }}\n    {% if execute %}\n        {{ re_data.metric_expression(model, metric, expression, column_name, condition) }}\n    {% else %}\n        {{ re_data.empty_table() }}\n    {% endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression", "macro.re_data.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5832143, "supported_languages": null}, "macro.re_data.test_assert_false": {"unique_id": "macro.re_data.test_assert_false", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_assert_false", "macro_sql": "{% test assert_false(model, column_name=None, metric=None, expression=expression, condition=None) %}\n    -- depends_on: {{ ref('re_data_base_metrics') }}\n    {% if execute %}\n        {{ re_data.metric_expression(model, metric, 'not (' ~ expression ~ ')', column_name, condition) }}\n    {% else %}\n        {{ re_data.empty_table() }}\n    {% endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression", "macro.re_data.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.584138, "supported_languages": null}, "macro.re_data.test_assert_in_range": {"unique_id": "macro.re_data.test_assert_in_range", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_assert_in_range", "macro_sql": "{% test assert_in_range(model, column_name=None, metric=None, min_value=None, max_value=None, condition=None) %}\n    -- depends_on: {{ ref('re_data_base_metrics') }}\n    {% if execute %}\n        {{ re_data.metric_expression(model, metric, 'value >= ' ~ min_value ~ ' and value <= ' ~ max_value, column_name, condition) }}\n    {% else %}\n        {{ re_data.empty_table() }}\n    {% endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression", "macro.re_data.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5851314, "supported_languages": null}, "macro.re_data.test_assert_equal": {"unique_id": "macro.re_data.test_assert_equal", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_assert_equal", "macro_sql": "{% test assert_equal(model, column_name=None, metric=None, value=value, condition=None) %}\n    -- depends_on: {{ ref('re_data_base_metrics') }}\n    {% if execute %}\n        {{ re_data.metric_expression(model, metric, 'value = ' ~ value, column_name, condition) }}\n    {% else %}\n        {{ re_data.empty_table() }}\n    {% endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression", "macro.re_data.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5860279, "supported_languages": null}, "macro.re_data.test_assert_greater": {"unique_id": "macro.re_data.test_assert_greater", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_assert_greater", "macro_sql": "{% test assert_greater(model, column_name=None, metric=None, value=None, condition=None) %}\n    -- depends_on: {{ ref('re_data_base_metrics') }}\n    {% if execute %}\n        {{ re_data.metric_expression(model, metric, 'value > ' ~ value, column_name, condition) }}\n    {% else %}\n        {{ re_data.empty_table() }}\n    {% endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression", "macro.re_data.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5869277, "supported_languages": null}, "macro.re_data.test_assert_greater_equal": {"unique_id": "macro.re_data.test_assert_greater_equal", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_assert_greater_equal", "macro_sql": "{% test assert_greater_equal(model, column_name=None, metric=None, value=None, condition=None) %}\n    -- depends_on: {{ ref('re_data_base_metrics') }}\n    {% if execute %}\n        {{ re_data.metric_expression(model, metric, 'value >= ' ~ value, column_name, condition) }}\n    {% else %}\n        {{ re_data.empty_table() }}\n    {% endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression", "macro.re_data.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.587894, "supported_languages": null}, "macro.re_data.test_assert_less": {"unique_id": "macro.re_data.test_assert_less", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_assert_less", "macro_sql": "{% test assert_less(model, column_name=None, metric=None, value=None, condition=None) %}\n    -- depends_on: {{ ref('re_data_base_metrics') }}\n    {% if execute %}\n        {{ re_data.metric_expression(model, metric, 'value < ' ~ value, column_name, condition) }}\n    {% else %}\n        {{ re_data.empty_table() }}\n    {% endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression", "macro.re_data.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5888057, "supported_languages": null}, "macro.re_data.test_assert_less_equal": {"unique_id": "macro.re_data.test_assert_less_equal", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_assert_less_equal", "macro_sql": "{% test assert_less_equal(model, column_name=None, metric=None, value=None, condition=None) %}\n    -- depends_on: {{ ref('re_data_base_metrics') }}\n    {% if execute %}\n        {{ re_data.metric_expression(model, metric, 'value <= ' ~ value, column_name, condition) }}\n    {% else %}\n        {{ re_data.empty_table() }}\n    {% endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression", "macro.re_data.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5896974, "supported_languages": null}, "macro.re_data.save_test_history": {"unique_id": "macro.re_data.save_test_history", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/run_end/save_results_history.sql", "original_file_path": "macros/run_end/save_results_history.sql", "name": "save_test_history", "macro_sql": "{% macro save_test_history(results) -%}\n\n{{ adapter.dispatch('save_test_history_impl', 're_data') (results) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__save_test_history_impl"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5963893, "supported_languages": null}, "macro.re_data.default__save_test_history_impl": {"unique_id": "macro.re_data.default__save_test_history_impl", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/run_end/save_results_history.sql", "original_file_path": "macros/run_end/save_results_history.sql", "name": "default__save_test_history_impl", "macro_sql": "{% macro default__save_test_history_impl(results) %}\n    -- depends_on: {{ ref('re_data_test_history') }}\n    {% set command = flags.WHICH %}\n    {% if execute and results and command in ('test', 'build') %}\n        {% set tests = [] %}\n        {% for el in results %}\n            {% if el.node.resource_type.value == 'test' %}\n                {% do tests.append(re_data.test_data_dict(el)) %}\n            {% endif %}\n        {% endfor %}\n\n        {% if tests %}\n            {% do re_data.insert_list_to_table(\n                ref('re_data_test_history'),\n                tests,\n                ['table_name', 'column_name', 'test_name', 'status', 'execution_time', 'message', 'failures_count', 'failures_json', 'failures_table', 'severity', 'compiled_sql', 'run_at'],\n                { 'run_at': timestamp_type() }\n            ) %}\n        {% endif %}\n\n    {% endif %}\n    {{ return ('') }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.test_data_dict", "macro.re_data.insert_list_to_table", "macro.re_data.timestamp_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.5984654, "supported_languages": null}, "macro.re_data.test_data_dict": {"unique_id": "macro.re_data.test_data_dict", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/run_end/save_results_history.sql", "original_file_path": "macros/run_end/save_results_history.sql", "name": "test_data_dict", "macro_sql": "{% macro test_data_dict(el) %}\n\n    {% set run_started_at_str = run_started_at.strftime('%Y-%m-%d %H:%M:%S') %}\n\n    {% if el.node.to_dict().get('test_metadata') %}\n        {% set any_refs = modules.re.findall(\"ref\\(\\'(?P<name>.*)\\'\\)\", el.node.test_metadata.kwargs['model']) %}\n        {% set any_source = modules.re.findall(\"source\\(\\'(?P<one>.*)\\'\\,\\s+\\'(?P<two>.*)\\'\\)\", el.node.test_metadata.kwargs['model']) %}\n\n        {% if any_refs %}\n            {% set name = any_refs[0] %}\n            {% set node_name = re_data.priv_full_name_from_depends(el.node, name) %}\n            {% set schema = graph.nodes.get(node_name)['schema'] %}\n            {% set database = graph.nodes.get(node_name)['database'] %}\n            {% set table_name = (database + '.' + schema + '.' + name) | lower %} \n            \n        {% elif any_source %}\n            {% set package_name = any_source[0][0] %}\n            {% set name = any_source[0][1] %}\n            {% set node_name = re_data.priv_full_name_from_depends(el.node, name) %}\n            {% set schema = graph.sources.get(node_name)['schema'] %}\n            {% set database = graph.sources.get(node_name)['database'] %}\n            {% set table_name = (database + '.' + schema + '.' + name) | lower %}\n        {% else %}\n            {% set table_name = none %}\n        {% endif %}\n    {% else %}\n        {% set table_name = none %}\n    {% endif %}\n\n    {% if var.has_var('re_data:query_test_failures') %}\n        {% set query_failures = var('re_data:query_test_failures') %}\n    {% else %}\n        {% set query_failures = true %}\n    {% endif %}\n\n    {% if el.failures and el.failures > 0 and el.node.relation_name and query_failures %}\n        {% if var.has_var('re_data:test_history_failures_limit') %}\n            {% set limit_count = var('re_data:test_history_failures_limit')%}\n        {% else %}\n            {% set limit_count = 10 %}\n        {% endif %}\n\n        {% set failures_query %}\n            select * from {{ el.node.relation_name}} limit {{ limit_count }}\n        {% endset %}\n        {% set failures_list = re_data.agate_to_list(run_query(failures_query)) %}\n    {% endif %}\n\n    {% set failures_json = none %}\n\n    {{ return ({\n        'table_name': table_name,\n        'column_name': el.node.column_name or none,\n        'test_name': el.node.name,\n        'status': el.status.name,\n        'execution_time': el.execution_time,\n        'message': el.message,\n        'failures_count': el.failures,\n        'failures_json': '' ~ failures_list,\n        'failures_table': el.node.relation_name or none,\n        'severity': el.node.config.severity,\n        'compiled_sql': el.node.compiled_sql or none,\n        'run_at': run_started_at_str,\n        })\n    }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.priv_full_name_from_depends", "macro.re_data.agate_to_list", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6049929, "supported_languages": null}, "macro.re_data.priv_full_name_from_depends": {"unique_id": "macro.re_data.priv_full_name_from_depends", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/run_end/save_results_history.sql", "original_file_path": "macros/run_end/save_results_history.sql", "name": "priv_full_name_from_depends", "macro_sql": "{% macro priv_full_name_from_depends(node, name) %}\n\n    {% for full_name in node.depends_on.nodes %}\n        {% set node_name = full_name.split('.')[-1] %}\n        {% if node_name == name %}\n            {{ return(full_name) }}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(none) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.605921, "supported_languages": null}, "macro.re_data.metrics_base_compute_for_thread": {"unique_id": "macro.re_data.metrics_base_compute_for_thread", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/queries.sql", "original_file_path": "macros/metrics/base/queries.sql", "name": "metrics_base_compute_for_thread", "macro_sql": "{% macro metrics_base_compute_for_thread(thread_value, ref_model) %}\n    {%- set tables =  run_query(re_data.get_tables()) %}\n    {%- for mtable in tables %}\n        -- we are splitting computing metrics to 4 different threads\n        {% set for_loop_mod = (loop.index % 4) %}\n        {% if for_loop_mod == thread_value %}\n            {% set model = get_model_config(mtable) %}\n\n            {% set columns_to_query = [] %}\n            {% set size = 0 %}\n\n            {% for column in model.columns %}\n                {% set column_name = re_data.row_value(column, 'column_name') %}\n                \n                {% if should_compute_metric(model, column_name) %}\n                    {% do columns_to_query.append(column) %}\n                {% endif %}\n\n                {% set columns_size = columns_to_query| length %}\n\n                {% if columns_size == var('re_data:max_columns_in_query') %}\n                    {%- set insert_stats_query = re_data.metrics_base_insert(model, ref_model, columns_to_query) -%}\n\n                    {% if insert_stats_query %}\n                        {% do run_query(insert_stats_query) %}\n                    {% endif %}\n                    {% do columns_to_query.clear() %}\n                {% endif %}\n            {% endfor %}\n\n            {%- set insert_stats_query = re_data.metrics_base_insert(model, ref_model, columns_to_query, table_level=True) -%}\n            {% do run_query(insert_stats_query) %}\n\n            {{ dbt_utils.log_info('[re_data_log] - finished computing metrics for:' ~ model.model_name) }}\n        {% endif %}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.re_data.get_tables", "macro.re_data.get_model_config", "macro.re_data.row_value", "macro.re_data.should_compute_metric", "macro.re_data.metrics_base_insert", "macro.dbt_utils.log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6125395, "supported_languages": null}, "macro.re_data.metrics_base_insert": {"unique_id": "macro.re_data.metrics_base_insert", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/queries.sql", "original_file_path": "macros/metrics/base/queries.sql", "name": "metrics_base_insert", "macro_sql": "{% macro metrics_base_insert(model, ref_model, columns, table_level=False) %}\n\n    {% set col_exprs = re_data.metrics_base_expressions(model, columns, table_level) %}\n    {% if col_exprs == [] %}\n        {{ return ('') }}\n    {% endif %}\n\n    insert into {{ ref(ref_model) }}\n    with temp_table_metrics as (\n    select \n        {%- for col_expr in col_exprs %}\n            ( {{ col_expr.expr }} ) as {{ re_data.quote_column_name(col_expr.col_name + '___' + col_expr.metric) }}\n            {%- if not loop.last %},{%- endif %}\n        {% endfor %}\n    from \n        {{ model.table_name }}\n    where\n        {{ in_time_window(model.time_filter) }}\n    )\n\n    {%- for col_expr in col_exprs %}\n        {% set final_metric_name = get_final_metric_name(col_expr.metric, model.time_filter) %}\n        \n        select '{{model.table_name}}' as table_name, '{{ col_expr.col_name }}' as column_name, '{{ final_metric_name }}' as metric, {{ re_data.quote_column_name(col_expr.col_name + '___' + col_expr.metric) }} as value\n        from temp_table_metrics\n        {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metrics_base_expressions", "macro.re_data.quote_column_name", "macro.re_data.in_time_window", "macro.re_data.get_final_metric_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6148608, "supported_languages": null}, "macro.re_data.get_final_metric_name": {"unique_id": "macro.re_data.get_final_metric_name", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/queries.sql", "original_file_path": "macros/metrics/base/queries.sql", "name": "get_final_metric_name", "macro_sql": "{% macro get_final_metric_name(metric_name, time_filter) %}\n    {% if time_filter is none %}\n        {{ return ('global__' + metric_name) }}\n    {% else %}\n        {{ return (metric_name) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6154883, "supported_languages": null}, "macro.re_data.re_data_last_base_metrics_part": {"unique_id": "macro.re_data.re_data_last_base_metrics_part", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/internal_model_template.sql", "original_file_path": "macros/metrics/base/internal_model_template.sql", "name": "re_data_last_base_metrics_part", "macro_sql": "{% macro re_data_last_base_metrics_part() %}\n\n-- depends_on: {{ ref('re_data_columns') }}\n\n{{\n    config(\n        materialized='table',\n    )\n}}\n\n{{ re_data.empty_last_base_metrics() }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.empty_last_base_metrics"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6165094, "supported_languages": null}, "macro.re_data.re_data_last_base_metrics_thread": {"unique_id": "macro.re_data.re_data_last_base_metrics_thread", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/internal_model_template.sql", "original_file_path": "macros/metrics/base/internal_model_template.sql", "name": "re_data_last_base_metrics_thread", "macro_sql": "{% macro re_data_last_base_metrics_thread(num) %}\n    {% set part_name = 're_data_last_base_metrics_part' ~ num %}\n    {{ re_data.generate_depends(['re_data_selected', 're_data_monitored', 're_data_columns', 're_data_run_started_at', part_name]) }}\n\n    {{\n        config(\n            materialized='table',\n        )\n    }}\n\n    {% if not re_data.in_compile() %}\n        {{ re_data.metrics_base_compute_for_thread(num, part_name) }}\n    {% endif %}\n\n    {{ re_data.empty_last_base_metrics() }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.generate_depends", "macro.re_data.in_compile", "macro.re_data.metrics_base_compute_for_thread", "macro.re_data.empty_last_base_metrics"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6175358, "supported_languages": null}, "macro.re_data.metrics_base_expressions": {"unique_id": "macro.re_data.metrics_base_expressions", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/expression.sql", "original_file_path": "macros/metrics/base/expression.sql", "name": "metrics_base_expressions", "macro_sql": "{% macro metrics_base_expressions(model, columns, table_level=False) %}\n\n    {% set col_expr = [] %}\n\n    {% for col in columns %}\n        {% set column_name = re_data.row_value(col, 'column_name') %}\n        {% do col_expr.extend(re_data.metrics_base_expression_column_all(model, col)) %}\n    {% endfor %}\n\n    {% if table_level %}\n        {% do col_expr.extend(re_data.metrics_base_expresion_table_all(model)) %}\n    {% endif %}\n\n    {{ return (col_expr) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.row_value", "macro.re_data.metrics_base_expression_column_all", "macro.re_data.metrics_base_expresion_table_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6237376, "supported_languages": null}, "macro.re_data.metrics_base_expression_column_all": {"unique_id": "macro.re_data.metrics_base_expression_column_all", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/expression.sql", "original_file_path": "macros/metrics/base/expression.sql", "name": "metrics_base_expression_column_all", "macro_sql": "{% macro metrics_base_expression_column_all(model, column) %}\n\n    {%- set col_expr = [] %}\n    {%- set metrics_to_compute = [] %}\n    {% set column_name = re_data.row_value(column, 'column_name') %}\n    {% set data_type = model.columns_info[column_name].data_type %}\n    {% do metrics_to_compute.extend(model.metrics.get('group').get('column', {}).get(data_type, [])) %}\n    {% do metrics_to_compute.extend(model.metrics.get('additional').get('column', {}).get(column_name, [])) %} \n\n    {% for metric_value in metrics_to_compute %}\n        {% set metric_obj = re_data.extract_metric_config(metric_value) %}\n        {% set expression = re_data.metrics_base_expression_column(model, column_name, metric_obj['metric'], metric_obj['config']) %}\n        {% do col_expr.append({ 'expr': expression, 'col_name': column_name, 'metric': metric_obj['metric']}) %}\n    {% endfor %}\n\n    {{ return (col_expr) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.row_value", "macro.re_data.extract_metric_config", "macro.re_data.metrics_base_expression_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6261122, "supported_languages": null}, "macro.re_data.metrics_base_expresion_table_all": {"unique_id": "macro.re_data.metrics_base_expresion_table_all", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/expression.sql", "original_file_path": "macros/metrics/base/expression.sql", "name": "metrics_base_expresion_table_all", "macro_sql": "{% macro metrics_base_expresion_table_all(model) %}\n    {%- set table_expr = [] %}\n    {%- set metrics_to_compute = [] %}\n    {% do metrics_to_compute.extend(model.metrics.get('group').get('table', [])) %}\n    {% do metrics_to_compute.extend(model.metrics.get('additional').get('table', [])) %}\n\n    {% for metric_value in metrics_to_compute %}\n        {% set metric_obj = re_data.extract_metric_config(metric_value) %}\n        {% set expression = re_data.metrics_base_expression_table(model, metric_obj['metric'], metric_obj['config']) %}\n        {% do table_expr.append({ 'expr': expression, 'col_name': '', 'metric': metric_obj['metric']}) %}\n    {% endfor %}\n\n    {{ return (table_expr) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.extract_metric_config", "macro.re_data.metrics_base_expression_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.627969, "supported_languages": null}, "macro.re_data.metrics_base_expression_table": {"unique_id": "macro.re_data.metrics_base_expression_table", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/expression.sql", "original_file_path": "macros/metrics/base/expression.sql", "name": "metrics_base_expression_table", "macro_sql": "{% macro metrics_base_expression_table(model, metric_name, config) %}\n    {% set metric_macro = re_data.get_metric_macro(metric_name) %}\n    {% set context = {'time_filter': model.time_filter, 'metric_name': metric_name, 'config': config, 'table_name': model.table_name, 'column_name': none} %}\n\n    {{ metric_macro(context) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.get_metric_macro"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6289022, "supported_languages": null}, "macro.re_data.metrics_base_expression_column": {"unique_id": "macro.re_data.metrics_base_expression_column", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/expression.sql", "original_file_path": "macros/metrics/base/expression.sql", "name": "metrics_base_expression_column", "macro_sql": "\n\n\n{%- macro metrics_base_expression_column(model, column_name, metric_name, config) %}\n    {% set metric_macro = re_data.get_metric_macro(metric_name) %}\n    {% set context = {'time_filter': model.time_filter, 'metric_name': metric_name, 'config': config, 'table_name': model.table_name, 'column_name': re_data.quote_column_name(column_name)} %}\n\n    {{ metric_macro(context) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.get_metric_macro", "macro.re_data.quote_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6298456, "supported_languages": null}, "macro.re_data.extract_metric_config": {"unique_id": "macro.re_data.extract_metric_config", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/expression.sql", "original_file_path": "macros/metrics/base/expression.sql", "name": "extract_metric_config", "macro_sql": "{% macro extract_metric_config(metric_value) %}\n\n    {% set config = none %}\n\n    {% if metric_value is mapping %}\n        {% set metric = metric_value.keys() | first %}\n        {% if metric_value[metric] is none %}\n            {{ exceptions.raise_compiler_error(\"Empty configuration passed for metric: \" ~ metric ~ \". If the metric doesn't use a config, please use the column name as a string.\") }}\n        {% endif %}\n\n        {% set config = metric_value[metric] %}\n    {%- else %}\n        {% set metric = metric_value %}\n    {% endif %}\n\n    {{ return ({'metric': metric, 'config': config}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6311395, "supported_languages": null}, "macro.re_data.get_metric_macro": {"unique_id": "macro.re_data.get_metric_macro", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/expression.sql", "original_file_path": "macros/metrics/base/expression.sql", "name": "get_metric_macro", "macro_sql": "\n\n{%- macro get_metric_macro(metric_name) %}\n    {% set macro_name = 're_data_metric' + '_' + metric_name %}\n\n    {% if context['re_data'].get(macro_name) %}\n        {% set metric_macro = context['re_data'][macro_name] %}\n    {%- else %}\n        {% set metric_macro = context[project_name][macro_name] %}\n    {% endif %}\n\n    {{ return (metric_macro) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.632117, "supported_languages": null}, "macro.re_data.re_data_metric_max": {"unique_id": "macro.re_data.re_data_metric_max", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_max", "macro_sql": "{% macro re_data_metric_max(context) %}\n    max({{context.column_name}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.63461, "supported_languages": null}, "macro.re_data.re_data_metric_min": {"unique_id": "macro.re_data.re_data_metric_min", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_min", "macro_sql": "{% macro re_data_metric_min(context) %}\n    min({{context.column_name}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6348732, "supported_languages": null}, "macro.re_data.re_data_metric_avg": {"unique_id": "macro.re_data.re_data_metric_avg", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_avg", "macro_sql": "{% macro re_data_metric_avg(context) %}\n    avg(cast ({{context.column_name}} as {{ numeric_type() }}))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.numeric_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6351829, "supported_languages": null}, "macro.re_data.re_data_metric_stddev": {"unique_id": "macro.re_data.re_data_metric_stddev", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_stddev", "macro_sql": "{% macro re_data_metric_stddev(context) %}\n    stddev(cast ( {{context.column_name}} as {{ numeric_type() }}))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.numeric_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6354866, "supported_languages": null}, "macro.re_data.re_data_metric_variance": {"unique_id": "macro.re_data.re_data_metric_variance", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_variance", "macro_sql": "{% macro re_data_metric_variance(context) %}\n    variance(cast ( {{context.column_name}} as {{ numeric_type() }}))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.numeric_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6357915, "supported_languages": null}, "macro.re_data.re_data_metric_max_length": {"unique_id": "macro.re_data.re_data_metric_max_length", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_max_length", "macro_sql": "{% macro re_data_metric_max_length(context) %}\n    max(length({{context.column_name}}))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6360343, "supported_languages": null}, "macro.re_data.re_data_metric_min_length": {"unique_id": "macro.re_data.re_data_metric_min_length", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_min_length", "macro_sql": "{% macro re_data_metric_min_length(context) %}\n    min(length({{context.column_name}}))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6362736, "supported_languages": null}, "macro.re_data.re_data_metric_avg_length": {"unique_id": "macro.re_data.re_data_metric_avg_length", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_avg_length", "macro_sql": "{% macro re_data_metric_avg_length(context) %}\n    avg(cast (length( {{context.column_name}} ) as {{ numeric_type() }}))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.numeric_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6365747, "supported_languages": null}, "macro.re_data.re_data_metric_nulls_count": {"unique_id": "macro.re_data.re_data_metric_nulls_count", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_nulls_count", "macro_sql": "{% macro re_data_metric_nulls_count(context) %}\n    coalesce(\n        sum(\n            case when {{context.column_name}} is null\n                then 1\n            else 0\n            end\n        ), 0\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6368637, "supported_languages": null}, "macro.re_data.re_data_metric_missing_count": {"unique_id": "macro.re_data.re_data_metric_missing_count", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_missing_count", "macro_sql": "{% macro re_data_metric_missing_count(context) %}\n    coalesce(\n        sum(\n            case \n            when {{context.column_name}} is null\n                then 1\n            when {{context.column_name}} = ''\n                then 1\n            else 0\n            end\n        ), 0\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.637179, "supported_languages": null}, "macro.re_data.re_data_metric_nulls_percent": {"unique_id": "macro.re_data.re_data_metric_nulls_percent", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_nulls_percent", "macro_sql": "{% macro re_data_metric_nulls_percent(context) %}\n    {{ percentage_formula(re_data_metric_nulls_count(context), re_data_metric_row_count()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.percentage_formula", "macro.re_data.re_data_metric_nulls_count", "macro.re_data.re_data_metric_row_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6376944, "supported_languages": null}, "macro.re_data.re_data_metric_missing_percent": {"unique_id": "macro.re_data.re_data_metric_missing_percent", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_missing_percent", "macro_sql": "{% macro re_data_metric_missing_percent(context) %}\n    {{ percentage_formula(re_data_metric_missing_count(context), re_data_metric_row_count()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.percentage_formula", "macro.re_data.re_data_metric_missing_count", "macro.re_data.re_data_metric_row_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6380572, "supported_languages": null}, "macro.re_data.re_data_metric_row_count": {"unique_id": "macro.re_data.re_data_metric_row_count", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/table_default.sql", "original_file_path": "macros/metrics/base/build_in/table_default.sql", "name": "re_data_metric_row_count", "macro_sql": "{% macro re_data_metric_row_count(context) %}\n    count(1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6391277, "supported_languages": null}, "macro.re_data.re_data_metric_freshness": {"unique_id": "macro.re_data.re_data_metric_freshness", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/table_default.sql", "original_file_path": "macros/metrics/base/build_in/table_default.sql", "name": "re_data_metric_freshness", "macro_sql": "{% macro re_data_metric_freshness(context) %}\n    {{ freshness_expression(context.time_filter) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.freshness_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6394312, "supported_languages": null}, "macro.re_data.freshness_expression": {"unique_id": "macro.re_data.freshness_expression", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/table_default.sql", "original_file_path": "macros/metrics/base/build_in/table_default.sql", "name": "freshness_expression", "macro_sql": "{% macro freshness_expression(time_filter) %}\n    {# /* If time_filter is none, we are computing the metric globally. we set the value as null since a table without use of a time filter doesn't really have a freshness metric */ #}\n    {% if time_filter is none %}\n        cast(null as {{ numeric_type() }})\n    {% else %}\n        {{ adapter.dispatch('freshness_expression', 're_data')(time_filter) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.numeric_type", "macro.re_data.snowflake__freshness_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6400335, "supported_languages": null}, "macro.re_data.default__freshness_expression": {"unique_id": "macro.re_data.default__freshness_expression", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/table_default.sql", "original_file_path": "macros/metrics/base/build_in/table_default.sql", "name": "default__freshness_expression", "macro_sql": "{% macro default__freshness_expression(time_filter) %}\n    EXTRACT(EPOCH FROM ({{time_window_end()}} - max({{time_filter}})))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6403322, "supported_languages": null}, "macro.re_data.bigquery__freshness_expression": {"unique_id": "macro.re_data.bigquery__freshness_expression", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/table_default.sql", "original_file_path": "macros/metrics/base/build_in/table_default.sql", "name": "bigquery__freshness_expression", "macro_sql": "{% macro bigquery__freshness_expression(time_filter) %}\n    TIMESTAMP_DIFF ( timestamp({{ time_window_end()}}), timestamp(max({{time_filter}})), SECOND)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6406214, "supported_languages": null}, "macro.re_data.snowflake__freshness_expression": {"unique_id": "macro.re_data.snowflake__freshness_expression", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/table_default.sql", "original_file_path": "macros/metrics/base/build_in/table_default.sql", "name": "snowflake__freshness_expression", "macro_sql": "{% macro snowflake__freshness_expression(time_filter) %}\n    timediff(second, max({{time_filter}}), {{- time_window_end() -}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6409388, "supported_languages": null}, "macro.re_data.redshift__freshness_expression": {"unique_id": "macro.re_data.redshift__freshness_expression", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/table_default.sql", "original_file_path": "macros/metrics/base/build_in/table_default.sql", "name": "redshift__freshness_expression", "macro_sql": "{% macro redshift__freshness_expression(time_filter) %}\n    DATEDIFF(second, max({{time_filter}}), {{- time_window_end() -}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6412296, "supported_languages": null}, "macro.re_data.re_data_metric_distinct_table_rows": {"unique_id": "macro.re_data.re_data_metric_distinct_table_rows", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_table_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_table_metrics.sql", "name": "re_data_metric_distinct_table_rows", "macro_sql": "{% macro re_data_metric_distinct_table_rows(context) %}\n    with temp_table AS (\n            select distinct * from {{ context.table_name }}\n            where {{ in_time_window(context.time_filter) }}\n        )\n    select coalesce(count(*), 0) FROM temp_table\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.in_time_window"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6418545, "supported_languages": null}, "macro.re_data.re_data_metric_regex_count": {"unique_id": "macro.re_data.re_data_metric_regex_count", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_regex_count", "macro_sql": "{% macro re_data_metric_regex_count(column_name, pattern) %}\n    coalesce(\n        sum(\n            case when {{ regex_match_expression(column_name, pattern) }}\n                then 1\n            else 0\n            end\n        ), 0\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.regex_match_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6449213, "supported_languages": null}, "macro.re_data.re_data_metric_match_regex": {"unique_id": "macro.re_data.re_data_metric_match_regex", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_match_regex", "macro_sql": "{% macro re_data_metric_match_regex(context) %}\n    {{ re_data_metric_regex_count(context.column_name, context.config.regex) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.re_data_metric_regex_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6452754, "supported_languages": null}, "macro.re_data.re_data_metric_match_regex_percent": {"unique_id": "macro.re_data.re_data_metric_match_regex_percent", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_match_regex_percent", "macro_sql": "{% macro re_data_metric_match_regex_percent(context) %}\n    {{ percentage_formula(re_data_metric_match_regex(context), re_data_metric_row_count()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.percentage_formula", "macro.re_data.re_data_metric_match_regex", "macro.re_data.re_data_metric_row_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6456323, "supported_languages": null}, "macro.re_data.re_data_metric_not_match_regex": {"unique_id": "macro.re_data.re_data_metric_not_match_regex", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_not_match_regex", "macro_sql": "{% macro re_data_metric_not_match_regex(context) %}\n    {{ re_data_metric_row_count() }} - {{ re_data_metric_regex_count(context.column_name, context.config.regex) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.re_data_metric_row_count", "macro.re_data.re_data_metric_regex_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6460364, "supported_languages": null}, "macro.re_data.re_data_metric_not_match_regex_percent": {"unique_id": "macro.re_data.re_data_metric_not_match_regex_percent", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_not_match_regex_percent", "macro_sql": "{% macro re_data_metric_not_match_regex_percent(context) %}\n    {{ percentage_formula(re_data_metric_not_match_regex(context), re_data_metric_row_count()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.percentage_formula", "macro.re_data.re_data_metric_not_match_regex", "macro.re_data.re_data_metric_row_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6463907, "supported_languages": null}, "macro.re_data.re_data_metric_distinct_values": {"unique_id": "macro.re_data.re_data_metric_distinct_values", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_distinct_values", "macro_sql": "{% macro re_data_metric_distinct_values(context) %}\n    {{ distinct_values(context) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.distinct_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.646658, "supported_languages": null}, "macro.re_data.distinct_values": {"unique_id": "macro.re_data.distinct_values", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "distinct_values", "macro_sql": "{% macro distinct_values(context) %}\n    {{ adapter.dispatch('distinct_values', 're_data')(context) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__distinct_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6470232, "supported_languages": null}, "macro.re_data.default__distinct_values": {"unique_id": "macro.re_data.default__distinct_values", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "default__distinct_values", "macro_sql": "{% macro default__distinct_values(context) %}\n    coalesce(\n        count(distinct {{ context.column_name }} )\n    , 0)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6472807, "supported_languages": null}, "macro.re_data.postgres__distinct_values": {"unique_id": "macro.re_data.postgres__distinct_values", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "postgres__distinct_values", "macro_sql": "{% macro postgres__distinct_values(context) %}\n    {# /* In postgres, its faster to count distinct values in a column by selecting then counting in separate steps */ #}\n    with temp_table as (\n            select distinct {{ context.column_name }} from {{ context.table_name }}\n            where {{ in_time_window(context.time_filter) }}\n        )\n    select coalesce(count(*), 0) from temp_table\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.in_time_window"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6477056, "supported_languages": null}, "macro.re_data.re_data_metric_approx_distinct_values": {"unique_id": "macro.re_data.re_data_metric_approx_distinct_values", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_approx_distinct_values", "macro_sql": "{% macro re_data_metric_approx_distinct_values(context) %}\n    {{ approx_distinct_values(context) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.approx_distinct_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6479769, "supported_languages": null}, "macro.re_data.approx_distinct_values": {"unique_id": "macro.re_data.approx_distinct_values", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "approx_distinct_values", "macro_sql": "{% macro approx_distinct_values(context) %}\n    {{ adapter.dispatch('approx_distinct_values', 're_data')(context) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__approx_distinct_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6483266, "supported_languages": null}, "macro.re_data.default__approx_distinct_values": {"unique_id": "macro.re_data.default__approx_distinct_values", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "default__approx_distinct_values", "macro_sql": "{% macro default__approx_distinct_values(context) %}\n    {# /* No approximate distinct count in postgres so we default to using a distinct count */ #}\n    {{ re_data_metric_distinct_values(context) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.re_data_metric_distinct_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6486268, "supported_languages": null}, "macro.re_data.redshift__approx_distinct_values": {"unique_id": "macro.re_data.redshift__approx_distinct_values", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "redshift__approx_distinct_values", "macro_sql": "{% macro redshift__approx_distinct_values(context) %}\n    approximate {{ re_data_metric_distinct_values(context.column_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.re_data_metric_distinct_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6489453, "supported_languages": null}, "macro.re_data.bigquery__approx_distinct_values": {"unique_id": "macro.re_data.bigquery__approx_distinct_values", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "bigquery__approx_distinct_values", "macro_sql": "{% macro bigquery__approx_distinct_values(context) %}\n    approx_count_distinct({{ context.column_name }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.649415, "supported_languages": null}, "macro.re_data.snowflake__approx_distinct_values": {"unique_id": "macro.re_data.snowflake__approx_distinct_values", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "snowflake__approx_distinct_values", "macro_sql": "{% macro snowflake__approx_distinct_values(context) %}\n    approx_count_distinct({{ context.column_name }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6496794, "supported_languages": null}, "macro.re_data.re_data_metric_duplicate_values": {"unique_id": "macro.re_data.re_data_metric_duplicate_values", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_duplicate_values", "macro_sql": "{% macro re_data_metric_duplicate_values(context) %}\n        with temp_table as (\n            select {{ context.column_name }} from {{ context.table_name }}\n            where {{ in_time_window(context.time_filter) }}\n            group by {{ context.column_name }}\n            having count(1) > 1\n        )\n        select coalesce(count(*), 0) from temp_table\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.in_time_window"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6501465, "supported_languages": null}, "macro.re_data.re_data_metric_duplicate_rows": {"unique_id": "macro.re_data.re_data_metric_duplicate_rows", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_duplicate_rows", "macro_sql": "{% macro re_data_metric_duplicate_rows(context) %}\n        with temp_table as (\n            select {{ context.column_name }}, count(1) as row_count from {{ context.table_name }}\n            where {{ in_time_window(context.time_filter) }}\n            group by {{ context.column_name }}\n            having count(1) > 1\n        )\n        select coalesce(sum(row_count), 0) from temp_table\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.in_time_window"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6506217, "supported_languages": null}, "macro.re_data.re_data_metric_unique_rows": {"unique_id": "macro.re_data.re_data_metric_unique_rows", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_unique_rows", "macro_sql": "{% macro re_data_metric_unique_rows(context) %}\n        with temp_table as (\n            select {{ context.column_name }}, count(1) as row_count from {{ context.table_name }}\n            where {{ in_time_window(context.time_filter) }}\n            group by {{ context.column_name }}\n            having count(1) = 1\n        )\n        select coalesce(sum(row_count), 0) from temp_table\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.in_time_window"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6511059, "supported_languages": null}, "macro.re_data.get_monitored_columns": {"unique_id": "macro.re_data.get_monitored_columns", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/meta/information_schema.sql", "original_file_path": "macros/meta/information_schema.sql", "name": "get_monitored_columns", "macro_sql": "{% macro get_monitored_columns(schema, database) %}\n    {{ adapter.dispatch('get_monitored_columns', 're_data')(schema, database) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__get_monitored_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6520402, "supported_languages": null}, "macro.re_data.default__get_monitored_columns": {"unique_id": "macro.re_data.default__get_monitored_columns", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/meta/information_schema.sql", "original_file_path": "macros/meta/information_schema.sql", "name": "default__get_monitored_columns", "macro_sql": "{% macro default__get_monitored_columns(table_schema, db_name) %}\n    {% set relation = api.Relation.create(database=db_name, schema=table_schema) %}\n    select\n        table_name,\n        table_schema,\n        table_catalog,\n        column_name,\n        data_type,\n        is_nullable\n    from\n        {{ relation.information_schema('COLUMNS') }}\n    where\n        table_schema = '{{ table_schema }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6526356, "supported_languages": null}, "macro.re_data.redshift__get_monitored_columns": {"unique_id": "macro.re_data.redshift__get_monitored_columns", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/meta/information_schema.sql", "original_file_path": "macros/meta/information_schema.sql", "name": "redshift__get_monitored_columns", "macro_sql": "{% macro redshift__get_monitored_columns(table_schema, db_name) %}\n    select\n        table_name,\n        table_schema,\n        table_catalog,\n        column_name,\n        data_type,\n        is_nullable\n    from\n        svv_columns\n    where\n        table_schema = '{{ table_schema }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6529787, "supported_languages": null}, "macro.re_data.get_tables": {"unique_id": "macro.re_data.get_tables", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/meta/monitored_model_queries.sql", "original_file_path": "macros/meta/monitored_model_queries.sql", "name": "get_tables", "macro_sql": "{% macro get_tables() %}\n    select *\n    from {{ ref('re_data_selected') }}\n    order by name, schema, database, time_filter\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6535368, "supported_languages": null}, "macro.re_data.get_schemas": {"unique_id": "macro.re_data.get_schemas", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/meta/monitored_model_queries.sql", "original_file_path": "macros/meta/monitored_model_queries.sql", "name": "get_schemas", "macro_sql": "{% macro get_schemas() %}\n    select distinct schema, database\n    from {{ ref('re_data_selected') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.653806, "supported_languages": null}, "macro.re_data.full_table_name": {"unique_id": "macro.re_data.full_table_name", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/meta/table_name.sql", "original_file_path": "macros/meta/table_name.sql", "name": "full_table_name", "macro_sql": "{% macro full_table_name(table_name, table_schema, table_catalog) %}\n    {{ adapter.dispatch('full_table_name', 're_data')(table_name, table_schema, table_catalog) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__full_table_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6553912, "supported_languages": null}, "macro.re_data.default__full_table_name": {"unique_id": "macro.re_data.default__full_table_name", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/meta/table_name.sql", "original_file_path": "macros/meta/table_name.sql", "name": "default__full_table_name", "macro_sql": "{% macro default__full_table_name(table_name, table_schema, table_catalog) %}\n    '\"' || {{table_catalog}} || '\"' || '.' || '\"' || {{table_schema}} || '\"' || '.' || '\"' || {{table_name}} || '\"'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6557477, "supported_languages": null}, "macro.re_data.bigquery__full_table_name": {"unique_id": "macro.re_data.bigquery__full_table_name", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/meta/table_name.sql", "original_file_path": "macros/meta/table_name.sql", "name": "bigquery__full_table_name", "macro_sql": "{% macro bigquery__full_table_name(table_name, table_schema, table_catalog) %}\n    '`' || {{table_catalog}} || '`' || '.' || '`' || {{table_schema}} || '`' || '.' || '`' || {{table_name}} || '`'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6560915, "supported_languages": null}, "macro.re_data.full_table_name_values": {"unique_id": "macro.re_data.full_table_name_values", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/meta/table_name.sql", "original_file_path": "macros/meta/table_name.sql", "name": "full_table_name_values", "macro_sql": "{% macro full_table_name_values(table_name, table_schema, table_catalog) %}\n    {% set result = adapter.dispatch('full_table_name_values', 're_data')(table_name, table_schema, table_catalog) %}\n    {{ return (result.strip()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__full_table_name_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6566975, "supported_languages": null}, "macro.re_data.default__full_table_name_values": {"unique_id": "macro.re_data.default__full_table_name_values", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/meta/table_name.sql", "original_file_path": "macros/meta/table_name.sql", "name": "default__full_table_name_values", "macro_sql": "{% macro default__full_table_name_values(table_name, table_schema, table_catalog) %}\n    \"{{table_catalog}}\".\"{{table_schema}}\".\"{{table_name}}\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6570756, "supported_languages": null}, "macro.re_data.bigquery__full_table_name_values": {"unique_id": "macro.re_data.bigquery__full_table_name_values", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/meta/table_name.sql", "original_file_path": "macros/meta/table_name.sql", "name": "bigquery__full_table_name_values", "macro_sql": "{% macro bigquery__full_table_name_values(table_name, table_schema, table_catalog) %}\n    `{{table_catalog}}`.`{{table_schema}}`.`{{table_name}}`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6574173, "supported_languages": null}, "macro.re_data.snowflake__full_table_name_values": {"unique_id": "macro.re_data.snowflake__full_table_name_values", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/meta/table_name.sql", "original_file_path": "macros/meta/table_name.sql", "name": "snowflake__full_table_name_values", "macro_sql": "{% macro snowflake__full_table_name_values(table_name, table_schema, table_catalog) %}\n    \"{{table_catalog|upper}}\".\"{{table_schema|upper}}\".\"{{table_name|upper}}\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6578069, "supported_languages": null}, "macro.re_data.pub_monitored_from_graph": {"unique_id": "macro.re_data.pub_monitored_from_graph", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/meta/get_monitored.sql", "original_file_path": "macros/meta/get_monitored.sql", "name": "pub_monitored_from_graph", "macro_sql": "{% macro pub_monitored_from_graph() %}\n    {% set monitored = [] %}\n    {% set both = []%}\n    {% do both.extend(graph.nodes.values()) %}\n    {% do both.extend(graph.sources.values()) %}\n    {% set owners_config = re_data.get_owners_config() %}\n\n    {% set select_var = var('re_data:select') %}\n    {% set select_all = true %}\n\n    {% set selected_nodes = none %}\n    {% set selected_tags = none %}\n\n    {% if select_var is not none %}\n        {% set select_all = false %}\n        {% set selected_nodes = dict() %}\n        {% set selected_tags = dict() %}\n\n        {% for el in select_var %}\n            {% if el.startswith('tag:') %}\n                {% do selected_tags.update({el[4:]: True}) %}\n            {% else %}\n                {% do selected_nodes.update({el: True}) %}\n            {% endif %}\n        {% endfor %}\n    {% endif %}\n\n    {% for el in both %}\n        {% if el.resource_type in ['model', 'seed', 'source'] %}\n            {% if el.config.get('re_data_monitored') %}\n                {% set target_name = el.identifier or el.alias or el.name %}\n\n                {% if select_all %}\n                    {% set selected = true %}\n                {% else %}\n                    {% set selected_name = selected_nodes.get(target_name, false) %}\n                    {% set selected_tag = [] %}\n\n                    {% for tag in el.config.tags %}\n                        {% if selected_tags.get(tag, false) %}\n                            {% do selected_tag.append(true) %}\n                        {% endif %}\n                    {% endfor %}\n                    \n                    {% set selected = selected_name or (selected_tag | length > 0) %}\n                {% endif %}\n\n                {% set metrics_groups = el.config.get('re_data_metrics_groups', var('re_data:default_metrics')) %}\n                {% set additional_metrics = el.config.get('re_data_metrics', {}) %}\n\n                {% do monitored.append({\n                    'name': re_data.name_in_db(target_name),\n                    'schema': re_data.name_in_db(el.schema),\n                    'database': re_data.name_in_db(el.database),\n                    'time_filter': el.config.get('re_data_time_filter', none),\n                    'metrics_groups': metrics_groups,\n                    'additional_metrics': re_data.metrics_in_db(additional_metrics),\n                    'metrics': re_data.metrics_in_db(re_data.final_metrics(metrics_groups, additional_metrics)),\n                    'columns': re_data.columns_in_db(el.config.get('re_data_columns', none)),\n                    'anomaly_detector': el.config.get('re_data_anomaly_detector', var('re_data:anomaly_detector', {})),\n                    'owners': re_data.prepare_model_owners(el.config.get('re_data_owners', []), owners_config),\n                    'selected': selected\n                    })\n                %}\n            {% endif %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(monitored) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.get_owners_config", "macro.re_data.name_in_db", "macro.re_data.metrics_in_db", "macro.re_data.final_metrics", "macro.re_data.columns_in_db", "macro.re_data.prepare_model_owners"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6720023, "supported_languages": null}, "macro.re_data.get_owners_config": {"unique_id": "macro.re_data.get_owners_config", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/meta/get_monitored.sql", "original_file_path": "macros/meta/get_monitored.sql", "name": "get_owners_config", "macro_sql": "{% macro get_owners_config() %}\n    {% set owners_config = var('re_data:owners_config', {}) %}\n    {{ return (owners_config) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6724877, "supported_languages": null}, "macro.re_data.prepare_model_owners": {"unique_id": "macro.re_data.prepare_model_owners", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/meta/get_monitored.sql", "original_file_path": "macros/meta/get_monitored.sql", "name": "prepare_model_owners", "macro_sql": "{% macro prepare_model_owners(re_data_owners, owners_config) %}\n    {% set owners = {} %}\n    {% set seen_identifiers = {} %}\n    {% for owner in re_data_owners if owners_config.get(owner) %}\n        {% set members = owners_config.get(owner) %}\n        {% for member in members %}\n            {% set identifier = member.get('identifier') %}\n            {% if identifier not in seen_identifiers %}\n            {% do seen_identifiers.update({identifier: true }) %}\n            {% do owners.update({\n                identifier: {\n                    'notify_channel': member.get('type'),\n                    'owner': owner,\n                    'name': member.get('name') \n                } \n            }) %}\n            {% endif %}\n        {% endfor %}\n    {% endfor %}\n    {{ return (owners) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6743543, "supported_languages": null}, "macro.re_data.save_monitored": {"unique_id": "macro.re_data.save_monitored", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/meta/save_monitored.sql", "original_file_path": "macros/meta/save_monitored.sql", "name": "save_monitored", "macro_sql": "{% macro save_monitored(monitored_path) %}\n\n    {% set monitored_query %}\n        select\n            {{ full_table_name('name', 'schema', 'database') }} as {{ re_data.quote_column('model') }},\n             time_filter as {{ re_data.quote_column('time_filter') }},\n            metrics as {{ re_data.quote_column('metrics') }},\n            columns as {{ re_data.quote_column('columns') }},\n            anomaly_detector as {{ re_data.quote_column('anomaly_detector') }},\n            owners as {{ re_data.quote_column('owners') }}\n        from {{ ref('re_data_selected') }}\n    {% endset %}\n    {% set query_result = run_query(monitored_query) %}\n    {% set monitored_file_path = monitored_path or 'target/re_data/monitored.json' %}\n    {% do query_result.to_json(monitored_file_path) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.full_table_name", "macro.re_data.quote_column", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6765883, "supported_languages": null}, "macro.re_data.filter_remove_duplicates": {"unique_id": "macro.re_data.filter_remove_duplicates", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/filtering/remove_duplicates.sql", "original_file_path": "macros/public/filtering/remove_duplicates.sql", "name": "filter_remove_duplicates", "macro_sql": "{% macro filter_remove_duplicates(relation, unique_cols, sort_columns) %}\n    (\n        with with_row_num as (\n            {{re_data.add_duplication_context(relation, unique_cols, sort_columns)}}\n        ),\n        one_row_num as (\n            select * from with_row_num where re_data_duplicate_group_row_number = 1\n        )\n        select {{ dbt_utils.star(from=relation) }}\n        from one_row_num\n    ) \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.add_duplication_context", "macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6774435, "supported_languages": null}, "macro.re_data.filter_get_duplicates": {"unique_id": "macro.re_data.filter_get_duplicates", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/filtering/get_duplicates.sql", "original_file_path": "macros/public/filtering/get_duplicates.sql", "name": "filter_get_duplicates", "macro_sql": "{% macro filter_get_duplicates(relation, unique_cols, sort_columns) %}\n    (\n        with duplication_context as (\n            {{re_data.add_duplication_context(relation, unique_cols, sort_columns)}}\n        ),\n        duplicate_rows as (\n            select * from duplication_context where re_data_duplicate_group_row_count > 1\n        )\n        {# return surrogate key as well? #}\n        select *\n        from duplicate_rows\n    ) \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.add_duplication_context"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6781926, "supported_languages": null}, "macro.re_data.is_dbt_relation": {"unique_id": "macro.re_data.is_dbt_relation", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/normalizing/normalize_values.sql", "original_file_path": "macros/public/normalizing/normalize_values.sql", "name": "is_dbt_relation", "macro_sql": "{% macro is_dbt_relation(obj) %}\n    {{ return (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation') )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6797187, "supported_languages": null}, "macro.re_data.normalize_expression_cte": {"unique_id": "macro.re_data.normalize_expression_cte", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/normalizing/normalize_values.sql", "original_file_path": "macros/public/normalizing/normalize_values.sql", "name": "normalize_expression_cte", "macro_sql": "{% macro normalize_expression_cte(reference_table) %}\n    with target_table as (\n        {% if re_data.is_dbt_relation(reference_table) or reference_table is string %}\n            select * from {{ reference_table }}\n        {% elif reference_table is mapping %}\n            {% for key, value in reference_table.items() %}\n                select '{{key}}' as source, '{{value}}' as target\n                {% if not loop.last %}union all{% endif %}\n            {% endfor %}\n        {% endif %}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.is_dbt_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6807697, "supported_languages": null}, "macro.re_data.normalize_values": {"unique_id": "macro.re_data.normalize_values", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/normalizing/normalize_values.sql", "original_file_path": "macros/public/normalizing/normalize_values.sql", "name": "normalize_values", "macro_sql": "\n\n{%- macro normalize_values(source_relation, column_name, reference_table) -%}\n    ( \n        {{ re_data.normalize_expression_cte(reference_table) }}\n        \n        select s.*, \n        case when t.source is null\n                then s.{{column_name}}\n            else t.target\n            end as {{ column_name + '__normalized'}} \n        from {{ source_relation }} s\n        left join target_table t \n        on t.source = s.{{column_name}}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.normalize_expression_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6813354, "supported_languages": null}, "macro.re_data.clean_capitalize_words": {"unique_id": "macro.re_data.clean_capitalize_words", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/cleaning/clean_capitalize_words.sql", "original_file_path": "macros/public/cleaning/clean_capitalize_words.sql", "name": "clean_capitalize_words", "macro_sql": "{% macro clean_capitalize_words(column_name) %}\n    initcap( {{column_name}} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6817849, "supported_languages": null}, "macro.re_data.generate_blacklist_pattern": {"unique_id": "macro.re_data.generate_blacklist_pattern", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/cleaning/clean_blacklist.sql", "original_file_path": "macros/public/cleaning/clean_blacklist.sql", "name": "generate_blacklist_pattern", "macro_sql": "{% macro generate_blacklist_pattern(chars_to_blacklist) %}\n    {% set pattern = [] %}\n    {% for char in chars_to_blacklist %}\n        {% set expr = '(' + char + ')' %}\n        {% do pattern.append(expr) %}\n    {% endfor %}\n\n    {{ return(pattern | join('|')) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6836534, "supported_languages": null}, "macro.re_data.clean_blacklist": {"unique_id": "macro.re_data.clean_blacklist", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/cleaning/clean_blacklist.sql", "original_file_path": "macros/public/cleaning/clean_blacklist.sql", "name": "clean_blacklist", "macro_sql": "\n\n{%- macro clean_blacklist(column_name, chars_to_blacklist, replacement) -%}\n    {% set pattern_string = re_data.generate_blacklist_pattern(chars_to_blacklist) %}\n\n    {{ adapter.dispatch('clean_blacklist', 're_data')(column_name, pattern_string, replacement) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.generate_blacklist_pattern", "macro.re_data.default__clean_blacklist"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6842396, "supported_languages": null}, "macro.re_data.default__clean_blacklist": {"unique_id": "macro.re_data.default__clean_blacklist", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/cleaning/clean_blacklist.sql", "original_file_path": "macros/public/cleaning/clean_blacklist.sql", "name": "default__clean_blacklist", "macro_sql": "{%- macro default__clean_blacklist(column_name, pattern_string, replacement) -%}\n    regexp_replace( {{ column_name }}, '{{ pattern_string }}', '{{ replacement }}')\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6845977, "supported_languages": null}, "macro.re_data.postgres__clean_blacklist": {"unique_id": "macro.re_data.postgres__clean_blacklist", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/cleaning/clean_blacklist.sql", "original_file_path": "macros/public/cleaning/clean_blacklist.sql", "name": "postgres__clean_blacklist", "macro_sql": "{%- macro postgres__clean_blacklist(column_name, pattern_string, replacement) -%}\n    regexp_replace( {{ column_name }}, '{{ pattern_string }}', '{{ replacement }}', 'g')\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6849656, "supported_languages": null}, "macro.re_data.redshift__clean_blacklist": {"unique_id": "macro.re_data.redshift__clean_blacklist", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/cleaning/clean_blacklist.sql", "original_file_path": "macros/public/cleaning/clean_blacklist.sql", "name": "redshift__clean_blacklist", "macro_sql": "{%- macro redshift__clean_blacklist(column_name, pattern_string, replacement) -%}\n    regexp_replace( {{ column_name }}, '{{ pattern_string }}', '{{ replacement }}')\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6853147, "supported_languages": null}, "macro.re_data.bigquery__clean_blacklist": {"unique_id": "macro.re_data.bigquery__clean_blacklist", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/cleaning/clean_blacklist.sql", "original_file_path": "macros/public/cleaning/clean_blacklist.sql", "name": "bigquery__clean_blacklist", "macro_sql": "{%- macro bigquery__clean_blacklist(column_name, pattern_string, replacement) -%}\n    regexp_replace( {{ column_name }}, \"\"\"{{ pattern_string }}\"\"\", '{{ replacement }}')\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6857355, "supported_languages": null}, "macro.re_data.clean_additional_whitespaces": {"unique_id": "macro.re_data.clean_additional_whitespaces", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/cleaning/clean_additional_whitespace.sql", "original_file_path": "macros/public/cleaning/clean_additional_whitespace.sql", "name": "clean_additional_whitespaces", "macro_sql": "{% macro clean_additional_whitespaces(column_name) %}\n    {{ adapter.dispatch('clean_additional_whitespaces', 're_data')(column_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__clean_additional_whitespaces"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6866853, "supported_languages": null}, "macro.re_data.default__clean_additional_whitespaces": {"unique_id": "macro.re_data.default__clean_additional_whitespaces", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/cleaning/clean_additional_whitespace.sql", "original_file_path": "macros/public/cleaning/clean_additional_whitespace.sql", "name": "default__clean_additional_whitespaces", "macro_sql": "{% macro default__clean_additional_whitespaces(column_name) %}\n    trim(regexp_replace( {{ column_name }}, '\\s\\s+', ' '))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.686944, "supported_languages": null}, "macro.re_data.postgres__clean_additional_whitespaces": {"unique_id": "macro.re_data.postgres__clean_additional_whitespaces", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/cleaning/clean_additional_whitespace.sql", "original_file_path": "macros/public/cleaning/clean_additional_whitespace.sql", "name": "postgres__clean_additional_whitespaces", "macro_sql": "{% macro postgres__clean_additional_whitespaces(column_name) %}\n    trim(regexp_replace( {{ column_name }}, '\\s\\s+', ' ', 'g'))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.68718, "supported_languages": null}, "macro.re_data.redshift__clean_additional_whitespaces": {"unique_id": "macro.re_data.redshift__clean_additional_whitespaces", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/cleaning/clean_additional_whitespace.sql", "original_file_path": "macros/public/cleaning/clean_additional_whitespace.sql", "name": "redshift__clean_additional_whitespaces", "macro_sql": "{% macro redshift__clean_additional_whitespaces(column_name) %}\n    trim(regexp_replace( {{ column_name }}, '\\\\s\\\\s+', ' '))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.687407, "supported_languages": null}, "macro.re_data.bigquery__clean_additional_whitespaces": {"unique_id": "macro.re_data.bigquery__clean_additional_whitespaces", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/cleaning/clean_additional_whitespace.sql", "original_file_path": "macros/public/cleaning/clean_additional_whitespace.sql", "name": "bigquery__clean_additional_whitespaces", "macro_sql": "{% macro bigquery__clean_additional_whitespaces(column_name) %}\n    trim(regexp_replace( {{ column_name }}, r'\\s\\s+', ' '))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6876342, "supported_languages": null}, "macro.re_data.snowflake__clean_additional_whitespaces": {"unique_id": "macro.re_data.snowflake__clean_additional_whitespaces", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/cleaning/clean_additional_whitespace.sql", "original_file_path": "macros/public/cleaning/clean_additional_whitespace.sql", "name": "snowflake__clean_additional_whitespaces", "macro_sql": "{% macro snowflake__clean_additional_whitespaces(column_name) %}\n    trim(regexp_replace( {{ column_name }}, '\\\\s\\\\s+', ' '))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6878605, "supported_languages": null}, "macro.re_data.export_alerts": {"unique_id": "macro.re_data.export_alerts", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/store/export_alerts.sql", "original_file_path": "macros/public/store/export_alerts.sql", "name": "export_alerts", "macro_sql": "{% macro export_alerts(start_date, end_date, alerts_path=None, monitored_path=None) %}\n    {% set alerts_query %}\n        select\n            type as {{ re_data.quote_column('type') }},\n            model as {{ re_data.quote_column('model') }},\n            message as {{ re_data.quote_column('message') }},\n            value as {{ re_data.quote_column('value') }},\n            {{ format_timestamp('time_window_end')}} as {{ re_data.quote_column('time_window_end') }} \n        from {{ ref('re_data_alerts') }}\n        where\n            case\n                when type = 'anomaly' then {{ in_date_window('time_window_end', start_date, end_date) }}\n                else {{ in_date_window('time_window_end', start_date, none) }}\n            end\n        order by time_window_end desc\n    {% endset %}\n\n    {% set query_result = run_query(alerts_query) %}\n    {% set alerts_file_path = alerts_path or 'target/re_data/alerts.json' %}\n    {% do query_result.to_json(alerts_file_path) %}\n    {{ save_monitored(monitored_path) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.quote_column", "macro.re_data.format_timestamp", "macro.re_data.in_date_window", "macro.dbt.run_query", "macro.re_data.save_monitored"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6906648, "supported_languages": null}, "macro.re_data.export_tests_history": {"unique_id": "macro.re_data.export_tests_history", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/store/export_tests_history.sql", "original_file_path": "macros/public/store/export_tests_history.sql", "name": "export_tests_history", "macro_sql": "{% macro export_tests_history(start_date, end_date, tests_history_path=None) %}\n    {% set tests_history_query %}\n        select\n            table_name,\n            column_name,\n            test_name,\n            run_at,\n            status,\n            execution_time, \n            message, \n            failures_count, \n            failures_json, \n            failures_table,\n            severity, \n            compiled_sql\n        from\n            {{ ref('re_data_test_history') }}\n        where {{ in_date_window('run_at', start_date, end_date) }}\n    {% endset %}\n\n    {% set query_result = run_query(tests_history_query) %}\n    {% set tests_history_file_path = tests_history_path or 'target/re_data/tests_history.json' %}\n    {% do query_result.to_json(tests_history_file_path) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.in_date_window", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6920793, "supported_languages": null}, "macro.re_data.export_table_samples": {"unique_id": "macro.re_data.export_table_samples", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/store/export_table_samples.sql", "original_file_path": "macros/public/store/export_table_samples.sql", "name": "export_table_samples", "macro_sql": "{% macro export_table_samples(start_date, end_date, table_samples_path=None) %}\n    {% set table_samples_query %}\n        select\n            lower(table_name) as table_name,\n            sample_data,\n            sampled_on\n        from\n            {{ ref('re_data_table_samples') }}\n    {% endset %}\n\n    {% set query_result = run_query(table_samples_query) %}\n    {% set table_samples_file_path = table_samples_path or 'target/re_data/table_samples.json' %}\n    {% do query_result.to_json(table_samples_file_path) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.6932652, "supported_languages": null}, "macro.re_data.overview_select_base": {"unique_id": "macro.re_data.overview_select_base", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/store/generate_overview.sql", "original_file_path": "macros/public/store/generate_overview.sql", "name": "overview_select_base", "macro_sql": "{% macro overview_select_base(type, timestamp_col) %}\n    '{{ type }}' as {{ re_data.quote_column('type') }},\n    table_name as {{ re_data.quote_column('table_name') }},\n    column_name as {{ re_data.quote_column('column_name') }},\n    {{ timestamp_col }} as {{ re_data.quote_column('computed_on') }},\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7005763, "supported_languages": null}, "macro.re_data.generate_overview": {"unique_id": "macro.re_data.generate_overview", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/store/generate_overview.sql", "original_file_path": "macros/public/store/generate_overview.sql", "name": "generate_overview", "macro_sql": "{% macro generate_overview(start_date, end_date, interval, overview_path=None, monitored_path=None) %}\n-- depends_on: {{ ref('re_data_anomalies') }}\n-- depends_on: {{ ref('re_data_base_metrics') }}\n-- depends_on: {{ ref('re_data_schema_changes') }}\n-- depends_on: {{ ref('re_data_columns') }}\n\n    {# time grain is either days or hour #}\n    {% set time_grain, num_str = interval.split(':') %}\n    {% set num = num_str | int %}\n    {% if time_grain == 'hours' %}\n        {% set interval_length_sec = num * 3600 %}\n    {% elif time_grain == 'days'%}\n        {% set interval_length_sec = num * 3600 * 24 %}\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Invalid interval. Got: \" ~ interval) }}\n    {% endif %}\n    {{ dbt_utils.log_info('[re_data] interval length in seconds is ' ~ interval_length_sec) }}\n    {% set overview_query %}\n        with schema_changes_casted as (\n            select id, table_name, operation, column_name, data_type, {{ bool_to_string('is_nullable') }}, prev_column_name, prev_data_type, {{ bool_to_string('prev_is_nullable') }}, detected_time\n            from {{ ref('re_data_schema_changes') }}\n        ),\n        columns_casted as (\n            select {{ full_table_name('name', 'schema', 'database') }} as table_name, column_name, data_type, {{ bool_to_string('is_nullable') }}, computed_on\n            from {{ ref('re_data_columns') }} \n        )\n        \n    (    \n        select\n            {{ overview_select_base('metric', 'computed_on')}}\n            {{ to_single_json(['metric', 'value', 'time_window_end', 'interval_length_sec']) }} as {{ re_data.quote_column('data') }}\n        from\n            {{ ref('re_data_base_metrics') }}\n            where {{ in_date_window('time_window_end', start_date, end_date) }}\n            and interval_length_sec = {{interval_length_sec}}\n    ) union all \n    (\n        select\n            {{ overview_select_base('anomaly', 'computed_on')}}\n            {{ to_single_json(['id', 'metric', 'z_score_value', 'last_value', 'last_avg', 'last_stddev', 'time_window_end', 'interval_length_sec']) }} as {{ re_data.quote_column('data') }}\n        from\n            {{ ref('re_data_anomalies') }}\n            where {{ in_date_window('time_window_end', start_date, end_date) }}\n            and interval_length_sec = {{interval_length_sec}}\n    ) union all\n    (\n        select\n            {{ overview_select_base('schema_change', 'detected_time')}}\n            {{ to_single_json(['id', 'operation', 'data_type', 'is_nullable', 'prev_column_name', 'prev_data_type', 'prev_is_nullable', 'detected_time']) }} as {{ re_data.quote_column('data') }}\n        from\n            schema_changes_casted\n            where {{ in_date_window('detected_time', start_date, none) }}\n    ) union all\n    (\n        select\n            {{ overview_select_base('schema', 'computed_on')}}\n            {{ to_single_json(['data_type', 'is_nullable']) }} as {{ re_data.quote_column('data') }}\n        from\n            columns_casted\n    )\n    union all \n    (\n        select \n            'alert' as {{ re_data.quote_column('type') }},\n            model as {{ re_data.quote_column('table_name') }},\n            null as {{ re_data.quote_column('column_name') }},\n            time_window_end as {{ re_data.quote_column('computed_on') }},\n            {{ to_single_json(['type', 'model', 'message', 'value', 'time_window_end']) }} as {{ re_data.quote_column('data') }}\n        from\n            {{ ref('re_data_alerts') }}\n        where\n            case\n                when type = 'anomaly' then {{ in_date_window('time_window_end', start_date, end_date)  }} \n                else {{ in_date_window('time_window_end', start_date, none) }}\n            end\n    )\n    order by {{ re_data.quote_column('computed_on')}} desc\n    {% endset %}\n\n    {% set overview_result = run_query(overview_query) %}\n    {% set overview_file_path = overview_path or 'target/re_data/overview.json' %}\n    {% do overview_result.to_json(overview_file_path) %}\n    {{ save_monitored(monitored_path) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.log_info", "macro.re_data.bool_to_string", "macro.re_data.full_table_name", "macro.re_data.overview_select_base", "macro.re_data.to_single_json", "macro.re_data.quote_column", "macro.re_data.in_date_window", "macro.dbt.run_query", "macro.re_data.save_monitored"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7071307, "supported_languages": null}, "macro.re_data.get_regex_for": {"unique_id": "macro.re_data.get_regex_for", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/regex_dict.sql", "original_file_path": "macros/public/validating/regex_dict.sql", "name": "get_regex_for", "macro_sql": "{% macro get_regex_for(to_validate) %}\n\n    {% set regexp_dict = {\n        'number_whole': '^\\-?[0-9]+$',\n        'number_decimal_point': '^\\-?[0-9]+\\.[0-9]+$',\n        'number_decimal_comma': '^\\-?[0-9]+,[0-9]+$',\n        'number_percentage': '^\\-?[0-9]+([\\.,][0-9]+)? ?%$',\n        'number_percentage_point': '^\\-?[0-9]+([\\.][0-9]+)? ?%$',\n        'number_percentage_comma': '^\\-?[0-9]+([,][0-9]+)? ?%$',\n        'date_eu': '^([1-9]|0[1-9]|[12][0-9]|3[01])[-\\./]([1-9]|0[1-9]|1[012])[-\\./](19|20)?[0-9][0-9]$',\n        'date_us': '^([1-9]|0[1-9]|1[012])[-\\./]([1-9]|0[1-9]|[12][0-9]|3[01])[-\\./](19|20)?[0-9][0-9]$',\n        'date_inverse': '^(19|20)[0-9][0-9][-\\./]?([1-9]|0[1-9]|1[012])[-\\./]?([1-9]|0[1-9]|[12][0-9]|3[01])$',\n        'time_24h': '^([01][0-9]|2[0-3]):([0-5][0-9])$',\n        'time_12h': '^(1[0-2]|0?[1-9]):[0-5][0-9]$',\n        'time': '^([0-9]|1[0-9]|2[0-4])[:-]([0-9]|[0-5][0-9])([:-]([0-9]|[0-5][0-9])(,[0-9]+)?)?$',\n        'date_iso_8601':\n            '^'\n            '([1-9][0-9]{3}-((0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-8])|(0[13-9]|1[0-2])-(29|30)|(0[13578]|1[02])-31)|'\n            '([1-9][0-9](0[48]|[2468][048]|[13579][26])|([2468][048]|[13579][26])00)-02-29)'\n\n            'T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?'\n\n            '(Z|[+-][01][0-9]:[0-5][0-9])?'\n            '$',\n        'uuid': '^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$',\n        'ipv4_address': '^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$',\n        'ipv6_address': '^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?$',\n        'email': '^[A-Za-z0-9.-_%]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$',\n        } %}\n\n    {% set base_regex = regexp_dict[to_validate] %}\n    {% set qualifed_regex = adapter.dispatch('get_regex_for', 're_data')(base_regex) %}\n    {{ return(qualifed_regex) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__get_regex_for"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.71139, "supported_languages": null}, "macro.re_data.default__get_regex_for": {"unique_id": "macro.re_data.default__get_regex_for", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/regex_dict.sql", "original_file_path": "macros/public/validating/regex_dict.sql", "name": "default__get_regex_for", "macro_sql": "{% macro default__get_regex_for(pattern) %}\n    {{ return (pattern) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7116973, "supported_languages": null}, "macro.re_data.redshift__get_regex_for": {"unique_id": "macro.re_data.redshift__get_regex_for", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/regex_dict.sql", "original_file_path": "macros/public/validating/regex_dict.sql", "name": "redshift__get_regex_for", "macro_sql": "{% macro redshift__get_regex_for(pattern) %}\n    {% set changed = modules.re.sub('\\.', '\\\\.', pattern) %}\n    {% set changed = modules.re.sub('\\-', '\\\\-', changed) %}\n    {{ return (changed) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.712551, "supported_languages": null}, "macro.re_data.snowflake__get_regex_for": {"unique_id": "macro.re_data.snowflake__get_regex_for", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/regex_dict.sql", "original_file_path": "macros/public/validating/regex_dict.sql", "name": "snowflake__get_regex_for", "macro_sql": "{% macro snowflake__get_regex_for(pattern) %}\n    {% set changed = modules.re.sub('\\.', '\\\\.', pattern) %}\n    {% set changed = modules.re.sub('\\-', '\\\\-', changed) %}\n    {{ return (changed) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7134256, "supported_languages": null}, "macro.re_data.valid_regex": {"unique_id": "macro.re_data.valid_regex", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_regex", "macro_sql": "{% macro valid_regex(column_name, to_validate) %}\n{% set pattern = re_data.get_regex_for(to_validate) %}\n  case when \n    {{ column_name }} is null then false \n    else {{ re_data.regex_match_expression(column_name, pattern) }}\n  end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.get_regex_for", "macro.re_data.regex_match_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7174118, "supported_languages": null}, "macro.re_data.valid_email": {"unique_id": "macro.re_data.valid_email", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_email", "macro_sql": "{% macro valid_email(column_name) %}\n    {{ re_data.valid_regex(column_name, 'email')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7177427, "supported_languages": null}, "macro.re_data.valid_date_eu": {"unique_id": "macro.re_data.valid_date_eu", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_date_eu", "macro_sql": "{% macro valid_date_eu(column_name) %}\n    {{ re_data.valid_regex(column_name, 'date_eu')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7180607, "supported_languages": null}, "macro.re_data.valid_date_us": {"unique_id": "macro.re_data.valid_date_us", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_date_us", "macro_sql": "{% macro valid_date_us(column_name) %}\n    {{ re_data.valid_regex(column_name, 'date_us')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.718372, "supported_languages": null}, "macro.re_data.valid_date_inverse": {"unique_id": "macro.re_data.valid_date_inverse", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_date_inverse", "macro_sql": "{% macro valid_date_inverse(column_name) %}\n    {{ re_data.valid_regex(column_name, 'date_inverse')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.718692, "supported_languages": null}, "macro.re_data.valid_date_iso_8601": {"unique_id": "macro.re_data.valid_date_iso_8601", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_date_iso_8601", "macro_sql": "{% macro valid_date_iso_8601(column_name) %}\n    {{ re_data.valid_regex(column_name, 'date_iso_8601')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7190194, "supported_languages": null}, "macro.re_data.valid_time_24h": {"unique_id": "macro.re_data.valid_time_24h", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_time_24h", "macro_sql": "{% macro valid_time_24h(column_name) %}\n    {{ re_data.valid_regex(column_name, 'time_24h')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7193358, "supported_languages": null}, "macro.re_data.valid_time_12h": {"unique_id": "macro.re_data.valid_time_12h", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_time_12h", "macro_sql": "{% macro valid_time_12h(column_name) %}\n    {{ re_data.valid_regex(column_name, 'time_12h')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7196507, "supported_languages": null}, "macro.re_data.valid_time": {"unique_id": "macro.re_data.valid_time", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_time", "macro_sql": "{% macro valid_time(column_name) %}\n    {{ re_data.valid_regex(column_name, 'time')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.71996, "supported_languages": null}, "macro.re_data.valid_ip_v4": {"unique_id": "macro.re_data.valid_ip_v4", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_ip_v4", "macro_sql": "{% macro valid_ip_v4(column_name) %}\n    {{ re_data.valid_regex(column_name, 'ipv4_address')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7202735, "supported_languages": null}, "macro.re_data.valid_ip_v6": {"unique_id": "macro.re_data.valid_ip_v6", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_ip_v6", "macro_sql": "{% macro valid_ip_v6(column_name) %}\n    {{ re_data.valid_regex(column_name, 'ipv6_address')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.720786, "supported_languages": null}, "macro.re_data.valid_ip": {"unique_id": "macro.re_data.valid_ip", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_ip", "macro_sql": "{% macro valid_ip(column_name) %}\n    (\n        {{ re_data.valid_regex(column_name, 'ipv4_address')}}\n    or \n        {{ re_data.valid_regex(column_name, 'ipv6_address')}}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7212532, "supported_languages": null}, "macro.re_data.valid_number": {"unique_id": "macro.re_data.valid_number", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_number", "macro_sql": "{% macro valid_number(column_name) %}\n    {{ re_data.valid_regex(column_name, 'number_whole')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.721655, "supported_languages": null}, "macro.re_data.valid_number_decimal_point": {"unique_id": "macro.re_data.valid_number_decimal_point", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_number_decimal_point", "macro_sql": "{% macro valid_number_decimal_point(column_name) %}\n    {{ re_data.valid_regex(column_name, 'number_decimal_point')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7219815, "supported_languages": null}, "macro.re_data.valid_number_decimal_comma": {"unique_id": "macro.re_data.valid_number_decimal_comma", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_number_decimal_comma", "macro_sql": "{% macro valid_number_decimal_comma(column_name) %}\n    {{ re_data.valid_regex(column_name, 'number_decimal_comma')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7222981, "supported_languages": null}, "macro.re_data.valid_number_percentage": {"unique_id": "macro.re_data.valid_number_percentage", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_number_percentage", "macro_sql": "{% macro valid_number_percentage(column_name) %}\n    {{ re_data.valid_regex(column_name, 'number_percentage')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7226145, "supported_languages": null}, "macro.re_data.valid_number_percentage_point": {"unique_id": "macro.re_data.valid_number_percentage_point", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_number_percentage_point", "macro_sql": "{% macro valid_number_percentage_point(column_name) %}\n    {{ re_data.valid_regex(column_name, 'number_percentage_point')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7229412, "supported_languages": null}, "macro.re_data.valid_number_percentage_comma": {"unique_id": "macro.re_data.valid_number_percentage_comma", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_number_percentage_comma", "macro_sql": "{% macro valid_number_percentage_comma(column_name) %}\n    {{ re_data.valid_regex(column_name, 'number_percentage_comma')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7232609, "supported_languages": null}, "macro.re_data.valid_phone": {"unique_id": "macro.re_data.valid_phone", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_phone", "macro_sql": "{% macro valid_phone(column_name) %}\n    {{ re_data.valid_regex(column_name, 'phone')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7235773, "supported_languages": null}, "macro.re_data.valid_uuid": {"unique_id": "macro.re_data.valid_uuid", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_uuid", "macro_sql": "{% macro valid_uuid(column_name) %}\n    {{ re_data.valid_regex(column_name, 'uuid')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.723891, "supported_languages": null}, "macro.re_data.valid_credit_card": {"unique_id": "macro.re_data.valid_credit_card", "package_name": "re_data", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_credit_card", "macro_sql": "{% macro valid_credit_card(column_name) %}\n    {{ re_data.valid_regex(column_name, 'credit_card_number')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.724203, "supported_languages": null}, "macro.dbt_artifacts.upload_exposures": {"unique_id": "macro.dbt_artifacts.upload_exposures", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_exposures.sql", "original_file_path": "macros/upload_exposures.sql", "name": "upload_exposures", "macro_sql": "{% macro upload_exposures(graph) -%}\n    {% set exposures = [] %}\n    {% for node in graph.exposures.values() %}\n        {% do exposures.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_exposures_dml_sql', 'dbt_artifacts')(exposures)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__get_exposures_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.728463, "supported_languages": null}, "macro.dbt_artifacts.default__get_exposures_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_exposures_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_exposures.sql", "original_file_path": "macros/upload_exposures.sql", "name": "default__get_exposures_dml_sql", "macro_sql": "{% macro default__get_exposures_dml_sql(exposures) -%}\n\n    {% if exposures != [] %}\n        {% set exposure_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(6)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }}\n        from values\n        {% for exposure in exposures -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ exposure.unique_id | replace(\"'\",\"\\\\'\") }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ exposure.name | replace(\"'\",\"\\\\'\") }}', {# name #}\n                '{{ exposure.type }}', {# type #}\n                '{{ tojson(exposure.owner) }}', {# owner #}\n                '{{ exposure.maturity }}', {# maturity #}\n                '{{ exposure.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ exposure.description | replace(\"'\",\"\\\\'\") }}', {# description #}\n                '{{ exposure.url }}', {# url #}\n                '{{ exposure.package_name }}', {# package_name #}\n                '{{ tojson(exposure.depends_on.nodes) }}' {# depends_on_nodes #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ exposure_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7329204, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_exposures_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_exposures_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_exposures.sql", "original_file_path": "macros/upload_exposures.sql", "name": "bigquery__get_exposures_dml_sql", "macro_sql": "{% macro bigquery__get_exposures_dml_sql(exposures) -%}\n    {% if exposures != [] %}\n        {% set exposure_values %}\n            {% for exposure in exposures -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ exposure.unique_id | replace(\"'\",\"\\\\'\") }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ exposure.name | replace(\"'\",\"\\\\'\") }}', {# name #}\n                    '{{ exposure.type }}', {# type #}\n                    parse_json('{{ tojson(exposure.owner) | replace(\"'\",\"\\\\'\") }}'), {# owner #}\n                    '{{ exposure.maturity }}', {# maturity #}\n                    '{{ exposure.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    \"\"\"{{ exposure.description | replace(\"'\",\"\\\\'\") }}\"\"\", {# description #}\n                    '{{ exposure.url }}', {# url #}\n                    '{{ exposure.package_name }}', {# package_name #}\n                    {{ tojson(exposure.depends_on.nodes) }} {# depends_on_nodes #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ exposure_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7351434, "supported_languages": null}, "macro.dbt_artifacts.upload_test_executions": {"unique_id": "macro.dbt_artifacts.upload_test_executions", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_test_executions.sql", "original_file_path": "macros/upload_test_executions.sql", "name": "upload_test_executions", "macro_sql": "{% macro upload_test_executions(results) -%}\n    {% set tests = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"test\" %}\n            {% do tests.append(result) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_test_executions_dml_sql', 'dbt_artifacts')(tests)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__get_test_executions_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7394736, "supported_languages": null}, "macro.dbt_artifacts.default__get_test_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_test_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_test_executions.sql", "original_file_path": "macros/upload_test_executions.sql", "name": "default__get_test_executions_dml_sql", "macro_sql": "{% macro default__get_test_executions_dml_sql(tests) -%}\n    {% if tests != [] %}\n        {% set test_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }}\n        from values\n        {% for test in tests -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ test.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = test.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ test.thread_id }}', {# thread_id #}\n                '{{ test.status }}', {# status #}\n\n                {% if test.timing != [] %}\n                    {% for stage in test.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in test.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ test.execution_time }}, {# total_node_runtime #}\n                null, {# rows_affected not available in Databricks #}\n                {{ 'null' if test.failures is none else test.failures }} {# failures #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ test_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7448032, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_test_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_test_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_test_executions.sql", "original_file_path": "macros/upload_test_executions.sql", "name": "bigquery__get_test_executions_dml_sql", "macro_sql": "{% macro bigquery__get_test_executions_dml_sql(tests) -%}\n    {% if tests != [] %}\n        {% set test_execution_values %}\n        {% for test in tests -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ test.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = test.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                {{ config_full_refresh }}, {# was_full_refresh #}\n\n                '{{ test.thread_id }}', {# thread_id #}\n                '{{ test.status }}', {# status #}\n\n                {% if test.timing != [] %}\n                    {% for stage in test.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in test.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ test.execution_time }}, {# total_node_runtime #}\n                null, {# rows_affected not available in Databricks #}\n                {{ 'null' if test.failures is none else test.failures }} {# failures #}\n            )\n            {%- if not loop.last %},{%- endif %}\n\n        {%- endfor %}\n        {% endset %}\n        {{ test_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.748032, "supported_languages": null}, "macro.dbt_artifacts.upload_snapshot_executions": {"unique_id": "macro.dbt_artifacts.upload_snapshot_executions", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "name": "upload_snapshot_executions", "macro_sql": "{% macro upload_snapshot_executions(results) -%}\n    {% set snapshots = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"snapshot\" %}\n            {% do snapshots.append(result) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_snapshot_executions_dml_sql', 'dbt_artifacts')(snapshots)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7554238, "supported_languages": null}, "macro.dbt_artifacts.default__get_snapshot_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_snapshot_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "name": "default__get_snapshot_executions_dml_sql", "macro_sql": "{% macro default__get_snapshot_executions_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }}\n        from values\n        {% for model in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Only available in Snowflake #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7610607, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_snapshot_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_snapshot_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "name": "bigquery__get_snapshot_executions_dml_sql", "macro_sql": "{% macro bigquery__get_snapshot_executions_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_execution_values %}\n        {% for model in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                {{ config_full_refresh }}, {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Databricks #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.764471, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "name": "snowflake__get_snapshot_executions_dml_sql", "macro_sql": "{% macro snowflake__get_snapshot_executions_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n        from values\n        {% for model in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7701302, "supported_languages": null}, "macro.dbt_artifacts.get_relation": {"unique_id": "macro.dbt_artifacts.get_relation", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_results.sql", "original_file_path": "macros/upload_results.sql", "name": "get_relation", "macro_sql": "{% macro get_relation(get_relation_name) %}\n    {% if execute %}\n        {% set model_get_relation_node = graph.nodes.values() | selectattr('name', 'equalto', get_relation_name) | first %}\n        {% set relation = api.Relation.create(\n            database = model_get_relation_node.database,\n            schema = model_get_relation_node.schema,\n            identifier = model_get_relation_node.alias\n        )\n        %}\n        {% do return(relation) %}\n    {% else %}\n        {% do return(api.Relation.create()) %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7790518, "supported_languages": null}, "macro.dbt_artifacts.upload_results": {"unique_id": "macro.dbt_artifacts.upload_results", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_results.sql", "original_file_path": "macros/upload_results.sql", "name": "upload_results", "macro_sql": "{% macro upload_results(results) -%}\n\n    {% if execute %}\n\n        {% if results != [] %}\n            {% do log(\"Uploading model executions\", true) %}\n            {% set model_executions = dbt_artifacts.get_relation('model_executions') %}\n            {% set content_model_executions = dbt_artifacts.upload_model_executions(results) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=model_executions.database,\n                schema_name=model_executions.schema,\n                table_name=model_executions.identifier,\n                content=content_model_executions\n                )\n            }}\n\n            {% do log(\"Uploading seed executions\", true) %}\n            {% set seed_executions = dbt_artifacts.get_relation('seed_executions') %}\n            {% set content_seed_executions = dbt_artifacts.upload_seed_executions(results) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=seed_executions.database,\n                schema_name=seed_executions.schema,\n                table_name=seed_executions.identifier,\n                content=content_seed_executions\n                )\n            }}\n\n            {% do log(\"Uploading snapshot executions\", true) %}\n            {% set snapshot_executions = dbt_artifacts.get_relation('snapshot_executions') %}\n            {% set content_snapshot_executions = dbt_artifacts.upload_snapshot_executions(results) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=snapshot_executions.database,\n                schema_name=snapshot_executions.schema,\n                table_name=snapshot_executions.identifier,\n                content=content_snapshot_executions\n                )\n            }}\n\n            {% do log(\"Uploading test executions\", true) %}\n            {% set test_executions = dbt_artifacts.get_relation('test_executions') %}\n            {% set content_test_executions = dbt_artifacts.upload_test_executions(results) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=test_executions.database,\n                schema_name=test_executions.schema,\n                table_name=test_executions.identifier,\n                content=content_test_executions\n                )\n            }}\n\n        {% endif %}\n\n        {% do log(\"Uploading exposures\", true) %}\n        {% set exposures = dbt_artifacts.get_relation('exposures') %}\n        {% set content_exposures = dbt_artifacts.upload_exposures(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=exposures.database,\n            schema_name=exposures.schema,\n            table_name=exposures.identifier,\n            content=content_exposures\n            )\n        }}\n\n        {% do log(\"Uploading tests\", true) %}\n        {% set tests = dbt_artifacts.get_relation('tests') %}\n        {% set content_tests = dbt_artifacts.upload_tests(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=tests.database,\n            schema_name=tests.schema,\n            table_name=tests.identifier,\n            content=content_tests\n            )\n        }}\n\n        {% do log(\"Uploading seeds\", true) %}\n        {% set seeds = dbt_artifacts.get_relation('seeds') %}\n        {% set content_seeds = dbt_artifacts.upload_seeds(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=seeds.database,\n            schema_name=seeds.schema,\n            table_name=seeds.identifier,\n            content=content_seeds\n            )\n        }}\n\n        {% do log(\"Uploading models\", true) %}\n        {% set models = dbt_artifacts.get_relation('models') %}\n        {% set content_models = dbt_artifacts.upload_models(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=models.database,\n            schema_name=models.schema,\n            table_name=models.identifier,\n            content=content_models\n            )\n        }}\n\n        {% do log(\"Uploading sources\", true) %}\n        {% set sources = dbt_artifacts.get_relation('sources') %}\n        {% set content_sources = dbt_artifacts.upload_sources(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=sources.database,\n            schema_name=sources.schema,\n            table_name=sources.identifier,\n            content=content_sources\n            )\n        }}\n\n        {% do log(\"Uploading snapshots\", true) %}\n        {% set snapshots = dbt_artifacts.get_relation('snapshots') %}\n        {% set content_snapshots = dbt_artifacts.upload_snapshots(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=snapshots.database,\n            schema_name=snapshots.schema,\n            table_name=snapshots.identifier,\n            content=content_snapshots\n            )\n        }}\n\n        {% do log(\"Uploading invocations\", true) %}\n        {% set invocations = dbt_artifacts.get_relation('invocations') %}\n        {% set content_invocations = dbt_artifacts.upload_invocations() %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=invocations.database,\n            schema_name=invocations.schema,\n            table_name=invocations.identifier,\n            content=content_invocations\n            )\n        }}\n\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.get_relation", "macro.dbt_artifacts.upload_model_executions", "macro.dbt_artifacts.insert_into_metadata_table", "macro.dbt_artifacts.upload_seed_executions", "macro.dbt_artifacts.upload_snapshot_executions", "macro.dbt_artifacts.upload_test_executions", "macro.dbt_artifacts.upload_exposures", "macro.dbt_artifacts.upload_tests", "macro.dbt_artifacts.upload_seeds", "macro.dbt_artifacts.upload_models", "macro.dbt_artifacts.upload_sources", "macro.dbt_artifacts.upload_snapshots", "macro.dbt_artifacts.upload_invocations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7870917, "supported_languages": null}, "macro.dbt_artifacts.parse_json": {"unique_id": "macro.dbt_artifacts.parse_json", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "name": "parse_json", "macro_sql": "{% macro parse_json(field) -%}\n  {{ return(adapter.dispatch('parse_json')(field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7878752, "supported_languages": null}, "macro.dbt_artifacts.default__parse_json": {"unique_id": "macro.dbt_artifacts.default__parse_json", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "name": "default__parse_json", "macro_sql": "{% macro default__parse_json(field) -%}\n    {{ field }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.788101, "supported_languages": null}, "macro.dbt_artifacts.snowflake__parse_json": {"unique_id": "macro.dbt_artifacts.snowflake__parse_json", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "name": "snowflake__parse_json", "macro_sql": "{% macro snowflake__parse_json(field) -%}\n    parse_json({{ field }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7884035, "supported_languages": null}, "macro.dbt_artifacts.bigquery__parse_json": {"unique_id": "macro.dbt_artifacts.bigquery__parse_json", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "name": "bigquery__parse_json", "macro_sql": "{% macro bigquery__parse_json(field) -%}\n    parse_json({{ field }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.788639, "supported_languages": null}, "macro.dbt_artifacts.type_boolean": {"unique_id": "macro.dbt_artifacts.type_boolean", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "type_boolean", "macro_sql": "{% macro type_boolean() %}\n    {{ return(adapter.dispatch('type_boolean', 'dbt_artifacts')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7896714, "supported_languages": null}, "macro.dbt_artifacts.default__type_boolean": {"unique_id": "macro.dbt_artifacts.default__type_boolean", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "default__type_boolean", "macro_sql": "{% macro default__type_boolean() %}\n   {{ return(api.Column.translate_type(\"boolean\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7900145, "supported_languages": null}, "macro.dbt_artifacts.type_json": {"unique_id": "macro.dbt_artifacts.type_json", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "type_json", "macro_sql": "{% macro type_json() %}\n    {{ return(adapter.dispatch('type_json', 'dbt_artifacts')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__type_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7903776, "supported_languages": null}, "macro.dbt_artifacts.default__type_json": {"unique_id": "macro.dbt_artifacts.default__type_json", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "default__type_json", "macro_sql": "{% macro default__type_json() %}\n   {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7907104, "supported_languages": null}, "macro.dbt_artifacts.snowflake__type_json": {"unique_id": "macro.dbt_artifacts.snowflake__type_json", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "snowflake__type_json", "macro_sql": "{% macro snowflake__type_json() %}\n   OBJECT\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7908983, "supported_languages": null}, "macro.dbt_artifacts.bigquery__type_json": {"unique_id": "macro.dbt_artifacts.bigquery__type_json", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "bigquery__type_json", "macro_sql": "{% macro bigquery__type_json() %}\n   JSON\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7910674, "supported_languages": null}, "macro.dbt_artifacts.type_array": {"unique_id": "macro.dbt_artifacts.type_array", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "type_array", "macro_sql": "{% macro type_array() %}\n    {{ return(adapter.dispatch('type_array', 'dbt_artifacts')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__type_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7914214, "supported_languages": null}, "macro.dbt_artifacts.default__type_array": {"unique_id": "macro.dbt_artifacts.default__type_array", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "default__type_array", "macro_sql": "{% macro default__type_array() %}\n   {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7917473, "supported_languages": null}, "macro.dbt_artifacts.snowflake__type_array": {"unique_id": "macro.dbt_artifacts.snowflake__type_array", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "snowflake__type_array", "macro_sql": "{% macro snowflake__type_array() %}\n   ARRAY\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.791921, "supported_languages": null}, "macro.dbt_artifacts.bigquery__type_array": {"unique_id": "macro.dbt_artifacts.bigquery__type_array", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "bigquery__type_array", "macro_sql": "{% macro bigquery__type_array() %}\n   ARRAY<string>\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7920883, "supported_languages": null}, "macro.dbt_artifacts.surrogate_key": {"unique_id": "macro.dbt_artifacts.surrogate_key", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/surrogate_key.sql", "original_file_path": "macros/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "\n\n{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_artifacts')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.7934072, "supported_languages": null}, "macro.dbt_artifacts.default__surrogate_key": {"unique_id": "macro.dbt_artifacts.default__surrogate_key", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/surrogate_key.sql", "original_file_path": "macros/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ hash(concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.795328, "supported_languages": null}, "macro.dbt_artifacts.upload_sources": {"unique_id": "macro.dbt_artifacts.upload_sources", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_sources.sql", "original_file_path": "macros/upload_sources.sql", "name": "upload_sources", "macro_sql": "{% macro upload_sources(graph) -%}\n    {% set sources = [] %}\n    {% for node in graph.sources.values() %}\n        {% do sources.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_sources_dml_sql', 'dbt_artifacts')(sources)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__get_sources_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.799122, "supported_languages": null}, "macro.dbt_artifacts.default__get_sources_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_sources_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_sources.sql", "original_file_path": "macros/upload_sources.sql", "name": "default__get_sources_dml_sql", "macro_sql": "{% macro default__get_sources_dml_sql(sources) -%}\n\n    {% if sources != [] %}\n        {% set source_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(11)) }}\n        from values\n        {% for source in sources -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ source.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ source.database }}', {# database #}\n                '{{ source.schema }}', {# schema #}\n                '{{ source.source_name }}', {# source_name #}\n                '{{ source.loader }}', {# loader #}\n                '{{ source.name }}', {# name #}\n                '{{ source.identifier }}', {# identifier #}\n                '{{ source.loaded_at_field | replace(\"'\",\"\\\\'\") }}', {# loaded_at_field #}\n                '{{ tojson(source.freshness) | replace(\"'\",\"\\\\'\") }}' {# freshness #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ source_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8029487, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_sources_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_sources_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_sources.sql", "original_file_path": "macros/upload_sources.sql", "name": "bigquery__get_sources_dml_sql", "macro_sql": "{% macro bigquery__get_sources_dml_sql(sources) -%}\n    {% if sources != [] %}\n        {% set source_values %}\n            {% for source in sources -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ source.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ source.database }}', {# database #}\n                    '{{ source.schema }}', {# schema #}\n                    '{{ source.source_name }}', {# source_name #}\n                    '{{ source.loader }}', {# loader #}\n                    '{{ source.name }}', {# name #}\n                    '{{ source.identifier }}', {# identifier #}\n                    '{{ source.loaded_at_field | replace(\"'\",\"\\\\'\") }}', {# loaded_at_field #}\n                    parse_json('{{ tojson(source.freshness) | replace(\"'\",\"\\\\'\") }}')  {# freshness #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ source_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8048759, "supported_languages": null}, "macro.dbt_artifacts.upload_seeds": {"unique_id": "macro.dbt_artifacts.upload_seeds", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_seeds.sql", "original_file_path": "macros/upload_seeds.sql", "name": "upload_seeds", "macro_sql": "{% macro upload_seeds(graph) -%}\n    {% set seeds = [] %}\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"seed\") %}\n        {% do seeds.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_seeds_dml_sql', 'dbt_artifacts')(seeds)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__get_seeds_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8086426, "supported_languages": null}, "macro.dbt_artifacts.default__get_seeds_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_seeds_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_seeds.sql", "original_file_path": "macros/upload_seeds.sql", "name": "default__get_seeds_dml_sql", "macro_sql": "{% macro default__get_seeds_dml_sql(seeds) -%}\n\n    {% if seeds != [] %}\n        {% set seed_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(10)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }}\n        from values\n        {% for seed in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ seed.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ seed.database }}', {# database #}\n                '{{ seed.schema }}', {# schema #}\n                '{{ seed.name }}', {# name #}\n                '{{ seed.package_name }}', {# package_name #}\n                '{{ seed.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ seed.checksum.checksum }}', {# checksum #}\n                '{{ tojson(seed.config.meta) }}', {# meta #}\n                '{{ seed.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8123028, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_seeds_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_seeds_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_seeds.sql", "original_file_path": "macros/upload_seeds.sql", "name": "bigquery__get_seeds_dml_sql", "macro_sql": "{% macro bigquery__get_seeds_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_values %}\n            {% for seed in seeds -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ seed.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ seed.database }}', {# database #}\n                    '{{ seed.schema }}', {# schema #}\n                    '{{ seed.name }}', {# name #}\n                    '{{ seed.package_name }}', {# package_name #}\n                    '{{ seed.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    '{{ seed.checksum.checksum }}', {# checksum #}\n                    parse_json('{{ tojson(seed.config.meta) }}'), {# meta #}\n                    '{{ seed.alias }}' {# alias #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ seed_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8141735, "supported_languages": null}, "macro.dbt_artifacts.upload_models": {"unique_id": "macro.dbt_artifacts.upload_models", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_models.sql", "original_file_path": "macros/upload_models.sql", "name": "upload_models", "macro_sql": "{% macro upload_models(graph) -%}\n    {% set models = [] %}\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"model\") %}\n        {% do models.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_models_dml_sql', 'dbt_artifacts')(models)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__get_models_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8190503, "supported_languages": null}, "macro.dbt_artifacts.default__get_models_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_models_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_models.sql", "original_file_path": "macros/upload_models.sql", "name": "default__get_models_dml_sql", "macro_sql": "{% macro default__get_models_dml_sql(models) -%}\n\n    {% if models != [] %}\n        {% set model_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(7)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(13)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n        from values\n        {% for model in models -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ model.database }}', {# database #}\n                '{{ model.schema }}', {# schema #}\n                '{{ model.name }}', {# name #}\n                '{{ tojson(model.depends_on.nodes) | replace('\\\\', '\\\\\\\\') }}', {# depends_on_nodes #}\n                '{{ model.package_name }}', {# package_name #}\n                '{{ model.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ model.checksum.checksum }}', {# checksum #}\n                '{{ model.config.materialized }}', {# materialization #}\n                '{{ tojson(model.tags) }}', {# tags #}\n                '{{ tojson(model.config.meta) }}', {# meta #}\n                '{{ model.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.823854, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_models_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_models_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_models.sql", "original_file_path": "macros/upload_models.sql", "name": "bigquery__get_models_dml_sql", "macro_sql": "{% macro bigquery__get_models_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_values %}\n            {% for model in models -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ model.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ model.database }}', {# database #}\n                    '{{ model.schema }}', {# schema #}\n                    '{{ model.name }}', {# name #}\n                    {{ tojson(model.depends_on.nodes) }}, {# depends_on_nodes #}\n                    '{{ model.package_name }}', {# package_name #}\n                    '{{ model.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    '{{ model.checksum.checksum }}', {# checksum #}\n                    '{{ model.config.materialized }}', {# materialization #}\n                    {{ tojson(model.tags) }}, {# tags #}\n                    parse_json('{{ tojson(model.config.meta) }}'), {# meta #}\n                    '{{ model.alias }}' {# alias #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ model_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8260574, "supported_languages": null}, "macro.dbt_artifacts.column_identifier": {"unique_id": "macro.dbt_artifacts.column_identifier", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "name": "column_identifier", "macro_sql": "{% macro column_identifier(column_index) -%}\n  {{ return(adapter.dispatch('column_identifier')(column_index)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.82682, "supported_languages": null}, "macro.dbt_artifacts.default__column_identifier": {"unique_id": "macro.dbt_artifacts.default__column_identifier", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "name": "default__column_identifier", "macro_sql": "{% macro default__column_identifier(column_index) -%}\n    {{ column_index }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.827059, "supported_languages": null}, "macro.dbt_artifacts.snowflake__column_identifier": {"unique_id": "macro.dbt_artifacts.snowflake__column_identifier", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "name": "snowflake__column_identifier", "macro_sql": "{% macro snowflake__column_identifier(column_index) -%}\n    ${{ column_index }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8272836, "supported_languages": null}, "macro.dbt_artifacts.spark__column_identifier": {"unique_id": "macro.dbt_artifacts.spark__column_identifier", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "name": "spark__column_identifier", "macro_sql": "{% macro spark__column_identifier(column_index) -%}\n    col{{ column_index }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.827508, "supported_languages": null}, "macro.dbt_artifacts.upload_model_executions": {"unique_id": "macro.dbt_artifacts.upload_model_executions", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "name": "upload_model_executions", "macro_sql": "{% macro upload_model_executions(results) -%}\n    {% set models = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"model\" %}\n            {% do models.append(result) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_model_executions_dml_sql', 'dbt_artifacts')(models)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_model_executions_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8348744, "supported_languages": null}, "macro.dbt_artifacts.default__get_model_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_model_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "name": "default__get_model_executions_dml_sql", "macro_sql": "{% macro default__get_model_executions_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n        from values\n        {% for model in models -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Only available in Snowflake & BigQuery #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8405752, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_model_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_model_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "name": "bigquery__get_model_executions_dml_sql", "macro_sql": "{% macro bigquery__get_model_executions_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_execution_values %}\n        {% for model in models -%}\n            (\n            '{{ invocation_id }}', {# command_invocation_id #}\n            '{{ model.node.unique_id }}', {# node_id #}\n            '{{ run_started_at }}', {# run_started_at #}\n\n            {% set config_full_refresh = model.node.config.full_refresh %}\n            {% if config_full_refresh is none %}\n                {% set config_full_refresh = flags.FULL_REFRESH %}\n            {% endif %}\n            {{ config_full_refresh }}, {# was_full_refresh #}\n\n            '{{ model.thread_id }}', {# thread_id #}\n            '{{ model.status }}', {# status #}\n\n            {% if model.timing != [] %}\n                {% for stage in model.timing if stage.name == \"compile\" %}\n                    {% if loop.length == 0 %}\n                        null, {# compile_started_at #}\n                    {% else %}\n                        '{{ stage.started_at }}', {# compile_started_at #}\n                    {% endif %}\n                {% endfor %}\n\n                {% for stage in model.timing if stage.name == \"execute\" %}\n                    {% if loop.length == 0 %}\n                        null, {# query_completed_at #}\n                    {% else %}\n                        '{{ stage.completed_at }}', {# query_completed_at #}\n                    {% endif %}\n                {% endfor %}\n            {% else %}\n                null, {# compile_started_at #}\n                null, {# query_completed_at #}\n            {% endif %}\n\n            {{ model.execution_time }}, {# total_node_runtime #}\n            safe_cast('{{ model.adapter_response.rows_affected }}' as int64),\n            safe_cast('{{ model.adapter_response.bytes_processed }}' as int64),\n            '{{ model.node.config.materialized }}', {# materialization #}\n            '{{ model.node.schema }}', {# schema #}\n            '{{ model.node.name }}', {# name #}\n            '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.843978, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_model_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.snowflake__get_model_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "name": "snowflake__get_model_executions_dml_sql", "macro_sql": "{% macro snowflake__get_model_executions_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n        from values\n        {% for model in models -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8496253, "supported_languages": null}, "macro.dbt_artifacts.upload_seed_executions": {"unique_id": "macro.dbt_artifacts.upload_seed_executions", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "name": "upload_seed_executions", "macro_sql": "{% macro upload_seed_executions(results) -%}\n    {% set seeds = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"seed\" %}\n            {% do seeds.append(result) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_seed_executions_dml_sql', 'dbt_artifacts')(seeds)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.857143, "supported_languages": null}, "macro.dbt_artifacts.default__get_seed_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_seed_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "name": "default__get_seed_executions_dml_sql", "macro_sql": "{% macro default__get_seed_executions_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n        from values\n        {% for model in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Only available in Snowflake #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8627396, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_seed_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_seed_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "name": "bigquery__get_seed_executions_dml_sql", "macro_sql": "{% macro bigquery__get_seed_executions_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_execution_values %}\n        {% for model in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                {{ config_full_refresh }}, {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Databricks #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8660982, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "name": "snowflake__get_seed_executions_dml_sql", "macro_sql": "{% macro snowflake__get_seed_executions_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n        from values\n        {% for model in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8716922, "supported_languages": null}, "macro.dbt_artifacts.upload_tests": {"unique_id": "macro.dbt_artifacts.upload_tests", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_tests.sql", "original_file_path": "macros/upload_tests.sql", "name": "upload_tests", "macro_sql": "{% macro upload_tests(graph) -%}\n    {% set tests = [] %}\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"test\") %}\n        {% do tests.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_tests_dml_sql', 'dbt_artifacts')(tests)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__get_tests_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8748834, "supported_languages": null}, "macro.dbt_artifacts.default__get_tests_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_tests_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_tests.sql", "original_file_path": "macros/upload_tests.sql", "name": "default__get_tests_dml_sql", "macro_sql": "{% macro default__get_tests_dml_sql(tests) -%}\n\n    {% if tests != [] %}\n        {% set test_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(5)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(8)) }}\n        from values\n        {% for test in tests -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ test.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ test.name }}', {# name #}\n                '{{ tojson(test.depends_on.nodes) }}', {# depends_on_nodes #}\n                '{{ test.package_name }}', {# package_name #}\n                '{{ test.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# test_path #}\n                '{{ tojson(test.tags) }}' {# tags #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ test_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8780494, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_tests_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_tests_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_tests.sql", "original_file_path": "macros/upload_tests.sql", "name": "bigquery__get_tests_dml_sql", "macro_sql": "{% macro bigquery__get_tests_dml_sql(tests) -%}\n    {% if tests != [] %}\n        {% set test_values %}\n            {% for test in tests -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ test.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ test.name }}', {# name #}\n                    {{ tojson(test.depends_on.nodes) }}, {# depends_on_nodes #}\n                    '{{ test.package_name }}', {# package_name #}\n                    '{{ test.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# test_path #}\n                    {{ tojson(test.tags) }} {# tags #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ test_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8796413, "supported_languages": null}, "macro.dbt_artifacts.upload_snapshots": {"unique_id": "macro.dbt_artifacts.upload_snapshots", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_snapshots.sql", "original_file_path": "macros/upload_snapshots.sql", "name": "upload_snapshots", "macro_sql": "{% macro upload_snapshots(graph) -%}\n    {% set snapshots = [] %}\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"snapshot\") %}\n        {% do snapshots.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_snapshots_dml_sql', 'dbt_artifacts')(snapshots)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__get_snapshots_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8842325, "supported_languages": null}, "macro.dbt_artifacts.default__get_snapshots_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_snapshots_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_snapshots.sql", "original_file_path": "macros/upload_snapshots.sql", "name": "default__get_snapshots_dml_sql", "macro_sql": "{% macro default__get_snapshots_dml_sql(snapshots) -%}\n\n    {% if snapshots != [] %}\n        {% set snapshot_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(7)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }}\n        from values\n        {% for snapshot in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ snapshot.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ snapshot.database }}', {# database #}\n                '{{ snapshot.schema }}', {# schema #}\n                '{{ snapshot.name }}', {# name #}\n                '{{ tojson(snapshot.depends_on.nodes) }}', {# depends_on_nodes #}\n                '{{ snapshot.package_name }}', {# package_name #}\n                '{{ snapshot.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ snapshot.checksum.checksum }}', {# checksum #}\n                '{{ snapshot.config.strategy }}', {# strategy #}\n                '{{ tojson(snapshot.config.meta) }}', {# meta #}\n                '{{ snapshot.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8885179, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_snapshots_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_snapshots_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_snapshots.sql", "original_file_path": "macros/upload_snapshots.sql", "name": "bigquery__get_snapshots_dml_sql", "macro_sql": "{% macro bigquery__get_snapshots_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_values %}\n            {% for snapshot in snapshots -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ snapshot.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ snapshot.database }}', {# database #}\n                    '{{ snapshot.schema }}', {# schema #}\n                    '{{ snapshot.name }}', {# name #}\n                    {{ tojson(snapshot.depends_on.nodes) }}, {# depends_on_nodes #}\n                    '{{ snapshot.package_name }}', {# package_name #}\n                    '{{ snapshot.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    '{{ snapshot.checksum.checksum }}', {# checksum #}\n                    '{{ snapshot.config.strategy }}', {# strategy #}\n                    parse_json('{{ tojson(snapshot.config.meta) }}'), {# meta #}\n                    '{{ snapshot.alias }}' {# alias #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ snapshot_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8906446, "supported_languages": null}, "macro.dbt_artifacts.insert_into_metadata_table": {"unique_id": "macro.dbt_artifacts.insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "insert_into_metadata_table", "macro_sql": "{% macro insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n    {% if content != \"\" %}\n        {{ return(adapter.dispatch('insert_into_metadata_table', 'dbt_artifacts')(database_name, schema_name, table_name, content)) }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__insert_into_metadata_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8928022, "supported_languages": null}, "macro.dbt_artifacts.spark__insert_into_metadata_table": {"unique_id": "macro.dbt_artifacts.spark__insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "spark__insert_into_metadata_table", "macro_sql": "{% macro spark__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n    {% set insert_into_table_query %}\n    insert into {% if database_name %}{{ database_name }}.{% endif %}{{ schema_name }}.{{ table_name }}\n    {{ content }}\n    {% endset %}\n\n    {% do run_query(insert_into_table_query) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8934934, "supported_languages": null}, "macro.dbt_artifacts.snowflake__insert_into_metadata_table": {"unique_id": "macro.dbt_artifacts.snowflake__insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "snowflake__insert_into_metadata_table", "macro_sql": "{% macro snowflake__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n    {% set insert_into_table_query %}\n    insert into {{database_name}}.{{ schema_name }}.{{ table_name }}\n    {{ content }}\n    {% endset %}\n\n    {% do run_query(insert_into_table_query) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8940825, "supported_languages": null}, "macro.dbt_artifacts.bigquery__insert_into_metadata_table": {"unique_id": "macro.dbt_artifacts.bigquery__insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "bigquery__insert_into_metadata_table", "macro_sql": "{% macro bigquery__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n\n        {% set insert_into_table_query %}\n        insert into `{{database_name}}.{{ schema_name }}.{{ table_name }}`\n        VALUES\n        {{ content }}\n        {% endset %}\n\n        {% do run_query(insert_into_table_query) %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.894673, "supported_languages": null}, "macro.dbt_artifacts.default__insert_into_metadata_table": {"unique_id": "macro.dbt_artifacts.default__insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "default__insert_into_metadata_table", "macro_sql": "{% macro default__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.8949196, "supported_languages": null}, "macro.dbt_artifacts.migrate_from_v0_to_v1": {"unique_id": "macro.dbt_artifacts.migrate_from_v0_to_v1", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/migrate_from_v0_to_v1.sql", "original_file_path": "macros/migrate_from_v0_to_v1.sql", "name": "migrate_from_v0_to_v1", "macro_sql": "{%- macro migrate_from_v0_to_v1(old_database, old_schema, new_database, new_schema) -%}\n\n    {% set migrate_model_executions %}\n        insert into {{new_database}}.{{new_schema}}.model_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            model_materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            model_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__model_executions\n    {% endset %}\n\n    {{ log(\"Migrating model_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_model_executions }}\n    {%- endcall -%}\n\n    {% set migrate_tests %}\n        insert into {{new_database}}.{{new_schema}}.tests (\n            command_invocation_id,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            tags,\n            test_path,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            [],\n            test_path,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__tests\n    {% endset %}\n\n    {{ log(\"Migrating tests\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_tests }}\n    {%- endcall -%}\n\n    {% set migrate_test_executions %}\n        insert into {{new_database}}.{{new_schema}}.test_executions (\n            command_invocation_id,\n            compile_started_at,\n            failures,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            null,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__test_executions\n    {% endset %}\n\n    {{ log(\"Migrating test_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_test_executions }}\n    {%- endcall -%}\n\n    {% set migrate_models %}\n        insert into {{new_database}}.{{new_schema}}.models (\n            checksum,\n            command_invocation_id,\n            database,\n            depends_on_nodes,\n            materialization,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            model_database,\n            depends_on_nodes,\n            model_materialization,\n            name,\n            node_id,\n            package_name,\n            model_path,\n            model_schema,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__models\n    {% endset %}\n\n    {{ log(\"Migrating models\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_models }}\n    {%- endcall -%}\n\n    {% set migrate_seeds %}\n        insert into {{new_database}}.{{new_schema}}.seeds (\n            checksum,\n            command_invocation_id,\n            database,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            seed_database,\n            name,\n            node_id,\n            package_name,\n            seed_path,\n            seed_schema,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__seeds\n    {% endset %}\n\n    {{ log(\"Migrating seeds\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_seeds }}\n    {%- endcall -%}\n\n    {% set migrate_seed_executions %}\n        insert into {{new_database}}.{{new_schema}}.seed_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            'seed',\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            seed_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__seed_executions\n    {% endset %}\n\n    {{ log(\"Migrating seed_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_seed_executions }}\n    {%- endcall -%}\n\n    {% set migrate_exposures %}\n        insert into {{new_database}}.{{new_schema}}.exposures (\n            command_invocation_id,\n            depends_on_nodes,\n            description,\n            maturity,\n            name,\n            node_id,\n            owner,\n            package_name,\n            path,\n            type,\n            url,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            array_agg(output_feeds), {#- Here we un-flatten the transformation originally done -#}\n            null,\n            any_value(maturity) as maturity,\n            name,\n            node_id,\n            null, {#- v0 is a string, v1 is a variant -#}\n            any_value(package_name) as package_name,\n            null,\n            any_value(type) as type,\n            null,\n            any_value(artifact_generated_at) as artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__exposures\n        group by command_invocation_id, node_id, name, artifact_generated_at\n    {% endset %}\n\n    {{ log(\"Migrating exposures\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_exposures }}\n    {%- endcall -%}\n\n    {% set migrate_snapshots %}\n        insert into {{new_database}}.{{new_schema}}.snapshots (\n            checksum,\n            command_invocation_id,\n            database,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            strategy,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            snapshot_database,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            snapshot_path,\n            snapshot_schema,\n            null,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__snapshots\n    {% endset %}\n\n    {{ log(\"Migrating snapshots\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_snapshots }}\n    {%- endcall -%}\n\n    {% set migrate_snapshot_executions %}\n        insert into {{new_database}}.{{new_schema}}.snapshot_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            'snapshot',\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            snapshot_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__snapshot_executions\n    {% endset %}\n\n    {{ log(\"Migrating snapshot_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_snapshot_executions }}\n    {%- endcall -%}\n\n    {% set migrate_sources %}\n        insert into {{new_database}}.{{new_schema}}.sources (\n            command_invocation_id,\n            database,\n            freshness,\n            identifier,\n            loaded_at_field,\n            loader,\n            name,\n            node_id,\n            schema,\n            source_name,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            node_database,\n            parse_json('[{\"error_after\":{\"count\":null,\"period\":null},\"filter\":null,\"warn_after\":{\"count\":null,\"period\":null}}]'),\n            name,\n            null,\n            source_loader,\n            name,\n            node_id,\n            source_schema,\n            source_name,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__sources\n    {% endset %}\n\n    {{ log(\"Migrating sources\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_sources }}\n    {%- endcall -%}\n\n    {{ log(\"Migration complete. You can now safely delete any data from before 1.0.0\", info=True) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.913918, "supported_languages": null}, "macro.dbt_artifacts.upload_invocations": {"unique_id": "macro.dbt_artifacts.upload_invocations", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_invocations.sql", "original_file_path": "macros/upload_invocations.sql", "name": "upload_invocations", "macro_sql": "{% macro upload_invocations() -%}\n    {{ return(adapter.dispatch('get_invocations_dml_sql', 'dbt_artifacts')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__get_invocations_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9194446, "supported_languages": null}, "macro.dbt_artifacts.default__get_invocations_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_invocations_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_invocations.sql", "original_file_path": "macros/upload_invocations.sql", "name": "default__get_invocations_dml_sql", "macro_sql": "{% macro default__get_invocations_dml_sql() -%}\n    {% set invocation_values %}\n    select\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }}, ''),\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }},\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(17)) }},\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(18)) }},\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(19)) }}\n    from values\n    (\n        '{{ invocation_id }}', {# command_invocation_id #}\n        '{{ dbt_version }}', {# dbt_version #}\n        '{{ project_name }}', {# project_name #}\n        '{{ run_started_at }}', {# run_started_at #}\n        '{{ flags.WHICH }}', {# dbt_command #}\n        '{{ flags.FULL_REFRESH }}', {# full_refresh_flag #}\n        '{{ target.profile_name }}', {# target_profile_name #}\n        '{{ target.name }}', {# target_name #}\n        '{{ target.schema }}', {# target_schema #}\n        {{ target.threads }}, {# target_threads #}\n\n        '{{ env_var('DBT_CLOUD_PROJECT_ID', '') }}', {# dbt_cloud_project_id #}\n        '{{ env_var('DBT_CLOUD_JOB_ID', '') }}', {# dbt_cloud_job_id #}\n        '{{ env_var('DBT_CLOUD_RUN_ID', '') }}', {# dbt_cloud_run_id #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON_CATEGORY', '') }}', {# dbt_cloud_run_reason_category #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON', '') | replace(\"'\",\"\\\\'\") }}', {# dbt_cloud_run_reason #}\n\n        {% if var('env_vars', none) %}\n            {% set env_vars_dict = {} %}\n            {% for env_variable in var('env_vars') %}\n                {% do env_vars_dict.update({env_variable: env_var(env_variable)}) %}\n            {% endfor %}\n            '{{ tojson(env_vars_dict) }}', {# env_vars #}\n        {% else %}\n            null, {# env_vars #}\n        {% endif %}\n\n        {% if var('dbt_vars', none) %}\n            {% set dbt_vars_dict = {} %}\n            {% for dbt_var in var('dbt_vars') %}\n                {% do dbt_vars_dict.update({dbt_var: var(dbt_var)}) %}\n            {% endfor %}\n            '{{ tojson(dbt_vars_dict) }}', {# dbt_vars #}\n        {% else %}\n            null, {# dbt_vars #}\n        {% endif %}\n\n        '{{ tojson(invocation_args_dict) | replace('\\\\', '\\\\\\\\') }}', {# invocation_args #}\n        '{{ tojson(dbt_metadata_envs) }}' {# dbt_custom_envs #}\n\n    )\n    {% endset %}\n    {{ invocation_values }}\n\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9265008, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_invocations_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_invocations_dml_sql", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "macros/upload_invocations.sql", "original_file_path": "macros/upload_invocations.sql", "name": "bigquery__get_invocations_dml_sql", "macro_sql": "{% macro bigquery__get_invocations_dml_sql() -%}\n    {% set invocation_values %}\n        (\n        '{{ invocation_id }}', {# command_invocation_id #}\n        '{{ dbt_version }}', {# dbt_version #}\n        '{{ project_name }}', {# project_name #}\n        '{{ run_started_at }}', {# run_started_at #}\n        '{{ flags.WHICH }}', {# dbt_command #}\n        {{ flags.FULL_REFRESH }}, {# full_refresh_flag #}\n        '{{ target.profile_name }}', {# target_profile_name #}\n        '{{ target.name }}', {# target_name #}\n        '{{ target.schema }}', {# target_schema #}\n        {{ target.threads }}, {# target_threads #}\n\n        '{{ env_var('DBT_CLOUD_PROJECT_ID', '') }}', {# dbt_cloud_project_id #}\n        '{{ env_var('DBT_CLOUD_JOB_ID', '') }}', {# dbt_cloud_job_id #}\n        '{{ env_var('DBT_CLOUD_RUN_ID', '') }}', {# dbt_cloud_run_id #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON_CATEGORY', '') }}', {# dbt_cloud_run_reason_category #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON', '') | replace(\"'\",\"\\\\'\") }}', {# dbt_cloud_run_reason #}\n\n        {% if var('env_vars', none) %}\n            {% set env_vars_dict = {} %}\n            {% for env_variable in var('env_vars') %}\n                {% do env_vars_dict.update({env_variable: env_var(env_variable)}) %}\n            {% endfor %}\n            parse_json('{{ tojson(env_vars_dict) }}'), {# env_vars #}\n        {% else %}\n            null, {# env_vars #}\n        {% endif %}\n\n        {% if var('dbt_vars', none) %}\n            {% set dbt_vars_dict = {} %}\n            {% for dbt_var in var('dbt_vars') %}\n                {% do dbt_vars_dict.update({dbt_var: var(dbt_var)}) %}\n            {% endfor %}\n            parse_json('{{ tojson(dbt_vars_dict) }}'), {# dbt_vars #}\n        {% else %}\n            null, {# dbt_vars #}\n        {% endif %}\n\n        parse_json('{{ tojson(invocation_args_dict) }}'), {# invocation_args #}\n        parse_json('{{ tojson(dbt_metadata_envs) }}') {# dbt_custom_envs #}\n\n        )\n    {% endset %}\n    {{ invocation_values }}\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.930055, "supported_languages": null}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.932163, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9339545, "supported_languages": null}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9354007, "supported_languages": null}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.937545, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.938509, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9387176, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.938925, "supported_languages": null}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9391167, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9436011, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9440923, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.944522, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9449584, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.945329, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.945703, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9469538, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9491282, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9500308, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9512916, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9527416, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9539857, "supported_languages": null}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9544837, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9552472, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9572885, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9604936, "supported_languages": null}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9612594, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9617994, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9645255, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9651363, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9666357, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.967834, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.968728, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.969471, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9704115, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9710279, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9723644, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.97423, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9755874, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9773626, "supported_languages": null}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.978375, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9790146, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9809327, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9815125, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9826796, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9848096, "supported_languages": null}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9878132, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9920523, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9936693, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.994669, "supported_languages": null}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9951015, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9962032, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9970567, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081660.9978173, "supported_languages": null}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0020354, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0083034, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0094783, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0110223, "supported_languages": null}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0201757, "supported_languages": null}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.021254, "supported_languages": null}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0219164, "supported_languages": null}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0229635, "supported_languages": null}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0334074, "supported_languages": ["sql"]}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0341926, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0346131, "supported_languages": null}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0357988, "supported_languages": null}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0364728, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0368905, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0375767, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.037938, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0387135, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0394082, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.040511, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0418727, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0426962, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.043672, "supported_languages": null}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.046303, "supported_languages": null}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0466728, "supported_languages": null}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0471618, "supported_languages": null}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0478578, "supported_languages": null}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0487258, "supported_languages": null}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.049493, "supported_languages": null}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.050392, "supported_languages": null}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0507116, "supported_languages": null}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.051023, "supported_languages": null}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0513237, "supported_languages": null}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0520563, "supported_languages": null}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0523028, "supported_languages": null}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0525348, "supported_languages": null}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.053419, "supported_languages": null}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0537245, "supported_languages": null}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.054015, "supported_languages": null}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.054303, "supported_languages": null}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.055564, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0558362, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0560107, "supported_languages": null}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0561774, "supported_languages": null}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0565116, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0567873, "supported_languages": null}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.057113, "supported_languages": null}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.057365, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0576544, "supported_languages": null}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0585158, "supported_languages": null}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0589752, "supported_languages": null}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.059386, "supported_languages": null}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0597851, "supported_languages": null}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0609899, "supported_languages": null}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.06131, "supported_languages": null}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0616562, "supported_languages": null}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.062001, "supported_languages": null}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0627265, "supported_languages": null}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0630555, "supported_languages": null}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.063347, "supported_languages": null}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value() -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') ()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_tutorial.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0639837, "supported_languages": null}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value() -%}\n    \n   {{ log('This came from utils', True) }}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0642686, "supported_languages": null}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0650892, "supported_languages": null}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0654576, "supported_languages": null}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0662942, "supported_languages": null}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0666118, "supported_languages": null}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0669007, "supported_languages": null}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.067685, "supported_languages": null}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0679255, "supported_languages": null}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0681536, "supported_languages": null}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0683806, "supported_languages": null}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0690644, "supported_languages": null}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0693471, "supported_languages": null}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0705178, "supported_languages": null}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0717049, "supported_languages": null}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.071952, "supported_languages": null}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0721822, "supported_languages": null}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0733323, "supported_languages": null}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.073864, "supported_languages": null}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.07418, "supported_languages": null}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.074489, "supported_languages": null}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0747964, "supported_languages": null}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0786226, "supported_languages": null}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.079507, "supported_languages": null}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0801132, "supported_languages": null}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.080966, "supported_languages": null}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0830534, "supported_languages": null}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0874686, "supported_languages": null}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0878441, "supported_languages": null}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0881975, "supported_languages": null}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0919125, "supported_languages": null}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0923643, "supported_languages": null}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.093552, "supported_languages": null}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0939226, "supported_languages": null}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.09428, "supported_languages": null}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0946305, "supported_languages": null}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0950587, "supported_languages": null}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.096434, "supported_languages": null}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0966961, "supported_languages": null}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0968997, "supported_languages": null}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.097069, "supported_languages": null}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0972328, "supported_languages": null}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.097584, "supported_languages": null}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0977592, "supported_languages": null}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0979252, "supported_languages": null}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.098088, "supported_languages": null}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0984304, "supported_languages": null}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0986056, "supported_languages": null}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.098771, "supported_languages": null}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.099131, "supported_languages": null}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0993118, "supported_languages": null}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.099477, "supported_languages": null}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.0998228, "supported_languages": null}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1001303, "supported_languages": null}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1003041, "supported_languages": null}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.100651, "supported_languages": null}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.100843, "supported_languages": null}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1010096, "supported_languages": null}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1019318, "supported_languages": null}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.102249, "supported_languages": null}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1025515, "supported_languages": null}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1032207, "supported_languages": null}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1034625, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1052334, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1077118, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.108679, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.10969, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1101007, "supported_languages": null}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1109095, "supported_languages": null}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1112063, "supported_languages": null}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1114988, "supported_languages": null}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1122284, "supported_languages": null}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.112418, "supported_languages": null}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1125996, "supported_languages": null}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1134732, "supported_languages": null}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1137927, "supported_languages": null}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1142242, "supported_languages": null}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1145139, "supported_languages": null}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.115691, "supported_languages": null}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1162593, "supported_languages": null}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1165843, "supported_languages": null}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1175077, "supported_languages": null}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1179047, "supported_languages": null}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1185691, "supported_languages": null}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.118751, "supported_languages": null}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1189346, "supported_languages": null}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1198397, "supported_languages": null}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.120158, "supported_languages": null}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.120822, "supported_languages": null}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1211445, "supported_languages": null}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.121377, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1225004, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1231513, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.123932, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1243162, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1256351, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.127074, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1281035, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.129187, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.129981, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1303723, "supported_languages": null}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1318586, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.133846, "supported_languages": null}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1348474, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1352227, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1361163, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1367967, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.13804, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1388872, "supported_languages": null}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1398659, "supported_languages": null}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1402361, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1452477, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.148557, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.149901, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1506257, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range() %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')()) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1512847, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range() %}\n\n {{ log('This came from dbt utils', True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1515825, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1526406, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.153227, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1544886, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1558564, "supported_languages": null}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1568074, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1575089, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1586974, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.159442, "supported_languages": null}, "macro.codegen.get_tables_in_schema": {"unique_id": "macro.codegen.get_tables_in_schema", "package_name": "codegen", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1629062, "supported_languages": null}, "macro.codegen.generate_source": {"unique_id": "macro.codegen.generate_source", "package_name": "codegen", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='', name=schema_name, table_names=None) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1678033, "supported_languages": null}, "macro.codegen.generate_base_model": {"unique_id": "macro.codegen.generate_base_model", "package_name": "codegen", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "name": "generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.171708, "supported_languages": null}, "macro.codegen.generate_column_yaml": {"unique_id": "macro.codegen.generate_column_yaml", "package_name": "codegen", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "name": "generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, parent_column_name=\"\") %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.175117, "supported_languages": null}, "macro.codegen.generate_model_yaml": {"unique_id": "macro.codegen.generate_model_yaml", "package_name": "codegen", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "name": "generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_name, upstream_descriptions=False) %}\n\n{% set model_yaml=[] %}\n{% set column_desc_dict =  codegen.build_dict_column_descriptions(model_name) if upstream_descriptions else {} %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n{% do model_yaml.append('  - name: ' ~ model_name | lower) %}\n{% do model_yaml.append('    description: \"\"') %}\n{% do model_yaml.append('    columns:') %}\n\n{% set relation=ref(model_name) %}\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n{% for column in columns %}\n    {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict) %}\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1774125, "supported_languages": null}, "macro.codegen.get_model_dependencies": {"unique_id": "macro.codegen.get_model_dependencies", "package_name": "codegen", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "name": "get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1787393, "supported_languages": null}, "macro.codegen.add_model_column_descriptions_to_dict": {"unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "package_name": "codegen", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "name": "add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1797829, "supported_languages": null}, "macro.codegen.build_dict_column_descriptions": {"unique_id": "macro.codegen.build_dict_column_descriptions", "package_name": "codegen", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "name": "build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674081661.1806939, "supported_languages": null}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "dbt_artifacts.command_invocation_id": {"unique_id": "dbt_artifacts.command_invocation_id", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "command_invocation_id", "block_contents": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation."}, "dbt_artifacts.node_id": {"unique_id": "dbt_artifacts.node_id", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "node_id", "block_contents": "Unique node identifier."}, "dbt_artifacts.name": {"unique_id": "dbt_artifacts.name", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "name", "block_contents": "Name of the node."}, "dbt_artifacts.schema": {"unique_id": "dbt_artifacts.schema", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "schema", "block_contents": "Configured schema for the node."}, "dbt_artifacts.package_name": {"unique_id": "dbt_artifacts.package_name", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "package_name", "block_contents": "Name of the dbt package which contains the node."}, "dbt_artifacts.total_node_runtime": {"unique_id": "dbt_artifacts.total_node_runtime", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "total_node_runtime", "block_contents": "Total time spent executing this node (seconds)."}, "dbt_artifacts.compile_started_at": {"unique_id": "dbt_artifacts.compile_started_at", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "compile_started_at", "block_contents": "Timestamp when the node started compiling."}, "dbt_artifacts.depends_on_nodes": {"unique_id": "dbt_artifacts.depends_on_nodes", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "depends_on_nodes", "block_contents": "Array of node identifiers that this node depends on in the execution graph."}, "dbt_artifacts.status": {"unique_id": "dbt_artifacts.status", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "status", "block_contents": "Represents the execution status of a node, can be success, failure, or error."}, "dbt_artifacts.query_completed_at": {"unique_id": "dbt_artifacts.query_completed_at", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "query_completed_at", "block_contents": "Timestamp when the node's SQL query completed."}, "dbt_artifacts.materialization": {"unique_id": "dbt_artifacts.materialization", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "materialization", "block_contents": "The materialization of the model."}, "dbt_artifacts.database": {"unique_id": "dbt_artifacts.database", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "database", "block_contents": "The configured database for the node."}, "dbt_artifacts.rows_affected": {"unique_id": "dbt_artifacts.rows_affected", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "rows_affected", "block_contents": "Number of rows affected by the model execution."}, "dbt_artifacts.bytes_processed": {"unique_id": "dbt_artifacts.bytes_processed", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "bytes_processed", "block_contents": "Number of bytes processed by the model execution."}, "dbt_artifacts.thread_id": {"unique_id": "dbt_artifacts.thread_id", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "thread_id", "block_contents": "Which thread executed this node? E.g. Thread-1"}, "dbt_artifacts.path": {"unique_id": "dbt_artifacts.path", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "path", "block_contents": "Path to the model on the local filesystem."}, "dbt_artifacts.was_full_refresh": {"unique_id": "dbt_artifacts.was_full_refresh", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "was_full_refresh", "block_contents": "Boolean flag indicating whether the nodes run was a full refresh or not."}, "dbt_artifacts.checksum": {"unique_id": "dbt_artifacts.checksum", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "checksum", "block_contents": "Checksum of the model."}, "dbt_artifacts.seed_execution_id": {"unique_id": "dbt_artifacts.seed_execution_id", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "seed_execution_id", "block_contents": "Execution ID of the seed node."}, "dbt_artifacts.test_execution_id": {"unique_id": "dbt_artifacts.test_execution_id", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "test_execution_id", "block_contents": "Execution ID of the test node."}, "dbt_artifacts.snapshot_execution_id": {"unique_id": "dbt_artifacts.snapshot_execution_id", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "snapshot_execution_id", "block_contents": "Execution ID of the snapshot node."}, "dbt_artifacts.model_execution_id": {"unique_id": "dbt_artifacts.model_execution_id", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "model_execution_id", "block_contents": "Execution ID of the model node."}, "dbt_artifacts.loader": {"unique_id": "dbt_artifacts.loader", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "loader", "block_contents": "Describes the tool that loads this source into your warehouse."}, "dbt_artifacts.freshness": {"unique_id": "dbt_artifacts.freshness", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "freshness", "block_contents": "The specified freshness of the source model."}, "dbt_artifacts.url": {"unique_id": "dbt_artifacts.url", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "url", "block_contents": "The URL of the BI tool where the data defined by the exposure can be viewed."}, "dbt_artifacts.identifier": {"unique_id": "dbt_artifacts.identifier", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "identifier", "block_contents": "Source identifier."}, "dbt_artifacts.source_name": {"unique_id": "dbt_artifacts.source_name", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "source_name", "block_contents": "Source name."}, "dbt_artifacts.test_path": {"unique_id": "dbt_artifacts.test_path", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "test_path", "block_contents": "Path to the yaml (SQL in case of a singular test) file describing the test."}, "dbt_artifacts.tags": {"unique_id": "dbt_artifacts.tags", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "tags", "block_contents": "Tags used in resource selection associated with the node."}, "dbt_artifacts.strategy": {"unique_id": "dbt_artifacts.strategy", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "strategy", "block_contents": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check."}, "dbt_artifacts.failures": {"unique_id": "dbt_artifacts.failures", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "failures", "block_contents": "Test failures. Value is 1 if the test failed, 0 if successful."}, "dbt_artifacts.loaded_at_field": {"unique_id": "dbt_artifacts.loaded_at_field", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "loaded_at_field", "block_contents": "A column name (or expression) that returns a timestamp indicating freshness."}, "dbt_artifacts.type": {"unique_id": "dbt_artifacts.type", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "type", "block_contents": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)"}, "dbt_artifacts.description": {"unique_id": "dbt_artifacts.description", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "description", "block_contents": "Node description."}, "dbt_artifacts.maturity": {"unique_id": "dbt_artifacts.maturity", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "maturity", "block_contents": "Exposure maturity; one of high, medium, low."}, "dbt_artifacts.owner": {"unique_id": "dbt_artifacts.owner", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "owner", "block_contents": "Owner of the exposure, usually an email address."}, "dbt_artifacts.source_execution_id": {"unique_id": "dbt_artifacts.source_execution_id", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "source_execution_id", "block_contents": "Execution ID of the source node."}, "dbt_artifacts.exposure_execution_id": {"unique_id": "dbt_artifacts.exposure_execution_id", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "exposure_execution_id", "block_contents": "Execution ID of the exposure node."}, "dbt_artifacts.dbt_version": {"unique_id": "dbt_artifacts.dbt_version", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_version", "block_contents": "Installed version of dbt that is currently running."}, "dbt_artifacts.project_name": {"unique_id": "dbt_artifacts.project_name", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "project_name", "block_contents": "Name for the root-level project which is being run by dbt."}, "dbt_artifacts.run_started_at": {"unique_id": "dbt_artifacts.run_started_at", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "run_started_at", "block_contents": "The start timestamp of the dbt execution which generated the record."}, "dbt_artifacts.dbt_command": {"unique_id": "dbt_artifacts.dbt_command", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_command", "block_contents": "dbt command of this run."}, "dbt_artifacts.full_refresh_flag": {"unique_id": "dbt_artifacts.full_refresh_flag", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "full_refresh_flag", "block_contents": "Boolean flag indicating whether the dbt run was in full refresh mode or not."}, "dbt_artifacts.target_profile_name": {"unique_id": "dbt_artifacts.target_profile_name", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "target_profile_name", "block_contents": "The name of the active profile."}, "dbt_artifacts.target_name": {"unique_id": "dbt_artifacts.target_name", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "target_name", "block_contents": "The name of the active target."}, "dbt_artifacts.target_schema": {"unique_id": "dbt_artifacts.target_schema", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "target_schema", "block_contents": "The name of the target dbt schema."}, "dbt_artifacts.target_threads": {"unique_id": "dbt_artifacts.target_threads", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "target_threads", "block_contents": "The number of threads in use by dbt."}, "dbt_artifacts.dbt_cloud_project_id": {"unique_id": "dbt_artifacts.dbt_cloud_project_id", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_project_id", "block_contents": "The ID of the dbt Cloud Project for this run."}, "dbt_artifacts.dbt_cloud_job_id": {"unique_id": "dbt_artifacts.dbt_cloud_job_id", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_job_id", "block_contents": "The ID of the dbt Cloud Job for this run."}, "dbt_artifacts.dbt_cloud_run_id": {"unique_id": "dbt_artifacts.dbt_cloud_run_id", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_run_id", "block_contents": "The ID of this particular run."}, "dbt_artifacts.dbt_cloud_run_reason_category": {"unique_id": "dbt_artifacts.dbt_cloud_run_reason_category", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_run_reason_category", "block_contents": "The \"category\" of the trigger for this run."}, "dbt_artifacts.dbt_cloud_run_reason": {"unique_id": "dbt_artifacts.dbt_cloud_run_reason", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_run_reason", "block_contents": "The specific trigger for this run."}, "dbt_artifacts.env_vars": {"unique_id": "dbt_artifacts.env_vars", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "env_vars", "block_contents": "Key-value pairs of environment variables to be capture."}, "dbt_artifacts.dbt_vars": {"unique_id": "dbt_artifacts.dbt_vars", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_vars", "block_contents": "Key-value pairs of project variables to be capture."}, "dbt_artifacts.last_full_refresh_run_completed_at": {"unique_id": "dbt_artifacts.last_full_refresh_run_completed_at", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_full_refresh_run_completed_at", "block_contents": "Timestamp when the node's SQL query completed on the last full (non-incremental) run."}, "dbt_artifacts.last_full_refresh_run_rows_affected": {"unique_id": "dbt_artifacts.last_full_refresh_run_rows_affected", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_full_refresh_run_rows_affected", "block_contents": "Number of rows affected by the node's last full (non-incremental) run."}, "dbt_artifacts.last_full_refresh_run_bytes_processed": {"unique_id": "dbt_artifacts.last_full_refresh_run_bytes_processed", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_full_refresh_run_bytes_processed", "block_contents": "Number of bytes processed by the node's last full (non-incremental) run."}, "dbt_artifacts.last_full_refresh_run_total_runtime": {"unique_id": "dbt_artifacts.last_full_refresh_run_total_runtime", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_full_refresh_run_total_runtime", "block_contents": "Total time spent executing the node's last full (non-incremental) run (seconds)."}, "dbt_artifacts.last_run_completed_at": {"unique_id": "dbt_artifacts.last_run_completed_at", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_run_completed_at", "block_contents": "Timestamp when the node's SQL query completed on the last run."}, "dbt_artifacts.last_run_rows_affected": {"unique_id": "dbt_artifacts.last_run_rows_affected", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_run_rows_affected", "block_contents": "Number of rows affected by the node's last run."}, "dbt_artifacts.last_run_bytes_processed": {"unique_id": "dbt_artifacts.last_run_bytes_processed", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_run_bytes_processed", "block_contents": "Number of bytes processed by the node's last run."}, "dbt_artifacts.last_run_total_runtime": {"unique_id": "dbt_artifacts.last_run_total_runtime", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_run_total_runtime", "block_contents": "Total time spent executing the node's last run (seconds)."}, "dbt_artifacts.meta": {"unique_id": "dbt_artifacts.meta", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "meta", "block_contents": "The meta field of the config associated with the node."}, "dbt_artifacts.invocation_args": {"unique_id": "dbt_artifacts.invocation_args", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "invocation_args", "block_contents": "Key-value pairs of args passed to invocation."}, "dbt_artifacts.dbt_custom_envs": {"unique_id": "dbt_artifacts.dbt_custom_envs", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_custom_envs", "block_contents": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_"}, "dbt_artifacts.alias": {"unique_id": "dbt_artifacts.alias", "package_name": "dbt_artifacts", "root_path": "/usr/src/develop/user-77002/environment-86149/repository-69727/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "alias", "block_contents": "Alias of the node."}}, "exposures": {}, "metrics": {}, "selectors": {"example_project": {"name": "example_project", "definition": {"method": "path", "value": "models/example/"}}}, "disabled": {}, "parent_map": {"model.dbt_tutorial.my_second_dbt_model": ["model.dbt_tutorial.my_first_dbt_model", "model.dbt_tutorial.my_unrelated_model"], "model.dbt_tutorial.my_first_dbt_model": [], "model.dbt_tutorial.my_unrelated_model": [], "model.dbt_tutorial.my_third_dbt_model": ["model.dbt_tutorial.my_second_dbt_model"], "model.dbt_tutorial.stg_jaffle_shop__orders": ["source.dbt_tutorial.jaffle_shop.orders"], "model.dbt_tutorial.stg_jaffle_shop__customers": ["source.dbt_tutorial.jaffle_shop.customers"], "model.dbt_tutorial.date_spine": [], "model.dbt_tutorial.customer_distinct_orders": ["model.dbt_tutorial.stg_jaffle_shop__customers", "model.dbt_tutorial.stg_jaffle_shop__orders"], "model.dbt_tutorial.fct_holidays": [], "model.dbt_tutorial.fct_fruit_orders": ["seed.dbt_tutorial.fruit_prices_fact", "seed.dbt_tutorial.fruit_user_input"], "model.dbt_tutorial.test": ["model.dbt_tutorial.date_spine"], "seed.dbt_tutorial.fruit_prices_fact": [], "seed.dbt_tutorial.fruit_user_input": [], "model.re_data.re_data_test_history": [], "model.re_data.re_data_run_started_at": [], "model.re_data.re_data_last_table_samples": ["model.re_data.re_data_columns", "model.re_data.re_data_last_table_samples_part", "model.re_data.re_data_monitored", "model.re_data.re_data_run_started_at", "model.re_data.re_data_selected"], "model.re_data.re_data_last_table_samples_part": [], "model.re_data.re_data_last_base_metrics_part1": ["model.re_data.re_data_columns"], "model.re_data.re_data_last_base_metrics_thread0": ["model.re_data.re_data_columns", "model.re_data.re_data_last_base_metrics_part0", "model.re_data.re_data_monitored", "model.re_data.re_data_run_started_at", "model.re_data.re_data_selected"], "model.re_data.re_data_last_base_metrics_part3": ["model.re_data.re_data_columns"], "model.re_data.re_data_last_base_metrics_thread2": ["model.re_data.re_data_columns", "model.re_data.re_data_last_base_metrics_part2", "model.re_data.re_data_monitored", "model.re_data.re_data_run_started_at", "model.re_data.re_data_selected"], "model.re_data.re_data_last_base_metrics_part2": ["model.re_data.re_data_columns"], "model.re_data.re_data_last_base_metrics_thread1": ["model.re_data.re_data_columns", "model.re_data.re_data_last_base_metrics_part1", "model.re_data.re_data_monitored", "model.re_data.re_data_run_started_at", "model.re_data.re_data_selected"], "model.re_data.re_data_last_base_metrics_thread3": ["model.re_data.re_data_columns", "model.re_data.re_data_last_base_metrics_part3", "model.re_data.re_data_monitored", "model.re_data.re_data_run_started_at", "model.re_data.re_data_selected"], "model.re_data.re_data_last_base_metrics_part0": ["model.re_data.re_data_columns"], "model.re_data.re_data_alerts": ["model.re_data.re_data_anomalies", "model.re_data.re_data_schema_changes", "model.re_data.re_data_test_history"], "model.re_data.re_data_test_runs": ["model.re_data.re_data_test_history"], "model.re_data.re_data_z_score": ["model.re_data.re_data_last_metrics", "model.re_data.re_data_last_stats"], "model.re_data.re_data_schema_changes": ["model.re_data.re_data_columns_over_time", "model.re_data.re_data_monitored", "model.re_data.re_data_run_started_at", "model.re_data.re_data_selected"], "model.re_data.re_data_anomalies": ["model.re_data.re_data_selected", "model.re_data.re_data_z_score"], "model.re_data.re_data_metrics": ["model.re_data.re_data_base_metrics"], "model.re_data.re_data_columns_over_time": ["model.re_data.re_data_columns", "model.re_data.re_data_selected"], "model.re_data.re_data_table_samples": ["model.re_data.re_data_last_table_samples", "model.re_data.re_data_last_table_samples_part", "model.re_data.re_data_last_table_samples_part"], "model.re_data.re_data_base_metrics": ["model.re_data.re_data_columns", "model.re_data.re_data_last_base_metrics_part0", "model.re_data.re_data_last_base_metrics_part0", "model.re_data.re_data_last_base_metrics_part1", "model.re_data.re_data_last_base_metrics_part1", "model.re_data.re_data_last_base_metrics_part2", "model.re_data.re_data_last_base_metrics_part2", "model.re_data.re_data_last_base_metrics_part3", "model.re_data.re_data_last_base_metrics_part3", "model.re_data.re_data_last_base_metrics_thread0", "model.re_data.re_data_last_base_metrics_thread1", "model.re_data.re_data_last_base_metrics_thread2", "model.re_data.re_data_last_base_metrics_thread3", "model.re_data.re_data_monitored", "model.re_data.re_data_run_started_at", "model.re_data.re_data_selected"], "model.re_data.re_data_last_metrics": ["model.re_data.re_data_base_metrics"], "model.re_data.re_data_last_stats": ["model.re_data.re_data_base_metrics", "model.re_data.re_data_base_metrics", "model.re_data.re_data_base_metrics"], "model.re_data.re_data_selected": ["model.re_data.re_data_monitored"], "model.re_data.re_data_monitored": [], "model.re_data.re_data_columns": ["model.re_data.re_data_monitored", "model.re_data.re_data_run_started_at", "model.re_data.re_data_selected"], "operation.re_data.re_data-on-run-end-0": ["model.re_data.re_data_test_history"], "model.dbt_artifacts.fct_dbt__test_executions": ["model.dbt_artifacts.stg_dbt__test_executions"], "model.dbt_artifacts.fct_dbt__snapshot_executions": ["model.dbt_artifacts.stg_dbt__snapshot_executions"], "model.dbt_artifacts.dim_dbt__tests": ["model.dbt_artifacts.stg_dbt__tests"], "model.dbt_artifacts.dim_dbt__snapshots": ["model.dbt_artifacts.stg_dbt__snapshots"], "model.dbt_artifacts.fct_dbt__seed_executions": ["model.dbt_artifacts.stg_dbt__seed_executions"], "model.dbt_artifacts.fct_dbt__model_executions": ["model.dbt_artifacts.stg_dbt__model_executions"], "model.dbt_artifacts.dim_dbt__current_models": ["model.dbt_artifacts.stg_dbt__model_executions", "model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.dim_dbt__exposures": ["model.dbt_artifacts.stg_dbt__exposures"], "model.dbt_artifacts.dim_dbt__models": ["model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.dim_dbt__sources": ["model.dbt_artifacts.stg_dbt__sources"], "model.dbt_artifacts.dim_dbt__seeds": ["model.dbt_artifacts.stg_dbt__seeds"], "model.dbt_artifacts.fct_dbt__invocations": ["model.dbt_artifacts.stg_dbt__invocations"], "model.dbt_artifacts.snapshot_executions": [], "model.dbt_artifacts.test_executions": [], "model.dbt_artifacts.exposures": [], "model.dbt_artifacts.models": [], "model.dbt_artifacts.seeds": [], "model.dbt_artifacts.sources": [], "model.dbt_artifacts.tests": [], "model.dbt_artifacts.snapshots": [], "model.dbt_artifacts.seed_executions": [], "model.dbt_artifacts.model_executions": [], "model.dbt_artifacts.invocations": [], "model.dbt_artifacts.stg_dbt__invocations": ["model.dbt_artifacts.invocations"], "model.dbt_artifacts.stg_dbt__model_executions": ["model.dbt_artifacts.model_executions"], "model.dbt_artifacts.stg_dbt__seed_executions": ["model.dbt_artifacts.seed_executions"], "model.dbt_artifacts.stg_dbt__snapshots": ["model.dbt_artifacts.snapshots"], "model.dbt_artifacts.stg_dbt__tests": ["model.dbt_artifacts.tests"], "model.dbt_artifacts.stg_dbt__exposures": ["model.dbt_artifacts.exposures"], "model.dbt_artifacts.stg_dbt__snapshot_executions": ["model.dbt_artifacts.snapshot_executions"], "model.dbt_artifacts.stg_dbt__test_executions": ["model.dbt_artifacts.test_executions"], "model.dbt_artifacts.stg_dbt__seeds": ["model.dbt_artifacts.seeds"], "model.dbt_artifacts.stg_dbt__models": ["model.dbt_artifacts.models"], "model.dbt_artifacts.stg_dbt__sources": ["model.dbt_artifacts.sources"], "test.dbt_tutorial.unique_my_first_dbt_model_id.16e066b321": ["model.dbt_tutorial.my_first_dbt_model"], "test.dbt_tutorial.accepted_values_my_first_dbt_model_id__1__2__3.440a95ba04": ["model.dbt_tutorial.my_first_dbt_model"], "test.dbt_tutorial.unique_my_second_dbt_model_id.57a0f8c493": ["model.dbt_tutorial.my_second_dbt_model"], "test.dbt_tutorial.not_null_my_second_dbt_model_id.151b76d778": ["model.dbt_tutorial.my_second_dbt_model"], "test.dbt_tutorial.unique_stg_jaffle_shop__customers_customer_id.231d91af86": ["model.dbt_tutorial.stg_jaffle_shop__customers"], "test.dbt_tutorial.not_null_stg_jaffle_shop__customers_customer_id.b4343d8610": ["model.dbt_tutorial.stg_jaffle_shop__customers"], "test.dbt_tutorial.unique_customer_distinct_orders_customer_id.e370639724": ["model.dbt_tutorial.customer_distinct_orders"], "test.dbt_tutorial.not_null_customer_distinct_orders_customer_id.cd4437fce8": ["model.dbt_tutorial.customer_distinct_orders"], "source.dbt_tutorial.jaffle_shop.orders": [], "source.dbt_tutorial.jaffle_shop.customers": []}, "child_map": {"model.dbt_tutorial.my_second_dbt_model": ["model.dbt_tutorial.my_third_dbt_model", "test.dbt_tutorial.not_null_my_second_dbt_model_id.151b76d778", "test.dbt_tutorial.unique_my_second_dbt_model_id.57a0f8c493"], "model.dbt_tutorial.my_first_dbt_model": ["model.dbt_tutorial.my_second_dbt_model", "test.dbt_tutorial.accepted_values_my_first_dbt_model_id__1__2__3.440a95ba04", "test.dbt_tutorial.unique_my_first_dbt_model_id.16e066b321"], "model.dbt_tutorial.my_unrelated_model": ["model.dbt_tutorial.my_second_dbt_model"], "model.dbt_tutorial.my_third_dbt_model": [], "model.dbt_tutorial.stg_jaffle_shop__orders": ["model.dbt_tutorial.customer_distinct_orders"], "model.dbt_tutorial.stg_jaffle_shop__customers": ["model.dbt_tutorial.customer_distinct_orders", "test.dbt_tutorial.not_null_stg_jaffle_shop__customers_customer_id.b4343d8610", "test.dbt_tutorial.unique_stg_jaffle_shop__customers_customer_id.231d91af86"], "model.dbt_tutorial.date_spine": ["model.dbt_tutorial.test"], "model.dbt_tutorial.customer_distinct_orders": ["test.dbt_tutorial.not_null_customer_distinct_orders_customer_id.cd4437fce8", "test.dbt_tutorial.unique_customer_distinct_orders_customer_id.e370639724"], "model.dbt_tutorial.fct_holidays": [], "model.dbt_tutorial.fct_fruit_orders": [], "model.dbt_tutorial.test": [], "seed.dbt_tutorial.fruit_prices_fact": ["model.dbt_tutorial.fct_fruit_orders"], "seed.dbt_tutorial.fruit_user_input": ["model.dbt_tutorial.fct_fruit_orders"], "model.re_data.re_data_test_history": ["model.re_data.re_data_alerts", "model.re_data.re_data_test_runs", "operation.re_data.re_data-on-run-end-0"], "model.re_data.re_data_run_started_at": ["model.re_data.re_data_base_metrics", "model.re_data.re_data_columns", "model.re_data.re_data_last_base_metrics_thread0", "model.re_data.re_data_last_base_metrics_thread1", "model.re_data.re_data_last_base_metrics_thread2", "model.re_data.re_data_last_base_metrics_thread3", "model.re_data.re_data_last_table_samples", "model.re_data.re_data_schema_changes"], "model.re_data.re_data_last_table_samples": ["model.re_data.re_data_table_samples"], "model.re_data.re_data_last_table_samples_part": ["model.re_data.re_data_last_table_samples", "model.re_data.re_data_table_samples", "model.re_data.re_data_table_samples"], "model.re_data.re_data_last_base_metrics_part1": ["model.re_data.re_data_base_metrics", "model.re_data.re_data_base_metrics", "model.re_data.re_data_last_base_metrics_thread1"], "model.re_data.re_data_last_base_metrics_thread0": ["model.re_data.re_data_base_metrics"], "model.re_data.re_data_last_base_metrics_part3": ["model.re_data.re_data_base_metrics", "model.re_data.re_data_base_metrics", "model.re_data.re_data_last_base_metrics_thread3"], "model.re_data.re_data_last_base_metrics_thread2": ["model.re_data.re_data_base_metrics"], "model.re_data.re_data_last_base_metrics_part2": ["model.re_data.re_data_base_metrics", "model.re_data.re_data_base_metrics", "model.re_data.re_data_last_base_metrics_thread2"], "model.re_data.re_data_last_base_metrics_thread1": ["model.re_data.re_data_base_metrics"], "model.re_data.re_data_last_base_metrics_thread3": ["model.re_data.re_data_base_metrics"], "model.re_data.re_data_last_base_metrics_part0": ["model.re_data.re_data_base_metrics", "model.re_data.re_data_base_metrics", "model.re_data.re_data_last_base_metrics_thread0"], "model.re_data.re_data_alerts": [], "model.re_data.re_data_test_runs": [], "model.re_data.re_data_z_score": ["model.re_data.re_data_anomalies"], "model.re_data.re_data_schema_changes": ["model.re_data.re_data_alerts"], "model.re_data.re_data_anomalies": ["model.re_data.re_data_alerts"], "model.re_data.re_data_metrics": [], "model.re_data.re_data_columns_over_time": ["model.re_data.re_data_schema_changes"], "model.re_data.re_data_table_samples": [], "model.re_data.re_data_base_metrics": ["model.re_data.re_data_last_metrics", "model.re_data.re_data_last_stats", "model.re_data.re_data_last_stats", "model.re_data.re_data_last_stats", "model.re_data.re_data_metrics"], "model.re_data.re_data_last_metrics": ["model.re_data.re_data_z_score"], "model.re_data.re_data_last_stats": ["model.re_data.re_data_z_score"], "model.re_data.re_data_selected": ["model.re_data.re_data_anomalies", "model.re_data.re_data_base_metrics", "model.re_data.re_data_columns", "model.re_data.re_data_columns_over_time", "model.re_data.re_data_last_base_metrics_thread0", "model.re_data.re_data_last_base_metrics_thread1", "model.re_data.re_data_last_base_metrics_thread2", "model.re_data.re_data_last_base_metrics_thread3", "model.re_data.re_data_last_table_samples", "model.re_data.re_data_schema_changes"], "model.re_data.re_data_monitored": ["model.re_data.re_data_base_metrics", "model.re_data.re_data_columns", "model.re_data.re_data_last_base_metrics_thread0", "model.re_data.re_data_last_base_metrics_thread1", "model.re_data.re_data_last_base_metrics_thread2", "model.re_data.re_data_last_base_metrics_thread3", "model.re_data.re_data_last_table_samples", "model.re_data.re_data_schema_changes", "model.re_data.re_data_selected"], "model.re_data.re_data_columns": ["model.re_data.re_data_base_metrics", "model.re_data.re_data_columns_over_time", "model.re_data.re_data_last_base_metrics_part0", "model.re_data.re_data_last_base_metrics_part1", "model.re_data.re_data_last_base_metrics_part2", "model.re_data.re_data_last_base_metrics_part3", "model.re_data.re_data_last_base_metrics_thread0", "model.re_data.re_data_last_base_metrics_thread1", "model.re_data.re_data_last_base_metrics_thread2", "model.re_data.re_data_last_base_metrics_thread3", "model.re_data.re_data_last_table_samples"], "operation.re_data.re_data-on-run-end-0": [], "model.dbt_artifacts.fct_dbt__test_executions": [], "model.dbt_artifacts.fct_dbt__snapshot_executions": [], "model.dbt_artifacts.dim_dbt__tests": [], "model.dbt_artifacts.dim_dbt__snapshots": [], "model.dbt_artifacts.fct_dbt__seed_executions": [], "model.dbt_artifacts.fct_dbt__model_executions": [], "model.dbt_artifacts.dim_dbt__current_models": [], "model.dbt_artifacts.dim_dbt__exposures": [], "model.dbt_artifacts.dim_dbt__models": [], "model.dbt_artifacts.dim_dbt__sources": [], "model.dbt_artifacts.dim_dbt__seeds": [], "model.dbt_artifacts.fct_dbt__invocations": [], "model.dbt_artifacts.snapshot_executions": ["model.dbt_artifacts.stg_dbt__snapshot_executions"], "model.dbt_artifacts.test_executions": ["model.dbt_artifacts.stg_dbt__test_executions"], "model.dbt_artifacts.exposures": ["model.dbt_artifacts.stg_dbt__exposures"], "model.dbt_artifacts.models": ["model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.seeds": ["model.dbt_artifacts.stg_dbt__seeds"], "model.dbt_artifacts.sources": ["model.dbt_artifacts.stg_dbt__sources"], "model.dbt_artifacts.tests": ["model.dbt_artifacts.stg_dbt__tests"], "model.dbt_artifacts.snapshots": ["model.dbt_artifacts.stg_dbt__snapshots"], "model.dbt_artifacts.seed_executions": ["model.dbt_artifacts.stg_dbt__seed_executions"], "model.dbt_artifacts.model_executions": ["model.dbt_artifacts.stg_dbt__model_executions"], "model.dbt_artifacts.invocations": ["model.dbt_artifacts.stg_dbt__invocations"], "model.dbt_artifacts.stg_dbt__invocations": ["model.dbt_artifacts.fct_dbt__invocations"], "model.dbt_artifacts.stg_dbt__model_executions": ["model.dbt_artifacts.dim_dbt__current_models", "model.dbt_artifacts.fct_dbt__model_executions"], "model.dbt_artifacts.stg_dbt__seed_executions": ["model.dbt_artifacts.fct_dbt__seed_executions"], "model.dbt_artifacts.stg_dbt__snapshots": ["model.dbt_artifacts.dim_dbt__snapshots"], "model.dbt_artifacts.stg_dbt__tests": ["model.dbt_artifacts.dim_dbt__tests"], "model.dbt_artifacts.stg_dbt__exposures": ["model.dbt_artifacts.dim_dbt__exposures"], "model.dbt_artifacts.stg_dbt__snapshot_executions": ["model.dbt_artifacts.fct_dbt__snapshot_executions"], "model.dbt_artifacts.stg_dbt__test_executions": ["model.dbt_artifacts.fct_dbt__test_executions"], "model.dbt_artifacts.stg_dbt__seeds": ["model.dbt_artifacts.dim_dbt__seeds"], "model.dbt_artifacts.stg_dbt__models": ["model.dbt_artifacts.dim_dbt__current_models", "model.dbt_artifacts.dim_dbt__models"], "model.dbt_artifacts.stg_dbt__sources": ["model.dbt_artifacts.dim_dbt__sources"], "test.dbt_tutorial.unique_my_first_dbt_model_id.16e066b321": [], "test.dbt_tutorial.accepted_values_my_first_dbt_model_id__1__2__3.440a95ba04": [], "test.dbt_tutorial.unique_my_second_dbt_model_id.57a0f8c493": [], "test.dbt_tutorial.not_null_my_second_dbt_model_id.151b76d778": [], "test.dbt_tutorial.unique_stg_jaffle_shop__customers_customer_id.231d91af86": [], "test.dbt_tutorial.not_null_stg_jaffle_shop__customers_customer_id.b4343d8610": [], "test.dbt_tutorial.unique_customer_distinct_orders_customer_id.e370639724": [], "test.dbt_tutorial.not_null_customer_distinct_orders_customer_id.cd4437fce8": [], "source.dbt_tutorial.jaffle_shop.orders": ["model.dbt_tutorial.stg_jaffle_shop__orders"], "source.dbt_tutorial.jaffle_shop.customers": ["model.dbt_tutorial.stg_jaffle_shop__customers"]}}